"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@zk-kit+imt@2.0.0-beta.8";
exports.ids = ["vendor-chunks/@zk-kit+imt@2.0.0-beta.8"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@zk-kit+imt@2.0.0-beta.8/node_modules/@zk-kit/imt/dist/index.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zk-kit+imt@2.0.0-beta.8/node_modules/@zk-kit/imt/dist/index.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IMT: () => (/* binding */ IMT)\n/* harmony export */ });\n/* harmony import */ var _zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @zk-kit/utils/error-handlers */ \"(ssr)/./node_modules/.pnpm/@zk-kit+utils@1.3.0/node_modules/@zk-kit/utils/dist/lib.esm/error-handlers.js\");\n/**\n * @module @zk-kit/imt\n * @version 2.0.0-beta.8\n * @file Incremental Merkle tree implementation in TypeScript.\n * @copyright Ethereum Foundation 2025\n * @license MIT\n * @see [Github]{@link https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/imt}\n*/\n\n\n/**\n * An {@link IMT} (aka Incremental Merkle Tree) is a type of data structure used in cryptography and\n * computer science for efficiently verifying the integrity of a large set of data,\n * especially in situations where new data is added over time. It is based on the concept\n * of a Merkle tree, and its key feature is its ability to efficiently update the tree\n * when new data is added or existing data is modified.\n * In this implementation, the tree is constructed using a fixed {@link IMT#depth}\n * value, and a list of {@link IMT#zeroes} (one for each level) is used to compute the\n * hash of a node when not all of its children are defined. The number of children for each\n * node can also be specified with the {@link IMT#arity} parameter.\n */\nclass IMT {\n    /**\n     * It initializes the tree with an hash function, the depth, the zero value to use for zeroes\n     * and the arity (i.e. the number of children for each node). It also takes an optional parameter\n     * to initialize the tree with a list of leaves.\n     * @param hash The hash function used to create nodes.\n     * @param depth The tree depth.\n     * @param zeroValue The zero value used to create zeroes.\n     * @param arity The number of children for each node.\n     * @param leaves The list of initial leaves.\n     */\n    constructor(hash, depth, zeroValue, arity = 2, leaves = []) {\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireFunction)(hash, \"hash\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireNumber)(depth, \"depth\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireTypes)(zeroValue, \"zeroValue\", [\"number\", \"string\", \"bigint\"]);\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireNumber)(arity, \"arity\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireObject)(leaves, \"leaves\");\n        if (leaves.length > arity ** depth) {\n            throw new Error(`The tree cannot contain more than ${arity ** depth} leaves`);\n        }\n        // Initialize the attributes.\n        this._hash = hash;\n        this._depth = depth;\n        this._zeroes = [];\n        this._nodes = [];\n        this._arity = arity;\n        for (let level = 0; level < depth; level += 1) {\n            this._zeroes.push(zeroValue);\n            this._nodes[level] = [];\n            // There must be a zero value for each tree level (except the root).\n            zeroValue = hash(Array(this._arity).fill(zeroValue));\n        }\n        this._nodes[depth] = [];\n        // It initializes the tree with a list of leaves if there are any.\n        if (leaves.length > 0) {\n            this._nodes[0] = leaves;\n            for (let level = 0; level < depth; level += 1) {\n                for (let index = 0; index < Math.ceil(this._nodes[level].length / arity); index += 1) {\n                    const position = index * arity;\n                    const children = [];\n                    for (let i = 0; i < arity; i += 1) {\n                        children.push(this._nodes[level][position + i] ?? this.zeroes[level]);\n                    }\n                    this._nodes[level + 1][index] = hash(children);\n                }\n            }\n        }\n        else {\n            // If there are no leaves, the default root is the last zero value.\n            this._nodes[depth][0] = zeroValue;\n        }\n        // Freeze the array objects. It prevents unintentional changes.\n        Object.freeze(this._zeroes);\n        Object.freeze(this._nodes);\n    }\n    /**\n     * The root of the tree. This value doesn't need to be stored as\n     * it is always the first and unique element of the last level of the tree.\n     * Its value can be retrieved in {@link IMT#_nodes}.\n     * @returns The root hash of the tree.\n     */\n    get root() {\n        return this._nodes[this.depth][0];\n    }\n    /**\n     * The depth of the tree, which equals the number of levels - 1.\n     * @returns The depth of the tree.\n     */\n    get depth() {\n        return this._depth;\n    }\n    /**\n     * The leaves of the tree. They can be retrieved from the first\n     * level of the tree using {@link IMT#_nodes}. The returned\n     * value is a copy of the array and not the original object.\n     * @returns The list of tree leaves.\n     */\n    get leaves() {\n        return this._nodes[0].slice();\n    }\n    /**\n     * The list of zero values calculated during the initialization of the tree.\n     * @returns The list of pre-computed zeroes.\n     */\n    get zeroes() {\n        return this._zeroes;\n    }\n    /**\n     * The number of children per node.\n     * @returns The number of children per node.\n     */\n    get arity() {\n        return this._arity;\n    }\n    /**\n     * It returns the index of the first occurrence of a leaf in the tree.\n     * If the leaf does not exist it returns -1.\n     * @param leaf A leaf of the tree.\n     * @returns The index of the leaf.\n     */\n    indexOf(leaf) {\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireTypes)(leaf, \"leaf\", [\"number\", \"string\", \"bigint\"]);\n        return this._nodes[0].indexOf(leaf);\n    }\n    /**\n     * The leaves are inserted incrementally. If 'i' is the index of the last\n     * leaf, the new one will be inserted at position 'i + 1'. Every time a\n     * new leaf is inserted, the nodes that separate the new leaf from the root\n     * of the tree are created or updated if they already exist, from bottom to top.\n     * When a node has only one child (the left one), its value is the hash of that\n     * node and the zero value of that level. Otherwise, the hash of the children\n     * is calculated.\n     * @param leaf The new leaf to be inserted in the tree.\n     */\n    insert(leaf) {\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireTypes)(leaf, \"leaf\", [\"number\", \"string\", \"bigint\"]);\n        if (this._nodes[0].length >= this.arity ** this.depth) {\n            throw new Error(\"The tree is full\");\n        }\n        let node = leaf;\n        let index = this._nodes[0].length;\n        for (let level = 0; level < this.depth; level += 1) {\n            const position = index % this.arity;\n            const levelStartIndex = index - position;\n            const levelEndIndex = levelStartIndex + this.arity;\n            const children = [];\n            this._nodes[level][index] = node;\n            for (let i = levelStartIndex; i < levelEndIndex; i += 1) {\n                if (i < this._nodes[level].length) {\n                    children.push(this._nodes[level][i]);\n                }\n                else {\n                    children.push(this._zeroes[level]);\n                }\n            }\n            node = this._hash(children);\n            index = Math.floor(index / this.arity);\n        }\n        this._nodes[this.depth][0] = node;\n    }\n    /**\n     * It deletes a leaf from the tree. It does not remove the leaf from\n     * the data structure, but rather it sets the leaf to be deleted to the zero value.\n     * @param index The index of the leaf to be deleted.\n     */\n    delete(index) {\n        this.update(index, this.zeroes[0]);\n    }\n    /**\n     * It updates a leaf in the tree. It's very similar to the {@link IMT#insert} function.\n     * @param index The index of the leaf to be updated.\n     * @param newLeaf The new leaf to be inserted.\n     */\n    update(index, newLeaf) {\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireNumber)(index, \"index\");\n        if (index < 0 || index >= this._nodes[0].length) {\n            throw new Error(\"The leaf does not exist in this tree\");\n        }\n        if (newLeaf === this._nodes[0][index])\n            return;\n        let node = newLeaf;\n        for (let level = 0; level < this.depth; level += 1) {\n            const position = index % this.arity;\n            const levelStartIndex = index - position;\n            const levelEndIndex = levelStartIndex + this.arity;\n            const children = [];\n            this._nodes[level][index] = node;\n            for (let i = levelStartIndex; i < levelEndIndex; i += 1) {\n                if (i < this._nodes[level].length) {\n                    children.push(this._nodes[level][i]);\n                }\n                else {\n                    children.push(this.zeroes[level]);\n                }\n            }\n            node = this._hash(children);\n            index = Math.floor(index / this.arity);\n        }\n        this._nodes[this.depth][0] = node;\n    }\n    /**\n     * It creates a {@link IMTMerkleProof} for a leaf of the tree.\n     * That proof can be verified by this tree using the same hash function.\n     * @param index The index of the leaf for which a Merkle proof will be generated.\n     * @returns The Merkle proof of the leaf.\n     */\n    createProof(index) {\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireNumber)(index, \"index\");\n        if (index < 0 || index >= this._nodes[0].length) {\n            throw new Error(\"The leaf does not exist in this tree\");\n        }\n        const siblings = [];\n        const pathIndices = [];\n        const leafIndex = index;\n        for (let level = 0; level < this.depth; level += 1) {\n            const position = index % this.arity;\n            const levelStartIndex = index - position;\n            const levelEndIndex = levelStartIndex + this.arity;\n            pathIndices[level] = position;\n            siblings[level] = [];\n            for (let i = levelStartIndex; i < levelEndIndex; i += 1) {\n                if (i !== index) {\n                    if (i < this._nodes[level].length) {\n                        siblings[level].push(this._nodes[level][i]);\n                    }\n                    else {\n                        siblings[level].push(this.zeroes[level]);\n                    }\n                }\n            }\n            index = Math.floor(index / this.arity);\n        }\n        return { root: this.root, leaf: this._nodes[0][leafIndex], pathIndices, siblings, leafIndex };\n    }\n    /**\n     * It verifies a {@link IMTMerkleProof} to confirm that a leaf indeed\n     * belongs to a tree.  Does not verify that the node belongs to this\n     * tree in particular.  Equivalent to `IMT.verifyProof(proof, this._hash)`.\n     *\n     * @param proof The Merkle tree proof.\n     * @returns True if the leaf is part of the tree, and false otherwise.\n     */\n    verifyProof(proof) {\n        return IMT.verifyProof(proof, this._hash);\n    }\n    /**\n     * It verifies a {@link IMTMerkleProof} to confirm that a leaf indeed\n     * belongs to a tree.\n     * @param proof The Merkle tree proof.\n     * @param hash The hash function used to compute the tree nodes.\n     * @returns True if the leaf is part of the tree, and false otherwise.\n     */\n    static verifyProof(proof, hash) {\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireObject)(proof, \"proof\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireTypes)(proof.root, \"proof.root\", [\"number\", \"string\", \"bigint\"]);\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireTypes)(proof.leaf, \"proof.leaf\", [\"number\", \"string\", \"bigint\"]);\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireArray)(proof.siblings, \"proof.siblings\");\n        (0,_zk_kit_utils_error_handlers__WEBPACK_IMPORTED_MODULE_0__.requireArray)(proof.pathIndices, \"proof.pathIndices\");\n        let node = proof.leaf;\n        for (let i = 0; i < proof.siblings.length; i += 1) {\n            const children = proof.siblings[i].slice();\n            children.splice(proof.pathIndices[i], 0, node);\n            node = hash(children);\n        }\n        return proof.root === node;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@zk-kit+imt@2.0.0-beta.8/node_modules/@zk-kit/imt/dist/index.js\n");

/***/ })

};
;