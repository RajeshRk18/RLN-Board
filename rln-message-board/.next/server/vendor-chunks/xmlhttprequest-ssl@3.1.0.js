/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/xmlhttprequest-ssl@3.1.0";
exports.ids = ["vendor-chunks/xmlhttprequest-ssl@3.1.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/xmlhttprequest-ssl@3.1.0/node_modules/xmlhttprequest-ssl/lib/XMLHttpRequest.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/xmlhttprequest-ssl@3.1.0/node_modules/xmlhttprequest-ssl/lib/XMLHttpRequest.js ***!
  \***********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\n/* provided dependency */ var process = __webpack_require__(/*! process/browser */ \"(ssr)/./node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js\");\n/**\n * Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.\n *\n * This can be used with JS designed for browsers to improve reuse of code and\n * allow the use of existing libraries.\n *\n * Usage: include(\"XMLHttpRequest.js\") and use XMLHttpRequest per W3C specs.\n *\n * @author Dan DeFelippi <dan@driverdan.com>\n * @contributor David Ellis <d.f.ellis@ieee.org>\n * @license MIT\n */\n\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar spawn = (__webpack_require__(/*! child_process */ \"child_process\").spawn);\n\n/**\n * Module exports.\n */\n\nmodule.exports = XMLHttpRequest;\n\n// backwards-compat\nXMLHttpRequest.XMLHttpRequest = XMLHttpRequest;\n\n/**\n * `XMLHttpRequest` constructor.\n *\n * Supported options for the `opts` object are:\n *\n *  - `agent`: An http.Agent instance; http.globalAgent may be used; if 'undefined', agent usage is disabled\n *\n * @param {Object} opts optional \"options\" object\n */\n\nfunction XMLHttpRequest(opts) {\n  \"use strict\";\n\n  // defines a list of default options to prevent parameters pollution\n  var default_options = {\n    pfx: undefined,\n    key: undefined,\n    passphrase: undefined,\n    cert: undefined,\n    ca: undefined,\n    ciphers: undefined,\n    rejectUnauthorized: true,\n    autoUnref: false,\n    agent: undefined,\n    allowFileSystemResources: true,\n    maxRedirects: 20, // Chrome standard\n    origin: undefined\n  };\n\n  opts = Object.assign(default_options, opts);\n\n  var sslOptions = {\n    pfx: opts.pfx,\n    key: opts.key,\n    passphrase: opts.passphrase,\n    cert: opts.cert,\n    ca: opts.ca,\n    ciphers: opts.ciphers,\n    rejectUnauthorized: opts.rejectUnauthorized !== false\n  };\n\n  /**\n   * Private variables\n   */\n  var self = this;\n  var http = __webpack_require__(/*! http */ \"http\");\n  var https = __webpack_require__(/*! https */ \"https\");\n\n  var maxRedirects = opts.maxRedirects;\n  if (typeof maxRedirects !== 'number' || Number.isNaN(maxRedirects)) maxRedirects = 20;\n  else maxRedirects = Math.max(maxRedirects, 0);\n\n  var redirectCount = 0;\n\n  // Holds http.js objects\n  var request;\n  var response;\n\n  // Request settings\n  var settings = {};\n\n  // Disable header blacklist.\n  // Not part of XHR specs.\n  var disableHeaderCheck = false;\n\n  // Set some default headers\n  var defaultHeaders = {\n    \"User-Agent\": \"node-XMLHttpRequest\",\n    \"Accept\": \"*/*\"\n  };\n\n  var headers = Object.assign({}, defaultHeaders);\n\n  // These headers are not user setable.\n  // The following are allowed but banned in the spec:\n  // * user-agent\n  var forbiddenRequestHeaders = [\n    \"accept-charset\",\n    \"accept-encoding\",\n    \"access-control-request-headers\",\n    \"access-control-request-method\",\n    \"connection\",\n    \"content-length\",\n    \"content-transfer-encoding\",\n    \"cookie\",\n    \"cookie2\",\n    \"date\",\n    \"expect\",\n    \"host\",\n    \"keep-alive\",\n    \"origin\",\n    \"referer\",\n    \"te\",\n    \"trailer\",\n    \"transfer-encoding\",\n    \"upgrade\",\n    \"via\"\n  ];\n\n  // These request methods are not allowed\n  var forbiddenRequestMethods = [\n    \"TRACE\",\n    \"TRACK\",\n    \"CONNECT\"\n  ];\n\n  // Send flag\n  var sendFlag = false;\n  // Error flag, used when errors occur or abort is called\n  var errorFlag = false;\n  var abortedFlag = false;\n\n  // Event listeners\n  var listeners = {};\n\n  /**\n   * Constants\n   */\n\n  this.UNSENT = 0;\n  this.OPENED = 1;\n  this.HEADERS_RECEIVED = 2;\n  this.LOADING = 3;\n  this.DONE = 4;\n\n  /**\n   * Public vars\n   */\n\n  // Current state\n  this.readyState = this.UNSENT;\n\n  // default ready state change handler in case one is not set or is set late\n  this.onreadystatechange = null;\n\n  // Result & response\n  this.responseText = \"\";\n  this.responseXML = \"\";\n  this.responseURL = \"\";\n  this.response = Buffer.alloc(0);\n  this.status = null;\n  this.statusText = null;\n\n  // xhr.responseType is supported:\n  //   When responseType is 'text' or '', self.responseText will be utf8 decoded text.\n  //   When responseType is 'json', self.responseText initially will be utf8 decoded text,\n  //   which is then JSON parsed into self.response.\n  //   When responseType is 'arraybuffer', self.response is an ArrayBuffer.\n  //   When responseType is 'blob', self.response is a Blob.\n  // cf. section 3.6, subsections 8,9,10,11 of https://xhr.spec.whatwg.org/#the-response-attribute\n  this.responseType = \"\"; /* 'arraybuffer' or 'text' or '' or 'json' or 'blob' */\n\n  /**\n   * Private methods\n   */\n\n  /**\n   * Check if the specified header is allowed.\n   *\n   * @param string header Header to validate\n   * @return boolean False if not allowed, otherwise true\n   */\n  var isAllowedHttpHeader = function(header) {\n    return disableHeaderCheck || (header && forbiddenRequestHeaders.indexOf(header.toLowerCase()) === -1);\n  };\n\n  /**\n   * Check if the specified method is allowed.\n   *\n   * @param string method Request method to validate\n   * @return boolean False if not allowed, otherwise true\n   */\n  var isAllowedHttpMethod = function(method) {\n    return (method && forbiddenRequestMethods.indexOf(method) === -1);\n  };\n\n  /**\n   * When xhr.responseType === 'arraybuffer', xhr.response must have type ArrayBuffer according\n   * to section 3.6.9 of https://xhr.spec.whatwg.org/#the-response-attribute .\n   * However, bufTotal = Buffer.concat(...) often has byteOffset > 0, so bufTotal.buffer is larger\n   * than the useable region in bufTotal. This means that a new copy of bufTotal would need to be\n   * created to get the correct ArrayBuffer. Instead, do the concat by hand to create the right\n   * sized ArrayBuffer in the first place.\n   *\n   * The return type is Uint8Array,\n   * because often Buffer will have Buffer.length < Buffer.buffer.byteLength.\n   *\n   * @param {Array<Buffer>} bufferArray\n   * @returns {Uint8Array}\n   */\n  var concat = function(bufferArray) {\n    let length = 0, offset = 0;\n    for (let k = 0; k < bufferArray.length; k++)\n      length += bufferArray[k].length;\n    const result = new Uint8Array(length);\n    for (let k = 0; k < bufferArray.length; k++)\n    {\n      result.set(bufferArray[k], offset);\n      offset += bufferArray[k].length;\n    }\n    return result;\n  };\n\n  /**\n   * When xhr.responseType === 'arraybuffer', xhr.response must have type ArrayBuffer according\n   * to section 3.6.9 of https://xhr.spec.whatwg.org/#the-response-attribute .\n   * However, buf = Buffer.from(str) often has byteOffset > 0, so buf.buffer is larger than the\n   * usable region in buf. This means that a new copy of buf would need to be created to get the\n   * correct arrayBuffer. Instead, do it by hand to create the right sized ArrayBuffer in the\n   * first place.\n   *\n   * @param {string} str\n   * @returns {Buffer}\n   */\n  var stringToBuffer = function(str) {\n    const ab = new ArrayBuffer(str.length)\n    const buf = Buffer.from(ab);\n    for (let k = 0; k < str.length; k++)\n      buf[k] = Number(str.charCodeAt(k));\n    return buf;\n  }\n\n  /**\n   * Given a Buffer buf, check whether buf.buffer.byteLength > buf.length and if so,\n   * create a new ArrayBuffer whose byteLength is buf.length, containing the bytes.\n   * of buf. This function shouldn't usually be needed, unless there's a future\n   * behavior change where buf.buffer.byteLength > buf.length unexpectedly.\n   *\n   * @param {Buffer} buf\n   * @returns {ArrayBuffer}\n   */\n  var checkAndShrinkBuffer = function(buf) {\n    if (buf.length === buf.buffer.byteLength)\n      return buf.buffer;\n    const ab = new ArrayBuffer(buf.length);\n    const result = Buffer.from(ab);\n    for (let k = 0; k < buf.length; k++)\n      result[k] = buf[k];\n    return ab;\n  }\n\n  /**\n   * Public methods\n   */\n\n  /**\n   * Open the connection. Currently supports local server requests.\n   *\n   * @param string method Connection method (eg GET, POST)\n   * @param string url URL for the connection.\n   * @param boolean async Asynchronous connection. Default is true.\n   * @param string user Username for basic authentication (optional)\n   * @param string password Password for basic authentication (optional)\n   */\n  this.open = function(method, url, async, user, password) {\n    this.abort();\n    errorFlag = false;\n    abortedFlag = false;\n\n    // Check for valid request method\n    if (!isAllowedHttpMethod(method)) {\n      throw new Error(\"SecurityError: Request method not allowed\");\n    }\n\n    settings = {\n      \"method\": method.toUpperCase(),\n      \"url\": url,\n      \"async\": (typeof async !== \"boolean\" ? true : async),\n      \"user\": user || null,\n      \"password\": password || null\n    };\n\n    // parse origin\n    try {\n      settings.origin = new URL(opts.origin);\n    }\n    catch (e) {\n      settings.origin = null;\n    }\n\n    setState(this.OPENED);\n  };\n\n  /**\n   * Disables or enables isAllowedHttpHeader() check the request. Enabled by default.\n   * This does not conform to the W3C spec.\n   *\n   * @param boolean state Enable or disable header checking.\n   */\n  this.setDisableHeaderCheck = function(state) {\n    disableHeaderCheck = state;\n  };\n\n  /**\n   * Sets a header for the request.\n   *\n   * @param string header Header name\n   * @param string value Header value\n   * @return boolean Header added\n   */\n  this.setRequestHeader = function(header, value) {\n    if (this.readyState != this.OPENED) {\n      throw new Error(\"INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN\");\n    }\n    if (!isAllowedHttpHeader(header)) {\n      console.warn('Refused to set unsafe header \"' + header + '\"');\n      return false;\n    }\n    if (sendFlag) {\n      throw new Error(\"INVALID_STATE_ERR: send flag is true\");\n    }\n    headers[header] = value;\n    return true;\n  };\n\n  /**\n   * Gets a header from the server response.\n   *\n   * @param string header Name of header to get.\n   * @return string Text of the header or null if it doesn't exist.\n   */\n  this.getResponseHeader = function(header) {\n    // in case of local request, headers are not present\n    if (typeof header === \"string\"\n      && this.readyState > this.OPENED\n      && response.headers[header.toLowerCase()]\n      && !errorFlag\n      && response\n      && response.headers\n    ) {\n      return response.headers[header.toLowerCase()];\n    }\n\n    return null;\n  };\n\n  /**\n   * Gets all the response headers.\n   *\n   * @return string A string with all response headers separated by CR+LF\n   */\n  this.getAllResponseHeaders = function() {\n    // in case of local request, headers are not present\n    if (this.readyState < this.HEADERS_RECEIVED || errorFlag || !response || !response.headers) {\n      return \"\";\n    }\n    var result = \"\";\n\n    for (var i in response.headers) {\n      // Cookie headers are excluded\n      if (i !== \"set-cookie\" && i !== \"set-cookie2\") {\n        result += i + \": \" + response.headers[i] + \"\\r\\n\";\n      }\n    }\n    return result.slice(0, -2);\n  };\n\n  /**\n   * Gets a request header\n   *\n   * @param string name Name of header to get\n   * @return string Returns the request header or empty string if not set\n   */\n  this.getRequestHeader = function(name) {\n    // @TODO Make this case insensitive\n    if (typeof name === \"string\" && headers[name]) {\n      return headers[name];\n    }\n\n    return \"\";\n  };\n\n  /**\n   * Convert from Data URI to Buffer\n   * @param {URL} url URI to parse\n   * @returns {Buffer} buffer\n   */\n\n  var bufferFromDataUri = function (url) {\n    // Triming from original url object for more consistency\n    var data = url.href.slice(5);\n\n    // separator between header and actual data\n    var parts = data.split(\",\", 2);\n\n    if (parts.length < 2) throw \"Invalid URL\";\n\n    // check if header part has base64 (from 2nd header onwards)\n    var base64 = parts[0].split(\";\").some(function (dataHeader, index) {\n      return index > 0 && dataHeader.toLowerCase() === \"base64\";\n    });\n\n    var responseData, inputData = decodeURIComponent(parts[1]);\n\n    if (base64) {\n      // remove any ASCII whitespaces\n      inputData = inputData.replace(/(\\s|\\t|\\r|\\n|\\v|\\f)+/g, \"\");\n      // check padding amount\n      let padding = inputData.match(/=*$/)[0];\n      if (padding.length + (inputData.length - padding.length) % 4 > 4) throw \"invalid padding\";\n      inputData = inputData.slice(0, inputData.length - padding.length);\n      responseData = Buffer.from(inputData, \"base64\");\n      if (responseData.toString(\"base64\").replace(/=+$/, \"\") !== inputData) throw \"malformed base64 encoding\";\n      return responseData;\n    }\n    else {\n      return Buffer.from(inputData);\n    }\n  }\n\n  /**\n   * Sends the request to the server.\n   *\n   * @param string data Optional data to send as request body.\n   */\n  this.send = function(data) {\n    if (this.readyState != this.OPENED) {\n      throw new Error(\"INVALID_STATE_ERR: connection must be opened before send() is called\");\n    }\n\n    if (sendFlag) {\n      throw new Error(\"INVALID_STATE_ERR: send has already been called\");\n    }\n\n    var isSsl = false, isLocal = false, isDataUri = false;\n    var url;\n    try {\n      if (settings.origin) {\n        url = new URL(settings.url, settings.origin);\n      }\n      else {\n        url = new URL(settings.url);\n      }\n      settings.url = url.href;\n    }\n    catch (e) {\n      // URL parsing throws TypeError, here we only want to take its message\n      self.handleError(new Error(e.message));\n      return;\n    }\n    var host;\n    // Determine the server\n    switch (url.protocol) {\n      case 'https:':\n        isSsl = true;\n        // SSL & non-SSL both need host, no break here.\n      case 'http:':\n        host = url.hostname;\n        break;\n\n      case 'data:':\n        isDataUri = true;\n      \n      case 'file:':\n        isLocal = true;\n        break;\n\n      case undefined:\n      case '':\n        host = \"localhost\";\n        break;\n\n      default:\n        throw new Error(\"Protocol not supported.\");\n    }\n\n    // Load files off the local filesystem (file://)\n    // or data from Data URI (data:)\n    if (isLocal) {\n      if (isDataUri) try {\n        self.status = 200;\n        self.responseURL = settings.url;\n        self.createFileOrSyncResponse(bufferFromDataUri(url));\n        setState(self.DONE);\n        return;\n      }\n      catch (e) {\n        self.handleError(new Error(\"Invalid data URI\"));\n        return;\n      }\n\n      if (!opts.allowFileSystemResources) {\n        self.handleError(new Error(\"Not allowed to load local resource: \" + url.href));\n        return;\n      }\n\n      if (settings.method !== \"GET\") {\n        throw new Error(\"XMLHttpRequest: Only GET method is supported\");\n      }\n\n      if (settings.async) {\n        fs.readFile(unescape(url.pathname), function(error, data) {\n          if (error) {\n            self.handleError(error, error.errno || -1);\n          } else {\n            self.status = 200;\n            self.responseURL = settings.url;\n            // Use self.responseType to create the correct self.responseType, self.response.\n            self.createFileOrSyncResponse(data);\n            setState(self.DONE);\n          }\n        });\n      } else {\n        try {\n          this.status = 200;\n          const syncData = fs.readFileSync(unescape(url.pathname));\n          // Use self.responseType to create the correct self.responseType, self.response.\n          this.responseURL = settings.url;\n          this.createFileOrSyncResponse(syncData);\n          setState(self.DONE);\n        } catch(e) {\n          this.handleError(e, e.errno || -1);\n        }\n      }\n\n      return;\n    }\n\n    // Default to port 80. If accessing localhost on another port be sure\n    // to use http://localhost:port/path\n    var port = url.port || (isSsl ? 443 : 80);\n    // Add query string if one is used\n    var uri = url.pathname + (url.search || '');\n\n    // Set the Host header or the server may reject the request\n    headers[\"Host\"] = host;\n    if (!((isSsl && port === 443) || port === 80)) {\n      headers[\"Host\"] += ':' + url.port;\n    }\n\n    // Set Basic Auth if necessary\n    if (settings.user) {\n      if (typeof settings.password === \"undefined\") {\n        settings.password = \"\";\n      }\n      var authBuf = Buffer.from(settings.user + \":\" + settings.password);\n      headers[\"Authorization\"] = \"Basic \" + authBuf.toString(\"base64\");\n    }\n\n    // Set content length header\n    if (settings.method === \"GET\" || settings.method === \"HEAD\") {\n      data = null;\n    } else if (data) {\n      headers[\"Content-Length\"] = Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data);\n\n      var headersKeys = Object.keys(headers);\n      if (!headersKeys.some(function (h) { return h.toLowerCase() === 'content-type' })) {\n        headers[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\n      }\n    } else if (settings.method === \"POST\") {\n      // For a post with no data set Content-Length: 0.\n      // This is required by buggy servers that don't meet the specs.\n      headers[\"Content-Length\"] = 0;\n    }\n\n    var options = {\n      host: host,\n      port: port,\n      path: uri,\n      method: settings.method,\n      headers: headers,\n      agent: opts.agent || false\n    };\n\n    // Reset error flag\n    errorFlag = false;\n    // Handle async requests\n    if (settings.async) {\n      // Use the proper protocol\n      var doRequest = isSsl ? https.request : http.request;\n\n      // Request is being sent, set send flag\n      sendFlag = true;\n\n      // As per spec, this is called here for historical reasons.\n      self.dispatchEvent(\"readystatechange\");\n\n      // Handler for the response\n      var responseHandler = function(resp) {\n        // Check for redirect\n        if (\n          resp.statusCode === 301 ||\n          resp.statusCode === 302 ||\n          resp.statusCode === 303 ||\n          resp.statusCode === 307 ||\n          resp.statusCode === 308\n        ) {\n          ++redirectCount;\n          // end the response\n          resp.destroy();\n          if (redirectCount > maxRedirects) {\n            self.handleError(new Error(\"Too many redirects\"));\n            return;\n          }\n          // Change URL to the redirect location\n          var url;\n          try {\n            url = new URL(resp.headers.location, settings.url);\n            // reject redirects to any protocols other than http and https\n            if (url.protocol !== \"https:\" && url.protocol !== \"http:\") throw \"bad protocol\";\n            settings.url = url.href;\n          }\n          catch (e) {\n            self.handleError(new Error(\"Unsafe redirect\"));\n            return;\n          }\n          // change request options again to match with new redirect protocol\n          isSsl = url.protocol === \"https:\";\n          doRequest = isSsl ? https.request : http.request;\n\n          // Set host and port var in case it's used later\n          host = url.hostname;\n          port = url.port || (isSsl ? 443 : 80);\n\n          headers[\"Host\"] = host;\n          if (!((isSsl && port === 443) || port === 80)) {\n            headers[\"Host\"] += ':' + url.port;\n          }\n\n          // Options for the new request\n          var newOptions = {\n            hostname: url.hostname,\n            port: port,\n            path: url.pathname + (url.search || ''),\n            method: resp.statusCode === 303 ? 'GET' : settings.method,\n            headers: headers\n          };\n\n          // Issue the new request\n          createRequest(newOptions);\n          // @TODO Check if an XHR event needs to be fired here\n          return;\n        }\n\n        // Set response var to the response we got back\n        // This is so it remains accessable outside this scope\n        response = resp;\n        // Collect buffers and concatenate once.\n        const buffers = [];\n\n        setState(self.HEADERS_RECEIVED);\n\n        // When responseType is 'text' or '', self.responseText will be utf8 decoded text.\n        // When responseType is 'json', self.responseText initially will be utf8 decoded text,\n        // which is then JSON parsed into self.response.\n        // When responseType is 'arraybuffer', self.response is an ArrayBuffer.\n        // When responseType is 'blob', self.response is a Blob.\n        // cf. section 3.6, subsections 8,9,10,11 of https://xhr.spec.whatwg.org/#the-response-attribute\n        const isUtf8 = self.responseType === \"\" || self.responseType === \"text\" || self.responseType === \"json\";\n        if (isUtf8 && response.setEncoding) {\n          response.setEncoding(\"utf8\");\n        }\n\n        self.status = response.statusCode;\n\n        response.on('data', function(chunk) {\n          // Make sure there's some data\n          if (chunk) {\n            if (isUtf8) {\n              // When responseType is 'text', '', 'json',\n              //   then each chunk is already utf8 decoded.\n              self.responseText += chunk;\n            } else {\n              // Otherwise collect the chunk buffers.\n              buffers.push(chunk);\n            }\n          }\n          // Don't emit state changes if the connection has been aborted.\n          if (sendFlag) {\n            setState(self.LOADING);\n          }\n        }.bind(response));\n\n        response.on('end', function() {\n          if (sendFlag) {\n            // The sendFlag needs to be set before setState is called.  Otherwise if we are chaining callbacks\n            // there can be a timing issue (the callback is called and a new call is made before the flag is reset).\n            sendFlag = false;\n            // Create the correct response for responseType.\n            self.createResponse(buffers);\n            self.statusText = this.statusMessage;\n            self.responseURL = settings.url;\n            // Discard the 'end' event if the connection has been aborted\n            setState(self.DONE);\n          }\n        }.bind(response));\n\n        response.on('error', function(error) {\n          self.handleError(error);\n        }.bind(response));\n      }\n\n      // Error handler for the request\n      var errorHandler = function(error) {\n        // In the case of https://nodejs.org/api/http.html#requestreusedsocket triggering an ECONNRESET,\n        // don't fail the xhr request, attempt again.\n        if (request.reusedSocket && error.code === 'ECONNRESET')\n          return doRequest(options, responseHandler).on('error', errorHandler);\n        self.handleError(error);\n      }\n\n      var createRequest = function (opt) {\n        opt = Object.assign({}, opt);\n        if (isSsl) Object.assign(opt, sslOptions);\n\n        request = doRequest(opt, responseHandler).on('error', errorHandler);\n\n        if (opts.autoUnref) {\n          request.on('socket', function (socket) {\n            socket.unref();\n          });\n        }\n\n        // Node 0.4 and later won't accept empty data. Make sure it's needed.\n        if (data) {\n          request.write(data);\n        }\n\n        request.end();\n      }\n\n      // Create the request\n      createRequest(options);\n\n      self.dispatchEvent(\"loadstart\");\n    } else { // Synchronous\n      // Create a temporary file for communication with the other Node process\n      var contentFile = \".node-xmlhttprequest-content-\" + process.pid;\n      var syncFile = \".node-xmlhttprequest-sync-\" + process.pid;\n      fs.writeFileSync(syncFile, \"\", \"utf8\");\n      // The async request the other Node process executes\n      var execString = \"'use strict';\"\n        + \"var http = require('http'), https = require('https'), fs = require('fs');\"\n        + \"function concat(bufferArray) {\"\n        + \"  let length = 0, offset = 0;\"\n        + \"  for (let k = 0; k < bufferArray.length; k++)\"\n        + \"    length += bufferArray[k].length;\"\n        + \"  const result = Buffer.alloc(length);\"\n        + \"  for (let k = 0; k < bufferArray.length; k++) {\"\n        + \"    for (let i = 0; i < bufferArray[k].length; i++) {\"\n        + \"      result[offset+i] = bufferArray[k][i]\"\n        + \"    }\"\n        + \"    offset += bufferArray[k].length;\"\n        + \"  }\"\n        + \"  return result;\"\n        + \"};\"\n        + \"var doRequest = http\" + (isSsl ? \"s\" : \"\") + \".request;\"\n        + \"var isSsl = \" + !!isSsl + \";\"\n        + \"var options = \" + JSON.stringify(options) + \";\"\n        + \"var sslOptions = \" + JSON.stringify(sslOptions) + \";\"\n        + \"var responseData = Buffer.alloc(0);\"\n        + \"var buffers = [];\"\n        + \"var url = new URL(\" + JSON.stringify(settings.url) + \");\"\n        + \"var maxRedirects = \" + maxRedirects + \", redirects_count = 0;\"\n        + \"var makeRequest = function () {\"\n        + \"  var opt = Object.assign({}, options);\"\n        + \"  if (isSsl) Object.assign(opt, sslOptions);\"\n        + \"  var req = doRequest(opt, function(response) {\"\n        + \"    if (response.statusCode === 301 || response.statusCode === 302 || response.statusCode === 303 || response.statusCode === 307 || response.statusCode === 308) {\"\n        + \"      response.destroy();\"\n        + \"      ++redirects_count;\"\n        + \"      if (redirects_count > maxRedirects) {\"\n        + \"        fs.writeFileSync('\" + contentFile + \"', 'NODE-XMLHTTPREQUEST-ERROR-REDIRECT: Too many redirects', 'utf8');\"\n        + \"        fs.unlinkSync('\" + syncFile + \"');\"\n        + \"        return;\"\n        + \"      }\"\n        + \"      try {\"\n        + \"        url = new URL(response.headers.location, url);\"\n        + \"        if (url.protocol !== 'https:' && url.protocol !== 'http:') throw 'bad protocol';\"\n        + \"      }\"\n        + \"      catch (e) {\"\n        + \"        fs.writeFileSync('\" + contentFile + \"', 'NODE-XMLHTTPREQUEST-ERROR-REDIRECT: Unsafe redirect', 'utf8');\"\n        + \"        fs.unlinkSync('\" + syncFile + \"');\"\n        + \"        return;\"\n        + \"      };\"\n        + \"      isSsl = url.protocol === 'https:';\"\n        + \"      doRequest = isSsl ? https.request : http.request;\"\n        + \"      var port = url.port;\"\n        + \"      options = {\"\n        + \"        hostname: url.hostname,\"\n        + \"        port: port,\"\n        + \"        path: url.pathname + (url.search || ''),\"\n        + \"        method: response.statusCode === 303 ? 'GET' : options.method,\"\n        + \"        headers: options.headers\"\n        + \"      };\"\n        + \"      options.headers['Host'] = url.host;\"\n        + \"      if (!((isSsl && port === 443) || port === 80)) options.headers['Host'] += ':' + port;\"\n        + \"      makeRequest();\"\n        + \"      return;\"\n        + \"    }\"\n        + \"    response.on('data', function(chunk) {\"\n        + \"      buffers.push(chunk);\"\n        + \"    });\"\n        + \"    response.on('end', function() {\"\n        + \"      responseData = concat(buffers);\"\n        + \"      fs.writeFileSync('\" + contentFile + \"', JSON.stringify({err: null, data: {url: url.href, statusCode: response.statusCode, statusText: response.statusMessage, headers: response.headers, data: responseData.toString('utf8')}}), 'utf8');\"\n        + \"      fs.unlinkSync('\" + syncFile + \"');\"\n        + \"    });\"\n        + \"    response.on('error', function(error) {\"\n        + \"      fs.writeFileSync('\" + contentFile + \"', 'NODE-XMLHTTPREQUEST-ERROR:' + JSON.stringify(error), 'utf8');\"\n        + \"      fs.unlinkSync('\" + syncFile + \"');\"\n        + \"    });\"\n        + \"  }).on('error', function(error) {\"\n        + \"    fs.writeFileSync('\" + contentFile + \"', 'NODE-XMLHTTPREQUEST-ERROR:' + JSON.stringify(error), 'utf8');\"\n        + \"    fs.unlinkSync('\" + syncFile + \"');\"\n        + \"  });\"\n        + \"  \" + (data ? \"req.write('\" + JSON.stringify(data).slice(1,-1).replace(/'/g, \"\\\\'\") + \"');\":\"\")\n        + \"  req.end();\"\n        + \"};\"\n        + \"makeRequest();\"\n      // Start the other Node Process, executing this string\n      var syncProc = spawn(process.argv[0], [\"-e\", execString]);\n      while(fs.existsSync(syncFile)) {\n        // Wait while the sync file is empty\n      }\n      self.responseText = fs.readFileSync(contentFile, 'utf8');\n      // Kill the child process once the file has data\n      syncProc.stdin.end();\n      // Remove the temporary file\n      fs.unlinkSync(contentFile);\n      if (self.responseText.match(/^NODE-XMLHTTPREQUEST-ERROR(-REDIRECT){0,1}:/)) {\n        // If the file returned an error, handle it\n        if (self.responseText.startsWith('NODE-XMLHTTPREQUEST-ERROR-REDIRECT')) {\n          self.handleError(new Error(self.responseText.replace(/^NODE-XMLHTTPREQUEST-ERROR-REDIRECT: /, \"\")));\n        }\n        else {\n          var errorObj = JSON.parse(self.responseText.replace(/^NODE-XMLHTTPREQUEST-ERROR:/, \"\"));\n          self.handleError(errorObj, 503);\n        }\n      } else {\n        // If the file returned okay, parse its data and move to the DONE state\n        const resp = JSON.parse(self.responseText);\n        self.status = resp.data.statusCode;\n        self.statusText = resp.data.statusText;\n        self.responseURL = resp.data.url;\n        self.response = stringToBuffer(resp.data.data);\n        // Use self.responseType to create the correct self.responseType, self.response, self.responseXML.\n        self.createFileOrSyncResponse(self.response);\n        // Set up response correctly.\n        response = {\n          statusCode: self.status,\n          headers: resp.data.headers\n        };\n        setState(self.DONE);\n      }\n    }\n  };\n\n  /**\n   * Called when an error is encountered to deal with it.\n   * @param  status  {number}    HTTP status code to use rather than the default (0) for XHR errors.\n   */\n  this.handleError = function(error, status) {\n    this.status = status || 0;\n    this.statusText = error.message || \"\";\n    this.responseText = \"\";\n    this.responseXML = \"\";\n    this.responseURL = \"\";\n    this.response = Buffer.alloc(0);\n    errorFlag = true;\n    setState(this.DONE);\n    if (!settings.async) throw error;\n  };\n\n  /**\n   * Aborts a request.\n   */\n  this.abort = function() {\n    if (request) {\n      request.abort();\n      request = null;\n    }\n\n    headers = Object.assign({}, defaultHeaders);\n    this.responseText = \"\";\n    this.responseXML = \"\";\n    this.response = Buffer.alloc(0);\n\n    errorFlag = abortedFlag = true\n    if (this.readyState !== this.UNSENT\n        && (this.readyState !== this.OPENED || sendFlag)\n        && this.readyState !== this.DONE) {\n      sendFlag = false;\n      setState(this.DONE);\n    }\n    this.readyState = this.UNSENT;\n  };\n\n  /**\n   * Adds an event listener. Preferred method of binding to events.\n   */\n  this.addEventListener = function(event, callback) {\n    if (!(event in listeners)) {\n      listeners[event] = [];\n    }\n    // Currently allows duplicate callbacks. Should it?\n    listeners[event].push(callback);\n  };\n\n  /**\n   * Remove an event callback that has already been bound.\n   * Only works on the matching funciton, cannot be a copy.\n   */\n  this.removeEventListener = function(event, callback) {\n    if (event in listeners) {\n      // Filter will return a new array with the callback removed\n      listeners[event] = listeners[event].filter(function(ev) {\n        return ev !== callback;\n      });\n    }\n  };\n\n  /**\n   * Dispatch any events, including both \"on\" methods and events attached using addEventListener.\n   */\n  this.dispatchEvent = function (event) {\n    let argument = { type: event };\n    if (typeof self[\"on\" + event] === \"function\") {\n      if (this.readyState === this.DONE && settings.async)\n        setTimeout(function() { self[\"on\" + event](argument) }, 0)\n      else\n        self[\"on\" + event](argument)\n    }\n    if (event in listeners) {\n      for (let i = 0, len = listeners[event].length; i < len; i++) {\n        if (this.readyState === this.DONE)\n          setTimeout(function() { listeners[event][i].call(self, argument) }, 0)\n        else\n          listeners[event][i].call(self, argument)\n      }\n    }\n  };\n\n  /**\n   * Construct the correct form of response, given responseType when in non-file based, asynchronous mode.\n   *\n   * When self.responseType is \"\", \"text\", \"json\", self.responseText is a utf8 string.\n   * When self.responseType is \"arraybuffer\", \"blob\", the response is in the buffers parameter,\n   * an Array of Buffers. Then concat(buffers) is Uint8Array, from which checkAndShrinkBuffer\n   * extracts the correct sized ArrayBuffer.\n   *\n   * @param {Array<Buffer>} buffers\n   */\n  this.createResponse = function(buffers) {\n    self.responseXML = '';\n    switch (self.responseType) {\n      case \"\":\n      case \"text\":\n        self.response = self.responseText;\n        break;\n      case 'json':\n        self.response = JSON.parse(self.responseText);\n        self.responseText = '';\n        break;\n      default:\n        self.responseText = '';\n        const totalResponse = concat(buffers);\n        // When self.responseType === 'arraybuffer', self.response is an ArrayBuffer.\n        // Get the correct sized ArrayBuffer.\n        self.response = checkAndShrinkBuffer(totalResponse);\n        if (self.responseType === 'blob' && typeof Blob === 'function') {\n          // Construct the Blob object that contains response.\n          self.response = new Blob([self.response]);\n        }\n        break;\n    }\n  }\n\n  /**\n   * Construct the correct form of response, given responseType when in synchronous mode or file based.\n   *\n   * The input is the response parameter which is a Buffer.\n   * When self.responseType is \"\", \"text\", \"json\",\n   *   the input is further refined to be: response.toString('utf8').\n   * When self.responseType is \"arraybuffer\", \"blob\",\n   *   the input is further refined to be: checkAndShrinkBuffer(response).\n   *\n   * @param {Buffer} response\n   */\n  this.createFileOrSyncResponse = function(response) {\n    self.responseText = '';\n    self.responseXML = '';\n    switch (self.responseType) {\n      case \"\":\n      case \"text\":\n        self.responseText = response.toString('utf8');\n        self.response = self.responseText;\n        break;\n      case 'json':\n        self.response = JSON.parse(response.toString('utf8'));\n        break;\n      default:\n        // When self.responseType === 'arraybuffer', self.response is an ArrayBuffer.\n        // Get the correct sized ArrayBuffer.\n        self.response = checkAndShrinkBuffer(response);\n        if (self.responseType === 'blob' && typeof Blob === 'function') {\n          // Construct the Blob object that contains response.\n          self.response = new Blob([self.response]);\n        }\n        break;\n    }\n  }\n\n  /**\n   * Changes readyState and calls onreadystatechange.\n   *\n   * @param int state New state\n   */\n  var setState = function(state) {\n    if ((self.readyState === state) || (self.readyState === self.UNSENT && abortedFlag))\n      return\n\n    self.readyState = state;\n\n    if (settings.async || self.readyState < self.OPENED || self.readyState === self.DONE) {\n      self.dispatchEvent(\"readystatechange\");\n    }\n\n    if (self.readyState === self.DONE) {\n      let fire\n\n      if (abortedFlag)\n        fire = \"abort\"\n      else if (errorFlag)\n        fire = \"error\"\n      else\n        fire = \"load\"\n\n      self.dispatchEvent(fire)\n\n      // @TODO figure out InspectorInstrumentation::didLoadXHR(cookie)\n      self.dispatchEvent(\"loadend\");\n    }\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/xmlhttprequest-ssl@3.1.0/node_modules/xmlhttprequest-ssl/lib/XMLHttpRequest.js\n");

/***/ })

};
;