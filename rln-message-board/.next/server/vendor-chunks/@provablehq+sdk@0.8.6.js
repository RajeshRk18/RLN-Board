"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@provablehq+sdk@0.8.6";
exports.ids = ["vendor-chunks/@provablehq+sdk@0.8.6"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/browser.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/browser.js ***!
  \*******************************************************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* binding */ Account),\n/* harmony export */   Address: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.Address),\n/* harmony export */   AleoKeyProvider: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.A),\n/* harmony export */   AleoKeyProviderParams: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.a),\n/* harmony export */   AleoNetworkClient: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.b),\n/* harmony export */   BHP1024: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.BHP1024),\n/* harmony export */   BHP256: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.BHP256),\n/* harmony export */   BHP512: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.BHP512),\n/* harmony export */   BHP768: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.BHP768),\n/* harmony export */   BlockHeightSearch: () => (/* binding */ BlockHeightSearch),\n/* harmony export */   CREDITS_PROGRAM_KEYS: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C),\n/* harmony export */   Ciphertext: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.Ciphertext),\n/* harmony export */   ComputeKey: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.ComputeKey),\n/* harmony export */   ExecutionResponse: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.ExecutionResponse),\n/* harmony export */   Field: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.Field),\n/* harmony export */   FunctionExecution: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.Execution),\n/* harmony export */   Group: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.Group),\n/* harmony export */   KEY_STORE: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.K),\n/* harmony export */   NetworkRecordProvider: () => (/* binding */ NetworkRecordProvider),\n/* harmony export */   OfflineKeyProvider: () => (/* binding */ OfflineKeyProvider),\n/* harmony export */   OfflineQuery: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.OfflineQuery),\n/* harmony export */   OfflineSearchParams: () => (/* binding */ OfflineSearchParams),\n/* harmony export */   PRIVATE_TO_PUBLIC_TRANSFER: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.d),\n/* harmony export */   PRIVATE_TRANSFER: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.c),\n/* harmony export */   PRIVATE_TRANSFER_TYPES: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.e),\n/* harmony export */   PUBLIC_TO_PRIVATE_TRANSFER: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.h),\n/* harmony export */   PUBLIC_TRANSFER: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.f),\n/* harmony export */   PUBLIC_TRANSFER_AS_SIGNER: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.g),\n/* harmony export */   Pedersen128: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.Pedersen128),\n/* harmony export */   Pedersen64: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.Pedersen64),\n/* harmony export */   Plaintext: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.Plaintext),\n/* harmony export */   Poseidon2: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.Poseidon2),\n/* harmony export */   Poseidon4: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.Poseidon4),\n/* harmony export */   Poseidon8: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.Poseidon8),\n/* harmony export */   PrivateKey: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.PrivateKey),\n/* harmony export */   PrivateKeyCiphertext: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.PrivateKeyCiphertext),\n/* harmony export */   Program: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.Program),\n/* harmony export */   ProgramManager: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.P),\n/* harmony export */   ProgramManagerBase: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.ProgramManager),\n/* harmony export */   ProvingKey: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.ProvingKey),\n/* harmony export */   RecordCiphertext: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.RecordCiphertext),\n/* harmony export */   RecordPlaintext: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.RecordPlaintext),\n/* harmony export */   Scalar: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.Scalar),\n/* harmony export */   Signature: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.Signature),\n/* harmony export */   Transaction: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.Transaction),\n/* harmony export */   Transition: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.Transition),\n/* harmony export */   VALID_TRANSFER_TYPES: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.V),\n/* harmony export */   VerifyingKey: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.VerifyingKey),\n/* harmony export */   ViewKey: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.ViewKey),\n/* harmony export */   createAleoWorker: () => (/* binding */ createAleoWorker),\n/* harmony export */   initThreadPool: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.initThreadPool),\n/* harmony export */   initializeWasm: () => (/* binding */ initializeWasm),\n/* harmony export */   logAndThrow: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.l),\n/* harmony export */   verifyFunctionExecution: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.verifyFunctionExecution)\n/* harmony export */ });\n/* harmony import */ var core_js_proposals_json_parse_with_source_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/proposals/json-parse-with-source.js */ \"(ssr)/./node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/proposals/json-parse-with-source.js\");\n/* harmony import */ var _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @provablehq/wasm/testnet.js */ \"(ssr)/./node_modules/.pnpm/@provablehq+wasm@0.8.6/node_modules/@provablehq/wasm/dist/testnet/index.js\");\n/* harmony import */ var _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./program-manager-CjvnOyfn.js */ \"(ssr)/./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/program-manager-CjvnOyfn.js\");\n/* harmony import */ var comlink__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! comlink */ \"(ssr)/./node_modules/.pnpm/comlink@4.4.2/node_modules/comlink/dist/esm/comlink.mjs\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__, _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__]);\n([_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__, _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n/**\n * Key Management class. Enables the creation of a new Aleo Account, importation of an existing account from\n * an existing private key or seed, and message signing and verification functionality.\n *\n * An Aleo Account is generated from a randomly generated seed (number) from which an account private key, view key,\n * and a public account address are derived. The private key lies at the root of an Aleo account. It is a highly\n * sensitive secret and should be protected as it allows for creation of Aleo Program executions and arbitrary value\n * transfers. The View Key allows for decryption of a user's activity on the blockchain. The Address is the public\n * address to which other users of Aleo can send Aleo credits and other records to. This class should only be used\n * environments where the safety of the underlying key material can be assured.\n *\n * @example\n * // Create a new account\n * const myRandomAccount = new Account();\n *\n * // Create an account from a randomly generated seed\n * const seed = new Uint8Array([94, 91, 52, 251, 240, 230, 226, 35, 117, 253, 224, 210, 175, 13, 205, 120, 155, 214, 7, 169, 66, 62, 206, 50, 188, 40, 29, 122, 40, 250, 54, 18]);\n * const mySeededAccount = new Account({seed: seed});\n *\n * // Create an account from an existing private key\n * const myExistingAccount = new Account({privateKey: 'myExistingPrivateKey'})\n *\n * // Sign a message\n * const hello_world = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n * const signature = myRandomAccount.sign(hello_world)\n *\n * // Verify a signature\n * myRandomAccount.verify(hello_world, signature)\n */\nclass Account {\n    _privateKey;\n    _viewKey;\n    _computeKey;\n    _address;\n    constructor(params = {}) {\n        try {\n            this._privateKey = this.privateKeyFromParams(params);\n        }\n        catch (e) {\n            console.error(\"Wrong parameter\", e);\n            throw new Error(\"Wrong Parameter\");\n        }\n        this._viewKey = _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.ViewKey.from_private_key(this._privateKey);\n        this._computeKey = _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.ComputeKey.from_private_key(this._privateKey);\n        this._address = _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.Address.from_private_key(this._privateKey);\n    }\n    /**\n     * Attempts to create an account from a private key ciphertext\n     * @param {PrivateKeyCiphertext | string} ciphertext\n     * @param {string} password\n     * @returns {PrivateKey}\n     *\n     * @example\n     * const ciphertext = PrivateKey.newEncrypted(\"password\");\n     * const account = Account.fromCiphertext(ciphertext, \"password\");\n     */\n    static fromCiphertext(ciphertext, password) {\n        try {\n            ciphertext = (typeof ciphertext === \"string\") ? _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.PrivateKeyCiphertext.fromString(ciphertext) : ciphertext;\n            const _privateKey = _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.PrivateKey.fromPrivateKeyCiphertext(ciphertext, password);\n            return new Account({ privateKey: _privateKey.to_string() });\n        }\n        catch (e) {\n            throw new Error(\"Wrong password or invalid ciphertext\");\n        }\n    }\n    privateKeyFromParams(params) {\n        if (params.seed) {\n            return _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.PrivateKey.from_seed_unchecked(params.seed);\n        }\n        if (params.privateKey) {\n            return _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.PrivateKey.from_string(params.privateKey);\n        }\n        return new _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.PrivateKey();\n    }\n    privateKey() {\n        return this._privateKey;\n    }\n    viewKey() {\n        return this._viewKey;\n    }\n    computeKey() {\n        return this._computeKey;\n    }\n    address() {\n        return this._address;\n    }\n    clone() {\n        return new Account({ privateKey: this._privateKey.to_string() });\n    }\n    toString() {\n        return this.address().to_string();\n    }\n    /**\n     * Encrypt the account's private key with a password\n     * @param {string} ciphertext\n     * @returns {PrivateKeyCiphertext}\n     *\n     * @example\n     * const account = new Account();\n     * const ciphertext = account.encryptAccount(\"password\");\n     */\n    encryptAccount(password) {\n        return this._privateKey.toCiphertext(password);\n    }\n    /**\n     * Decrypts a Record in ciphertext form into plaintext\n     * @param {string} ciphertext\n     * @returns {Record}\n     *\n     * @example\n     * const account = new Account();\n     * const record = account.decryptRecord(\"record1ciphertext\");\n     */\n    decryptRecord(ciphertext) {\n        return this._viewKey.decrypt(ciphertext);\n    }\n    /**\n     * Decrypts an array of Records in ciphertext form into plaintext\n     * @param {string[]} ciphertexts\n     * @returns {Record[]}\n     *\n     * @example\n     * const account = new Account();\n     * const record = account.decryptRecords([\"record1ciphertext\", \"record2ciphertext\"]);\n     */\n    decryptRecords(ciphertexts) {\n        return ciphertexts.map((ciphertext) => this._viewKey.decrypt(ciphertext));\n    }\n    /**\n     * Determines whether the account owns a ciphertext record\n     * @param {RecordCipherText | string} ciphertext\n     * @returns {boolean}\n     *\n     * @example\n     * // Create a connection to the Aleo network and an account\n     * const connection = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const account = Account.fromCiphertext(\"ciphertext\", \"password\");\n     *\n     * // Get a record from the network\n     * const record = connection.getBlock(1234);\n     * const recordCipherText = record.transactions[0].execution.transitions[0].id;\n     *\n     * // Check if the account owns the record\n     * if account.ownsRecord(recordCipherText) {\n     *     // Then one can do something like:\n     *     // Decrypt the record and check if it's spent\n     *     // Store the record in a local database\n     *     // Etc.\n     * }\n     */\n    ownsRecordCiphertext(ciphertext) {\n        if (typeof ciphertext === 'string') {\n            try {\n                const ciphertextObject = _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.RecordCiphertext.fromString(ciphertext);\n                return ciphertextObject.isOwner(this._viewKey);\n            }\n            catch (e) {\n                return false;\n            }\n        }\n        else {\n            return ciphertext.isOwner(this._viewKey);\n        }\n    }\n    /**\n     * Signs a message with the account's private key.\n     * Returns a Signature.\n     *\n     * @param {Uint8Array} message\n     * @returns {Signature}\n     *\n     * @example\n     * const account = new Account();\n     * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n     * account.sign(message);\n     */\n    sign(message) {\n        return this._privateKey.sign(message);\n    }\n    /**\n     * Verifies the Signature on a message.\n     *\n     * @param {Uint8Array} message\n     * @param {Signature} signature\n     * @returns {boolean}\n     *\n     * @example\n     * const account = new Account();\n     * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n     * const signature = account.sign(message);\n     * account.verify(message, signature);\n     */\n    verify(message, signature) {\n        return this._address.verify(message, signature);\n    }\n}\n\n/**\n * Search parameters for the offline key provider. This class implements the KeySearchParams interface and includes\n * a convenience method for creating a new instance of this class for each function of the credits.aleo program.\n *\n * @example\n * // If storing a key for a custom program function\n * offlineSearchParams = new OfflineSearchParams(\"myprogram.aleo/myfunction\");\n *\n * // If storing a key for a credits.aleo program function\n * bondPublicKeyParams = OfflineSearchParams.bondPublicKeyParams();\n */\nclass OfflineSearchParams {\n    cacheKey;\n    verifyCreditsKeys;\n    /**\n     * Create a new OfflineSearchParams instance.\n     *\n     * @param {string} cacheKey - Key used to store the local function proving & verifying keys. This should be stored\n     * under the naming convention \"programName/functionName\" (i.e. \"myprogram.aleo/myfunction\")\n     * @param {boolean} verifyCreditsKeys - Whether to verify the keys against the credits.aleo program,\n     * defaults to false, but should be set to true if using keys from the credits.aleo program\n     */\n    constructor(cacheKey, verifyCreditsKeys = false) {\n        this.cacheKey = cacheKey;\n        this.verifyCreditsKeys = verifyCreditsKeys;\n    }\n    /**\n     * Create a new OfflineSearchParams instance for the bond_public function of the credits.aleo program.\n     */\n    static bondPublicKeyParams() {\n        return new OfflineSearchParams(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.bond_public.locator, true);\n    }\n    /**\n     * Create a new OfflineSearchParams instance for the bond_validator function of the credits.aleo program.\n     */\n    static bondValidatorKeyParams() {\n        return new OfflineSearchParams(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.bond_validator.locator, true);\n    }\n    /**\n     * Create a new OfflineSearchParams instance for the claim_unbond_public function of the\n     */\n    static claimUnbondPublicKeyParams() {\n        return new OfflineSearchParams(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.claim_unbond_public.locator, true);\n    }\n    /**\n     * Create a new OfflineSearchParams instance for the fee_private function of the credits.aleo program.\n     */\n    static feePrivateKeyParams() {\n        return new OfflineSearchParams(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.fee_private.locator, true);\n    }\n    /**\n     * Create a new OfflineSearchParams instance for the fee_public function of the credits.aleo program.\n     */\n    static feePublicKeyParams() {\n        return new OfflineSearchParams(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.fee_public.locator, true);\n    }\n    /**\n     * Create a new OfflineSearchParams instance for the inclusion prover function.\n     */\n    static inclusionKeyParams() {\n        return new OfflineSearchParams(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.inclusion.locator, true);\n    }\n    /**\n     * Create a new OfflineSearchParams instance for the join function of the credits.aleo program.\n     */\n    static joinKeyParams() {\n        return new OfflineSearchParams(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.join.locator, true);\n    }\n    /**\n     * Create a new OfflineSearchParams instance for the set_validator_state function of the credits.aleo program.\n     */\n    static setValidatorStateKeyParams() {\n        return new OfflineSearchParams(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.set_validator_state.locator, true);\n    }\n    /**\n     * Create a new OfflineSearchParams instance for the split function of the credits.aleo program.\n     */\n    static splitKeyParams() {\n        return new OfflineSearchParams(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.split.locator, true);\n    }\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_private function of the credits.aleo program.\n     */\n    static transferPrivateKeyParams() {\n        return new OfflineSearchParams(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.transfer_private.locator, true);\n    }\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_private_to_public function of the credits.aleo program.\n     */\n    static transferPrivateToPublicKeyParams() {\n        return new OfflineSearchParams(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.transfer_private_to_public.locator, true);\n    }\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_public function of the credits.aleo program.\n     */\n    static transferPublicKeyParams() {\n        return new OfflineSearchParams(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.transfer_public.locator, true);\n    }\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_public_as_signer function of the credits.aleo program.\n     */\n    static transferPublicAsSignerKeyParams() {\n        return new OfflineSearchParams(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.transfer_public_as_signer.locator, true);\n    }\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_public_to_private function of the credits.aleo program.\n     */\n    static transferPublicToPrivateKeyParams() {\n        return new OfflineSearchParams(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.transfer_public_to_private.locator, true);\n    }\n    /**\n     * Create a new OfflineSearchParams instance for the unbond_public function of the credits.aleo program.\n     */\n    static unbondPublicKeyParams() {\n        return new OfflineSearchParams(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.unbond_public.locator, true);\n    }\n}\n/**\n * A key provider meant for building transactions offline on devices such as hardware wallets. This key provider is not\n * able to contact the internet for key material and instead relies on the user to insert Aleo function proving &\n * verifying keys from local storage prior to usage.\n *\n * @example\n * // Create an offline program manager\n * const programManager = new ProgramManager();\n *\n * // Create a temporary account for the execution of the program\n * const account = new Account();\n * programManager.setAccount(account);\n *\n * // Create the proving keys from the key bytes on the offline machine\n * console.log(\"Creating proving keys from local key files\");\n * const program = \"program hello_hello.aleo; function hello: input r0 as u32.public; input r1 as u32.private; add r0 r1 into r2; output r2 as u32.private;\";\n * const myFunctionProver = await getLocalKey(\"/path/to/my/function/hello_hello.prover\");\n * const myFunctionVerifier = await getLocalKey(\"/path/to/my/function/hello_hello.verifier\");\n * const feePublicProvingKeyBytes = await getLocalKey(\"/path/to/credits.aleo/feePublic.prover\");\n *\n * myFunctionProvingKey = ProvingKey.fromBytes(myFunctionProver);\n * myFunctionVerifyingKey = VerifyingKey.fromBytes(myFunctionVerifier);\n * const feePublicProvingKey = ProvingKey.fromBytes(feePublicKeyBytes);\n *\n * // Create an offline key provider\n * console.log(\"Creating offline key provider\");\n * const offlineKeyProvider = new OfflineKeyProvider();\n *\n * // Cache the keys\n * // Cache the proving and verifying keys for the custom hello function\n * OfflineKeyProvider.cacheKeys(\"hello_hello.aleo/hello\", myFunctionProvingKey, myFunctionVerifyingKey);\n *\n * // Cache the proving key for the fee_public function (the verifying key is automatically cached)\n * OfflineKeyProvider.insertFeePublicKey(feePublicProvingKey);\n *\n * // Create an offline query using the latest state root in order to create the inclusion proof\n * const offlineQuery = new OfflineQuery(\"latestStateRoot\");\n *\n * // Insert the key provider into the program manager\n * programManager.setKeyProvider(offlineKeyProvider);\n *\n * // Create the offline search params\n * const offlineSearchParams = new OfflineSearchParams(\"hello_hello.aleo/hello\");\n *\n * // Create the offline transaction\n * const offlineExecuteTx = <Transaction>await this.buildExecutionTransaction(\"hello_hello.aleo\", \"hello\", 1, false, [\"5u32\", \"5u32\"], undefined, offlineSearchParams, undefined, undefined, undefined, undefined, offlineQuery, program);\n *\n * // Broadcast the transaction later on a machine with internet access\n * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n * const txId = await networkClient.broadcastTransaction(offlineExecuteTx);\n */\nclass OfflineKeyProvider {\n    cache;\n    constructor() {\n        this.cache = new Map();\n    }\n    /**\n     * Get bond_public function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_public function\n     */\n    bondPublicKeys() {\n        return this.functionKeys(OfflineSearchParams.bondPublicKeyParams());\n    }\n    ;\n    /**\n     * Get bond_validator function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_public function\n     */\n    bondValidatorKeys() {\n        return this.functionKeys(OfflineSearchParams.bondValidatorKeyParams());\n    }\n    ;\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId, keys) {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    }\n    ;\n    /**\n     * Get unbond_public function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the unbond_public function\n     */\n    claimUnbondPublicKeys() {\n        return this.functionKeys(OfflineSearchParams.claimUnbondPublicKeyParams());\n    }\n    ;\n    /**\n     * Get arbitrary function key from the offline key provider cache.\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * /// First cache the keys from local offline resources\n     * const offlineKeyProvider = new OfflineKeyProvider();\n     * const myFunctionVerifyingKey = VerifyingKey.fromString(\"verifier...\");\n     * const myFunctionProvingKeyBytes = await readBinaryFile('./resources/myfunction.prover');\n     * const myFunctionProvingKey = ProvingKey.fromBytes(myFunctionProvingKeyBytes);\n     *\n     * /// Cache the keys for future use with a memorable locator\n     * offlineKeyProvider.cacheKeys(\"myprogram.aleo/myfunction\", [myFunctionProvingKey, myFunctionVerifyingKey]);\n     *\n     * /// When they're needed, retrieve the keys from the cache\n     *\n     * /// First create a search parameter object with the same locator used to cache the keys\n     * const keyParams = new OfflineSearchParams(\"myprogram.aleo/myfunction\");\n     *\n     * /// Then retrieve the keys\n     * const [myFunctionProver, myFunctionVerifier] = await offlineKeyProvider.functionKeys(keyParams);\n     */\n    functionKeys(params) {\n        return new Promise((resolve, reject) => {\n            if (params === undefined) {\n                reject(new Error(\"No search parameters provided, cannot retrieve keys\"));\n            }\n            else {\n                const keyId = params.cacheKey;\n                const verifyCreditsKeys = params.verifyCreditsKeys;\n                if (this.cache.has(keyId)) {\n                    const [provingKeyBytes, verifyingKeyBytes] = this.cache.get(keyId);\n                    const provingKey = _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.ProvingKey.fromBytes(provingKeyBytes);\n                    const verifyingKey = _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.VerifyingKey.fromBytes(verifyingKeyBytes);\n                    if (verifyCreditsKeys) {\n                        const keysMatchExpected = this.verifyCreditsKeys(keyId, provingKey, verifyingKey);\n                        if (!keysMatchExpected) {\n                            reject(new Error(`Cached keys do not match expected keys for ${keyId}`));\n                        }\n                    }\n                    resolve([provingKey, verifyingKey]);\n                }\n                else {\n                    reject(new Error(\"Keys not found in cache for \" + keyId));\n                }\n            }\n        });\n    }\n    ;\n    /**\n     * Determines if the keys for a given credits function match the expected keys.\n     *\n     * @returns {boolean} Whether the keys match the expected keys\n     */\n    verifyCreditsKeys(locator, provingKey, verifyingKey) {\n        switch (locator) {\n            case _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.bond_public.locator:\n                return provingKey.isBondPublicProver() && verifyingKey.isBondPublicVerifier();\n            case _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.claim_unbond_public.locator:\n                return provingKey.isClaimUnbondPublicProver() && verifyingKey.isClaimUnbondPublicVerifier();\n            case _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.fee_private.locator:\n                return provingKey.isFeePrivateProver() && verifyingKey.isFeePrivateVerifier();\n            case _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.fee_public.locator:\n                return provingKey.isFeePublicProver() && verifyingKey.isFeePublicVerifier();\n            case _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.inclusion.locator:\n                return provingKey.isInclusionProver() && verifyingKey.isInclusionVerifier();\n            case _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.join.locator:\n                return provingKey.isJoinProver() && verifyingKey.isJoinVerifier();\n            case _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.set_validator_state.locator:\n                return provingKey.isSetValidatorStateProver() && verifyingKey.isSetValidatorStateVerifier();\n            case _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.split.locator:\n                return provingKey.isSplitProver() && verifyingKey.isSplitVerifier();\n            case _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.transfer_private.locator:\n                return provingKey.isTransferPrivateProver() && verifyingKey.isTransferPrivateVerifier();\n            case _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.transfer_private_to_public.locator:\n                return provingKey.isTransferPrivateToPublicProver() && verifyingKey.isTransferPrivateToPublicVerifier();\n            case _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.transfer_public.locator:\n                return provingKey.isTransferPublicProver() && verifyingKey.isTransferPublicVerifier();\n            case _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.transfer_public_to_private.locator:\n                return provingKey.isTransferPublicToPrivateProver() && verifyingKey.isTransferPublicToPrivateVerifier();\n            case _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.unbond_public.locator:\n                return provingKey.isUnbondPublicProver() && verifyingKey.isUnbondPublicVerifier();\n            default:\n                return false;\n        }\n    }\n    /**\n     * Get fee_private function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys() {\n        return this.functionKeys(OfflineSearchParams.feePrivateKeyParams());\n    }\n    ;\n    /**\n     * Get fee_public function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePublicKeys() {\n        return this.functionKeys(OfflineSearchParams.feePublicKeyParams());\n    }\n    ;\n    /**\n     * Get join function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    joinKeys() {\n        return this.functionKeys(OfflineSearchParams.joinKeyParams());\n    }\n    ;\n    /**\n     * Get split function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    splitKeys() {\n        return this.functionKeys(OfflineSearchParams.splitKeyParams());\n    }\n    ;\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program.\n     *\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new OfflineKeyProvider\n     * const offlineKeyProvider = new OfflineKeyProvider();\n     *\n     * // Cache the keys for future use with the official locator\n     * const transferPublicProvingKeyBytes = await readBinaryFile('./resources/transfer_public.prover.a74565e');\n     * const transferPublicProvingKey = ProvingKey.fromBytes(transferPublicProvingKeyBytes);\n     *\n     * // Cache the transfer_public keys for future use with the OfflinKeyProvider's convenience method for\n     * // transfer_public (the verifying key will be cached automatically)\n     * offlineKeyProvider.insertTransferPublicKeys(transferPublicProvingKey);\n     *\n     * /// When they're needed, retrieve the keys from the cache\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility) {\n        if (_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.c.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPrivateKeyParams());\n        }\n        else if (_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.d.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPrivateToPublicKeyParams());\n        }\n        else if (_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.f.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPublicKeyParams());\n        }\n        else if (_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.g.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPublicAsSignerKeyParams());\n        }\n        else if (_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.h.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPublicToPrivateKeyParams());\n        }\n        else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    }\n    ;\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    async unBondPublicKeys() {\n        return this.functionKeys(OfflineSearchParams.unbondPublicKeyParams());\n    }\n    ;\n    /**\n     * Insert the proving and verifying keys for the bond_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for bond_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertBondPublicKeys(provingKey) {\n        if (provingKey.isBondPublicProver()) {\n            this.cache.set(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.bond_public.locator, [provingKey.toBytes(), _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.VerifyingKey.bondPublicVerifier().toBytes()]);\n        }\n        else {\n            throw new Error(\"Attempted to insert invalid proving keys for bond_public\");\n        }\n    }\n    /**\n     * Insert the proving and verifying keys for the claim_unbond_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for claim_unbond_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertClaimUnbondPublicKeys(provingKey) {\n        if (provingKey.isClaimUnbondPublicProver()) {\n            this.cache.set(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.claim_unbond_public.locator, [provingKey.toBytes(), _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.VerifyingKey.claimUnbondPublicVerifier().toBytes()]);\n        }\n        else {\n            throw new Error(\"Attempted to insert invalid proving keys for claim_unbond_public\");\n        }\n    }\n    /**\n     * Insert the proving and verifying keys for the fee_private function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for fee_private before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertFeePrivateKeys(provingKey) {\n        if (provingKey.isFeePrivateProver()) {\n            this.cache.set(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.fee_private.locator, [provingKey.toBytes(), _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.VerifyingKey.feePrivateVerifier().toBytes()]);\n        }\n        else {\n            throw new Error(\"Attempted to insert invalid proving keys for fee_private\");\n        }\n    }\n    /**\n     * Insert the proving and verifying keys for the fee_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for fee_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertFeePublicKeys(provingKey) {\n        if (provingKey.isFeePublicProver()) {\n            this.cache.set(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.fee_public.locator, [provingKey.toBytes(), _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.VerifyingKey.feePublicVerifier().toBytes()]);\n        }\n        else {\n            throw new Error(\"Attempted to insert invalid proving keys for fee_public\");\n        }\n    }\n    /**\n     * Insert the proving and verifying keys for the join function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for join before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertJoinKeys(provingKey) {\n        if (provingKey.isJoinProver()) {\n            this.cache.set(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.join.locator, [provingKey.toBytes(), _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.VerifyingKey.joinVerifier().toBytes()]);\n        }\n        else {\n            throw new Error(\"Attempted to insert invalid proving keys for join\");\n        }\n    }\n    /**\n     * Insert the proving and verifying keys for the set_validator_state function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for set_validator_state before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertSetValidatorStateKeys(provingKey) {\n        if (provingKey.isSetValidatorStateProver()) {\n            this.cache.set(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.set_validator_state.locator, [provingKey.toBytes(), _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.VerifyingKey.setValidatorStateVerifier().toBytes()]);\n        }\n        else {\n            throw new Error(\"Attempted to insert invalid proving keys for set_validator_state\");\n        }\n    }\n    /**\n     * Insert the proving and verifying keys for the split function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for split before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertSplitKeys(provingKey) {\n        if (provingKey.isSplitProver()) {\n            this.cache.set(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.split.locator, [provingKey.toBytes(), _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.VerifyingKey.splitVerifier().toBytes()]);\n        }\n        else {\n            throw new Error(\"Attempted to insert invalid proving keys for split\");\n        }\n    }\n    /**\n     * Insert the proving and verifying keys for the transfer_private function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_private before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPrivateKeys(provingKey) {\n        if (provingKey.isTransferPrivateProver()) {\n            this.cache.set(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.transfer_private.locator, [provingKey.toBytes(), _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.VerifyingKey.transferPrivateVerifier().toBytes()]);\n        }\n        else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_private\");\n        }\n    }\n    /**\n     * Insert the proving and verifying keys for the transfer_private_to_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_private_to_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPrivateToPublicKeys(provingKey) {\n        if (provingKey.isTransferPrivateToPublicProver()) {\n            this.cache.set(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.transfer_private_to_public.locator, [provingKey.toBytes(), _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.VerifyingKey.transferPrivateToPublicVerifier().toBytes()]);\n        }\n        else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_private_to_public\");\n        }\n    }\n    /**\n     * Insert the proving and verifying keys for the transfer_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPublicKeys(provingKey) {\n        if (provingKey.isTransferPublicProver()) {\n            this.cache.set(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.transfer_public.locator, [provingKey.toBytes(), _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.VerifyingKey.transferPublicVerifier().toBytes()]);\n        }\n        else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_public\");\n        }\n    }\n    /**\n     * Insert the proving and verifying keys for the transfer_public_to_private function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_public_to_private before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPublicToPrivateKeys(provingKey) {\n        if (provingKey.isTransferPublicToPrivateProver()) {\n            this.cache.set(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.transfer_public_to_private.locator, [provingKey.toBytes(), _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.VerifyingKey.transferPublicToPrivateVerifier().toBytes()]);\n        }\n        else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_public_to_private\");\n        }\n    }\n    insertUnbondPublicKeys(provingKey) {\n        if (provingKey.isUnbondPublicProver()) {\n            this.cache.set(_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C.unbond_public.locator, [provingKey.toBytes(), _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.VerifyingKey.unbondPublicVerifier().toBytes()]);\n        }\n        else {\n            throw new Error(\"Attempted to insert invalid proving keys for unbond_public\");\n        }\n    }\n}\n\n/**\n * A record provider implementation that uses the official Aleo API to find records for usage in program execution and\n * deployment, wallet functionality, and other use cases.\n */\nclass NetworkRecordProvider {\n    account;\n    networkClient;\n    constructor(account, networkClient) {\n        this.account = account;\n        this.networkClient = networkClient;\n    }\n    /**\n     * Set the account used to search for records\n     *\n     * @param {Account} account The account to use for searching for records\n     */\n    setAccount(account) {\n        this.account = account;\n    }\n    /**\n     * Find a list of credit records with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number[]} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * */\n    async findCreditsRecords(microcredits, unspent, nonces, searchParameters) {\n        let startHeight = 0;\n        let endHeight = 0;\n        let maxAmount = undefined;\n        if (searchParameters) {\n            if (\"startHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                startHeight = searchParameters[\"startHeight\"];\n            }\n            if (\"endHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                endHeight = searchParameters[\"endHeight\"];\n            }\n            if (\"amounts\" in searchParameters && Array.isArray(searchParameters[\"amounts\"]) && searchParameters[\"amount\"].every((item) => typeof item === 'number')) {\n                microcredits = searchParameters[\"amounts\"];\n            }\n            if (\"maxAmount\" in searchParameters && typeof searchParameters[\"maxAmount\"] == \"number\") {\n                maxAmount = searchParameters[\"maxAmount\"];\n            }\n            if (\"unspent\" in searchParameters && typeof searchParameters[\"unspent\"] == \"boolean\") {\n                unspent = searchParameters[\"unspent\"];\n            }\n        }\n        // If the end height is not specified, use the current block height\n        if (endHeight == 0) {\n            const end = await this.networkClient.getLatestHeight();\n            endHeight = end;\n        }\n        // If the start height is greater than the end height, throw an error\n        if (startHeight >= endHeight) {\n            (0,_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.l)(\"Start height must be less than end height\");\n        }\n        return await this.networkClient.findRecords(startHeight, endHeight, unspent, [\"credits.aleo\"], microcredits, maxAmount, nonces, this.account.privateKey());\n    }\n    /**\n     * Find a credit record with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    async findCreditsRecord(microcredits, unspent, nonces, searchParameters) {\n        let records = null;\n        try {\n            records = await this.findCreditsRecords([microcredits], unspent, nonces, searchParameters);\n        }\n        catch (e) {\n            console.log(\"No records found with error:\", e);\n        }\n        if (records && records.length > 0) {\n            return records[0];\n        }\n        console.error(\"Record not found with error:\", records);\n        throw new Error(\"Record not found\");\n    }\n    /**\n     * Find an arbitrary record. WARNING: This function is not implemented yet and will throw an error.\n     */\n    async findRecord(unspent, nonces, searchParameters) {\n        throw new Error(\"Not implemented\");\n    }\n    /**\n     * Find multiple records from a specified program.\n     */\n    async findRecords(unspent, nonces, searchParameters) {\n        let startHeight = 0;\n        let endHeight = 0;\n        let amounts = undefined;\n        let maxAmount = undefined;\n        let programs = undefined;\n        if (searchParameters) {\n            if (\"startHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                startHeight = searchParameters[\"startHeight\"];\n            }\n            if (\"endHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                endHeight = searchParameters[\"endHeight\"];\n            }\n            if (\"amounts\" in searchParameters && Array.isArray(searchParameters[\"amounts\"]) && searchParameters[\"amounts\"].every((item) => typeof item === 'number')) {\n                amounts = searchParameters[\"amounts\"];\n            }\n            if (\"maxAmount\" in searchParameters && typeof searchParameters[\"maxAmount\"] == \"number\") {\n                maxAmount = searchParameters[\"maxAmount\"];\n            }\n            if (\"nonces\" in searchParameters && Array.isArray(searchParameters[\"nonces\"]) && searchParameters[\"nonces\"].every((item) => typeof item === \"string\")) {\n                nonces = searchParameters[\"nonces\"];\n            }\n            if (\"program\" in searchParameters && typeof searchParameters[\"program\"] == \"string\") {\n                programs = [searchParameters[\"program\"]];\n            }\n            if (\"programs\" in searchParameters && Array.isArray(searchParameters[\"programs\"]) && searchParameters[\"programs\"].every((item) => typeof item === \"string\")) {\n                programs = searchParameters[\"programs\"];\n            }\n            if (\"unspent\" in searchParameters && typeof searchParameters[\"unspent\"] == \"boolean\") {\n                unspent = searchParameters[\"unspent\"];\n            }\n        }\n        // If the end height is not specified, use the current block height\n        if (endHeight == 0) {\n            const end = await this.networkClient.getLatestHeight();\n            endHeight = end;\n        }\n        // If the start height is greater than the end height, throw an error\n        if (startHeight >= endHeight) {\n            (0,_program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.l)(\"Start height must be less than end height\");\n        }\n        return await this.networkClient.findRecords(startHeight, endHeight, unspent, programs, amounts, maxAmount, nonces, this.account.privateKey());\n    }\n}\n/**\n * BlockHeightSearch is a RecordSearchParams implementation that allows for searching for records within a given\n * block height range.\n *\n * @example\n * // Create a new BlockHeightSearch\n * const params = new BlockHeightSearch(89995, 99995);\n *\n * // Create a new NetworkRecordProvider\n * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n * const keyProvider = new AleoKeyProvider();\n * const recordProvider = new NetworkRecordProvider(account, networkClient);\n *\n * // The record provider can be used to find records with a given number of microcredits and the block height search\n * // can be used to find records within a given block height range\n * const record = await recordProvider.findCreditsRecord(5000, true, [], params);\n *\n */\nclass BlockHeightSearch {\n    startHeight;\n    endHeight;\n    constructor(startHeight, endHeight) {\n        this.startHeight = startHeight;\n        this.endHeight = endHeight;\n    }\n}\n\n// Experimental example where SDK manages worker\nlet singletonWorker = null;\nconst createAleoWorker = () => {\n    if (!singletonWorker) {\n        const worker = new Worker(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(0), __webpack_require__.b), {\n            type: undefined,\n        });\n        singletonWorker = (0,comlink__WEBPACK_IMPORTED_MODULE_3__.wrap)(worker);\n    }\n    return singletonWorker;\n};\n\n// @TODO: This function is no longer needed, remove it.\nasync function initializeWasm() {\n    console.warn(\"initializeWasm is deprecated, you no longer need to use it\");\n}\n\n\n//# sourceMappingURL=browser.js.map\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHByb3ZhYmxlaHErc2RrQDAuOC42L25vZGVfbW9kdWxlcy9AcHJvdmFibGVocS9zZGsvZGlzdC90ZXN0bmV0L2Jyb3dzZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFxRDtBQUNvRztBQUNzVjtBQUNwUTtBQUNyQjtBQUN2TDs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxXQUFXO0FBQ25EO0FBQ0E7QUFDQSwwQ0FBMEMsbUNBQW1DO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdFQUFPO0FBQy9CLDJCQUEyQixtRUFBVTtBQUNyQyx3QkFBd0IsZ0VBQU87QUFDL0I7QUFDQTtBQUNBO0FBQ0EsZUFBZSwrQkFBK0I7QUFDOUMsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCw2RUFBb0I7QUFDaEYsZ0NBQWdDLG1FQUFVO0FBQzFDLGlDQUFpQyxxQ0FBcUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsbUVBQVU7QUFDN0I7QUFDQTtBQUNBLG1CQUFtQixtRUFBVTtBQUM3QjtBQUNBLG1CQUFtQixtRUFBVTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDBDQUEwQztBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDJCQUEyQjtBQUMxQyxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLHlFQUFnQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxZQUFZO0FBQzNCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFlBQVk7QUFDM0IsZUFBZSxXQUFXO0FBQzFCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSxlQUFlLFNBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsMkRBQW9CO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsMkRBQW9CO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsMkRBQW9CO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsMkRBQW9CO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsMkRBQW9CO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsMkRBQW9CO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsMkRBQW9CO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsMkRBQW9CO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsMkRBQW9CO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsMkRBQW9CO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsMkRBQW9CO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsMkRBQW9CO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsMkRBQW9CO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsMkRBQW9CO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsMkRBQW9CO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsd0NBQXdDLHlCQUF5QixtQkFBbUIseUJBQXlCO0FBQzNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsMEJBQTBCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwwQkFBMEI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsaUJBQWlCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDBCQUEwQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw2QkFBNkI7QUFDNUMsaUJBQWlCLDBCQUEwQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLG1FQUFVO0FBQ2pELHlDQUF5QyxxRUFBWTtBQUNyRDtBQUNBO0FBQ0E7QUFDQSwyRkFBMkYsTUFBTTtBQUNqRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsMkRBQW9CO0FBQ3JDO0FBQ0EsaUJBQWlCLDJEQUFvQjtBQUNyQztBQUNBLGlCQUFpQiwyREFBb0I7QUFDckM7QUFDQSxpQkFBaUIsMkRBQW9CO0FBQ3JDO0FBQ0EsaUJBQWlCLDJEQUFvQjtBQUNyQztBQUNBLGlCQUFpQiwyREFBb0I7QUFDckM7QUFDQSxpQkFBaUIsMkRBQW9CO0FBQ3JDO0FBQ0EsaUJBQWlCLDJEQUFvQjtBQUNyQztBQUNBLGlCQUFpQiwyREFBb0I7QUFDckM7QUFDQSxpQkFBaUIsMkRBQW9CO0FBQ3JDO0FBQ0EsaUJBQWlCLDJEQUFvQjtBQUNyQztBQUNBLGlCQUFpQiwyREFBb0I7QUFDckM7QUFDQSxpQkFBaUIsMkRBQW9CO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwwQkFBMEI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDBCQUEwQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsMEJBQTBCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwwQkFBMEI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQiwwQkFBMEI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksMkRBQWdCO0FBQzVCO0FBQ0E7QUFDQSxpQkFBaUIsMkRBQTBCO0FBQzNDO0FBQ0E7QUFDQSxpQkFBaUIsMkRBQWU7QUFDaEM7QUFDQTtBQUNBLGlCQUFpQiwyREFBeUI7QUFDMUM7QUFDQTtBQUNBLGlCQUFpQiwyREFBMEI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsMEJBQTBCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsMkRBQW9CLDZDQUE2QyxxRUFBWTtBQUN4RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDJEQUFvQixxREFBcUQscUVBQVk7QUFDaEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiwyREFBb0IsNkNBQTZDLHFFQUFZO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsMkRBQW9CLDRDQUE0QyxxRUFBWTtBQUN2RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDJEQUFvQixzQ0FBc0MscUVBQVk7QUFDakc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiwyREFBb0IscURBQXFELHFFQUFZO0FBQ2hIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsMkRBQW9CLHVDQUF1QyxxRUFBWTtBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDJEQUFvQixrREFBa0QscUVBQVk7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiwyREFBb0IsNERBQTRELHFFQUFZO0FBQ3ZIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsMkRBQW9CLGlEQUFpRCxxRUFBWTtBQUM1RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDJEQUFvQiw0REFBNEQscUVBQVk7QUFDdkg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsMkRBQW9CLCtDQUErQyxxRUFBWTtBQUMxRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixlQUFlLFNBQVM7QUFDeEIsZUFBZSxVQUFVO0FBQ3pCLGVBQWUsb0JBQW9CO0FBQ25DLGlCQUFpQiwwQkFBMEI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwrREFBVztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsVUFBVTtBQUN6QixlQUFlLG9CQUFvQjtBQUNuQyxpQkFBaUIsMEJBQTBCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksK0RBQVc7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLDJGQUE0QjtBQUN0RSxrQkFBa0IsU0FBUTtBQUMxQixTQUFTO0FBQ1QsMEJBQTBCLDZDQUFJO0FBQzlCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFaVM7QUFDalMiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXJuYW1lL2FsZW8vcmF0ZS1saW1pdGluZy1udWxsaWZpZXIvcmxuLW1lc3NhZ2UtYm9hcmQvbm9kZV9tb2R1bGVzLy5wbnBtL0Bwcm92YWJsZWhxK3Nka0AwLjguNi9ub2RlX21vZHVsZXMvQHByb3ZhYmxlaHEvc2RrL2Rpc3QvdGVzdG5ldC9icm93c2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnY29yZS1qcy9wcm9wb3NhbHMvanNvbi1wYXJzZS13aXRoLXNvdXJjZS5qcyc7XG5pbXBvcnQgeyBWaWV3S2V5LCBDb21wdXRlS2V5LCBBZGRyZXNzLCBQcml2YXRlS2V5Q2lwaGVydGV4dCwgUHJpdmF0ZUtleSwgUmVjb3JkQ2lwaGVydGV4dCwgUHJvdmluZ0tleSwgVmVyaWZ5aW5nS2V5IH0gZnJvbSAnQHByb3ZhYmxlaHEvd2FzbS90ZXN0bmV0LmpzJztcbmV4cG9ydCB7IEFkZHJlc3MsIEJIUDEwMjQsIEJIUDI1NiwgQkhQNTEyLCBCSFA3NjgsIENpcGhlcnRleHQsIENvbXB1dGVLZXksIEV4ZWN1dGlvblJlc3BvbnNlLCBGaWVsZCwgRXhlY3V0aW9uIGFzIEZ1bmN0aW9uRXhlY3V0aW9uLCBHcm91cCwgT2ZmbGluZVF1ZXJ5LCBQZWRlcnNlbjEyOCwgUGVkZXJzZW42NCwgUGxhaW50ZXh0LCBQb3NlaWRvbjIsIFBvc2VpZG9uNCwgUG9zZWlkb244LCBQcml2YXRlS2V5LCBQcml2YXRlS2V5Q2lwaGVydGV4dCwgUHJvZ3JhbSwgUHJvZ3JhbU1hbmFnZXIgYXMgUHJvZ3JhbU1hbmFnZXJCYXNlLCBQcm92aW5nS2V5LCBSZWNvcmRDaXBoZXJ0ZXh0LCBSZWNvcmRQbGFpbnRleHQsIFNjYWxhciwgU2lnbmF0dXJlLCBUcmFuc2FjdGlvbiwgVHJhbnNpdGlvbiwgVmVyaWZ5aW5nS2V5LCBWaWV3S2V5LCBpbml0VGhyZWFkUG9vbCwgdmVyaWZ5RnVuY3Rpb25FeGVjdXRpb24gfSBmcm9tICdAcHJvdmFibGVocS93YXNtL3Rlc3RuZXQuanMnO1xuaW1wb3J0IHsgQyBhcyBDUkVESVRTX1BST0dSQU1fS0VZUywgYyBhcyBQUklWQVRFX1RSQU5TRkVSLCBkIGFzIFBSSVZBVEVfVE9fUFVCTElDX1RSQU5TRkVSLCBmIGFzIFBVQkxJQ19UUkFOU0ZFUiwgZyBhcyBQVUJMSUNfVFJBTlNGRVJfQVNfU0lHTkVSLCBoIGFzIFBVQkxJQ19UT19QUklWQVRFX1RSQU5TRkVSLCBsIGFzIGxvZ0FuZFRocm93IH0gZnJvbSAnLi9wcm9ncmFtLW1hbmFnZXItQ2p2bk95Zm4uanMnO1xuZXhwb3J0IHsgQSBhcyBBbGVvS2V5UHJvdmlkZXIsIGEgYXMgQWxlb0tleVByb3ZpZGVyUGFyYW1zLCBiIGFzIEFsZW9OZXR3b3JrQ2xpZW50LCBLIGFzIEtFWV9TVE9SRSwgZSBhcyBQUklWQVRFX1RSQU5TRkVSX1RZUEVTLCBQIGFzIFByb2dyYW1NYW5hZ2VyLCBWIGFzIFZBTElEX1RSQU5TRkVSX1RZUEVTIH0gZnJvbSAnLi9wcm9ncmFtLW1hbmFnZXItQ2p2bk95Zm4uanMnO1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJ2NvbWxpbmsnO1xuXG4vKipcbiAqIEtleSBNYW5hZ2VtZW50IGNsYXNzLiBFbmFibGVzIHRoZSBjcmVhdGlvbiBvZiBhIG5ldyBBbGVvIEFjY291bnQsIGltcG9ydGF0aW9uIG9mIGFuIGV4aXN0aW5nIGFjY291bnQgZnJvbVxuICogYW4gZXhpc3RpbmcgcHJpdmF0ZSBrZXkgb3Igc2VlZCwgYW5kIG1lc3NhZ2Ugc2lnbmluZyBhbmQgdmVyaWZpY2F0aW9uIGZ1bmN0aW9uYWxpdHkuXG4gKlxuICogQW4gQWxlbyBBY2NvdW50IGlzIGdlbmVyYXRlZCBmcm9tIGEgcmFuZG9tbHkgZ2VuZXJhdGVkIHNlZWQgKG51bWJlcikgZnJvbSB3aGljaCBhbiBhY2NvdW50IHByaXZhdGUga2V5LCB2aWV3IGtleSxcbiAqIGFuZCBhIHB1YmxpYyBhY2NvdW50IGFkZHJlc3MgYXJlIGRlcml2ZWQuIFRoZSBwcml2YXRlIGtleSBsaWVzIGF0IHRoZSByb290IG9mIGFuIEFsZW8gYWNjb3VudC4gSXQgaXMgYSBoaWdobHlcbiAqIHNlbnNpdGl2ZSBzZWNyZXQgYW5kIHNob3VsZCBiZSBwcm90ZWN0ZWQgYXMgaXQgYWxsb3dzIGZvciBjcmVhdGlvbiBvZiBBbGVvIFByb2dyYW0gZXhlY3V0aW9ucyBhbmQgYXJiaXRyYXJ5IHZhbHVlXG4gKiB0cmFuc2ZlcnMuIFRoZSBWaWV3IEtleSBhbGxvd3MgZm9yIGRlY3J5cHRpb24gb2YgYSB1c2VyJ3MgYWN0aXZpdHkgb24gdGhlIGJsb2NrY2hhaW4uIFRoZSBBZGRyZXNzIGlzIHRoZSBwdWJsaWNcbiAqIGFkZHJlc3MgdG8gd2hpY2ggb3RoZXIgdXNlcnMgb2YgQWxlbyBjYW4gc2VuZCBBbGVvIGNyZWRpdHMgYW5kIG90aGVyIHJlY29yZHMgdG8uIFRoaXMgY2xhc3Mgc2hvdWxkIG9ubHkgYmUgdXNlZFxuICogZW52aXJvbm1lbnRzIHdoZXJlIHRoZSBzYWZldHkgb2YgdGhlIHVuZGVybHlpbmcga2V5IG1hdGVyaWFsIGNhbiBiZSBhc3N1cmVkLlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDcmVhdGUgYSBuZXcgYWNjb3VudFxuICogY29uc3QgbXlSYW5kb21BY2NvdW50ID0gbmV3IEFjY291bnQoKTtcbiAqXG4gKiAvLyBDcmVhdGUgYW4gYWNjb3VudCBmcm9tIGEgcmFuZG9tbHkgZ2VuZXJhdGVkIHNlZWRcbiAqIGNvbnN0IHNlZWQgPSBuZXcgVWludDhBcnJheShbOTQsIDkxLCA1MiwgMjUxLCAyNDAsIDIzMCwgMjI2LCAzNSwgMTE3LCAyNTMsIDIyNCwgMjEwLCAxNzUsIDEzLCAyMDUsIDEyMCwgMTU1LCAyMTQsIDcsIDE2OSwgNjYsIDYyLCAyMDYsIDUwLCAxODgsIDQwLCAyOSwgMTIyLCA0MCwgMjUwLCA1NCwgMThdKTtcbiAqIGNvbnN0IG15U2VlZGVkQWNjb3VudCA9IG5ldyBBY2NvdW50KHtzZWVkOiBzZWVkfSk7XG4gKlxuICogLy8gQ3JlYXRlIGFuIGFjY291bnQgZnJvbSBhbiBleGlzdGluZyBwcml2YXRlIGtleVxuICogY29uc3QgbXlFeGlzdGluZ0FjY291bnQgPSBuZXcgQWNjb3VudCh7cHJpdmF0ZUtleTogJ215RXhpc3RpbmdQcml2YXRlS2V5J30pXG4gKlxuICogLy8gU2lnbiBhIG1lc3NhZ2VcbiAqIGNvbnN0IGhlbGxvX3dvcmxkID0gVWludDhBcnJheS5mcm9tKFsxMDQsIDEwMSwgMTA4LCAxMDgsIDExMSAxMTksIDExMSwgMTE0LCAxMDgsIDEwMF0pXG4gKiBjb25zdCBzaWduYXR1cmUgPSBteVJhbmRvbUFjY291bnQuc2lnbihoZWxsb193b3JsZClcbiAqXG4gKiAvLyBWZXJpZnkgYSBzaWduYXR1cmVcbiAqIG15UmFuZG9tQWNjb3VudC52ZXJpZnkoaGVsbG9fd29ybGQsIHNpZ25hdHVyZSlcbiAqL1xuY2xhc3MgQWNjb3VudCB7XG4gICAgX3ByaXZhdGVLZXk7XG4gICAgX3ZpZXdLZXk7XG4gICAgX2NvbXB1dGVLZXk7XG4gICAgX2FkZHJlc3M7XG4gICAgY29uc3RydWN0b3IocGFyYW1zID0ge30pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuX3ByaXZhdGVLZXkgPSB0aGlzLnByaXZhdGVLZXlGcm9tUGFyYW1zKHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJXcm9uZyBwYXJhbWV0ZXJcIiwgZSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXcm9uZyBQYXJhbWV0ZXJcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdmlld0tleSA9IFZpZXdLZXkuZnJvbV9wcml2YXRlX2tleSh0aGlzLl9wcml2YXRlS2V5KTtcbiAgICAgICAgdGhpcy5fY29tcHV0ZUtleSA9IENvbXB1dGVLZXkuZnJvbV9wcml2YXRlX2tleSh0aGlzLl9wcml2YXRlS2V5KTtcbiAgICAgICAgdGhpcy5fYWRkcmVzcyA9IEFkZHJlc3MuZnJvbV9wcml2YXRlX2tleSh0aGlzLl9wcml2YXRlS2V5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0ZW1wdHMgdG8gY3JlYXRlIGFuIGFjY291bnQgZnJvbSBhIHByaXZhdGUga2V5IGNpcGhlcnRleHRcbiAgICAgKiBAcGFyYW0ge1ByaXZhdGVLZXlDaXBoZXJ0ZXh0IHwgc3RyaW5nfSBjaXBoZXJ0ZXh0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkXG4gICAgICogQHJldHVybnMge1ByaXZhdGVLZXl9XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnN0IGNpcGhlcnRleHQgPSBQcml2YXRlS2V5Lm5ld0VuY3J5cHRlZChcInBhc3N3b3JkXCIpO1xuICAgICAqIGNvbnN0IGFjY291bnQgPSBBY2NvdW50LmZyb21DaXBoZXJ0ZXh0KGNpcGhlcnRleHQsIFwicGFzc3dvcmRcIik7XG4gICAgICovXG4gICAgc3RhdGljIGZyb21DaXBoZXJ0ZXh0KGNpcGhlcnRleHQsIHBhc3N3b3JkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjaXBoZXJ0ZXh0ID0gKHR5cGVvZiBjaXBoZXJ0ZXh0ID09PSBcInN0cmluZ1wiKSA/IFByaXZhdGVLZXlDaXBoZXJ0ZXh0LmZyb21TdHJpbmcoY2lwaGVydGV4dCkgOiBjaXBoZXJ0ZXh0O1xuICAgICAgICAgICAgY29uc3QgX3ByaXZhdGVLZXkgPSBQcml2YXRlS2V5LmZyb21Qcml2YXRlS2V5Q2lwaGVydGV4dChjaXBoZXJ0ZXh0LCBwYXNzd29yZCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEFjY291bnQoeyBwcml2YXRlS2V5OiBfcHJpdmF0ZUtleS50b19zdHJpbmcoKSB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV3JvbmcgcGFzc3dvcmQgb3IgaW52YWxpZCBjaXBoZXJ0ZXh0XCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByaXZhdGVLZXlGcm9tUGFyYW1zKHBhcmFtcykge1xuICAgICAgICBpZiAocGFyYW1zLnNlZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBQcml2YXRlS2V5LmZyb21fc2VlZF91bmNoZWNrZWQocGFyYW1zLnNlZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMucHJpdmF0ZUtleSkge1xuICAgICAgICAgICAgcmV0dXJuIFByaXZhdGVLZXkuZnJvbV9zdHJpbmcocGFyYW1zLnByaXZhdGVLZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJpdmF0ZUtleSgpO1xuICAgIH1cbiAgICBwcml2YXRlS2V5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZUtleTtcbiAgICB9XG4gICAgdmlld0tleSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZpZXdLZXk7XG4gICAgfVxuICAgIGNvbXB1dGVLZXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb21wdXRlS2V5O1xuICAgIH1cbiAgICBhZGRyZXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkcmVzcztcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQWNjb3VudCh7IHByaXZhdGVLZXk6IHRoaXMuX3ByaXZhdGVLZXkudG9fc3RyaW5nKCkgfSk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRyZXNzKCkudG9fc3RyaW5nKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuY3J5cHQgdGhlIGFjY291bnQncyBwcml2YXRlIGtleSB3aXRoIGEgcGFzc3dvcmRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2lwaGVydGV4dFxuICAgICAqIEByZXR1cm5zIHtQcml2YXRlS2V5Q2lwaGVydGV4dH1cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3QgYWNjb3VudCA9IG5ldyBBY2NvdW50KCk7XG4gICAgICogY29uc3QgY2lwaGVydGV4dCA9IGFjY291bnQuZW5jcnlwdEFjY291bnQoXCJwYXNzd29yZFwiKTtcbiAgICAgKi9cbiAgICBlbmNyeXB0QWNjb3VudChwYXNzd29yZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZUtleS50b0NpcGhlcnRleHQocGFzc3dvcmQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWNyeXB0cyBhIFJlY29yZCBpbiBjaXBoZXJ0ZXh0IGZvcm0gaW50byBwbGFpbnRleHRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2lwaGVydGV4dFxuICAgICAqIEByZXR1cm5zIHtSZWNvcmR9XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnN0IGFjY291bnQgPSBuZXcgQWNjb3VudCgpO1xuICAgICAqIGNvbnN0IHJlY29yZCA9IGFjY291bnQuZGVjcnlwdFJlY29yZChcInJlY29yZDFjaXBoZXJ0ZXh0XCIpO1xuICAgICAqL1xuICAgIGRlY3J5cHRSZWNvcmQoY2lwaGVydGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlld0tleS5kZWNyeXB0KGNpcGhlcnRleHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWNyeXB0cyBhbiBhcnJheSBvZiBSZWNvcmRzIGluIGNpcGhlcnRleHQgZm9ybSBpbnRvIHBsYWludGV4dFxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IGNpcGhlcnRleHRzXG4gICAgICogQHJldHVybnMge1JlY29yZFtdfVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBjb25zdCBhY2NvdW50ID0gbmV3IEFjY291bnQoKTtcbiAgICAgKiBjb25zdCByZWNvcmQgPSBhY2NvdW50LmRlY3J5cHRSZWNvcmRzKFtcInJlY29yZDFjaXBoZXJ0ZXh0XCIsIFwicmVjb3JkMmNpcGhlcnRleHRcIl0pO1xuICAgICAqL1xuICAgIGRlY3J5cHRSZWNvcmRzKGNpcGhlcnRleHRzKSB7XG4gICAgICAgIHJldHVybiBjaXBoZXJ0ZXh0cy5tYXAoKGNpcGhlcnRleHQpID0+IHRoaXMuX3ZpZXdLZXkuZGVjcnlwdChjaXBoZXJ0ZXh0KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgYWNjb3VudCBvd25zIGEgY2lwaGVydGV4dCByZWNvcmRcbiAgICAgKiBAcGFyYW0ge1JlY29yZENpcGhlclRleHQgfCBzdHJpbmd9IGNpcGhlcnRleHRcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gQ3JlYXRlIGEgY29ubmVjdGlvbiB0byB0aGUgQWxlbyBuZXR3b3JrIGFuZCBhbiBhY2NvdW50XG4gICAgICogY29uc3QgY29ubmVjdGlvbiA9IG5ldyBBbGVvTmV0d29ya0NsaWVudChcImh0dHBzOi8vYXBpLmV4cGxvcmVyLnByb3ZhYmxlLmNvbS92MVwiKTtcbiAgICAgKiBjb25zdCBhY2NvdW50ID0gQWNjb3VudC5mcm9tQ2lwaGVydGV4dChcImNpcGhlcnRleHRcIiwgXCJwYXNzd29yZFwiKTtcbiAgICAgKlxuICAgICAqIC8vIEdldCBhIHJlY29yZCBmcm9tIHRoZSBuZXR3b3JrXG4gICAgICogY29uc3QgcmVjb3JkID0gY29ubmVjdGlvbi5nZXRCbG9jaygxMjM0KTtcbiAgICAgKiBjb25zdCByZWNvcmRDaXBoZXJUZXh0ID0gcmVjb3JkLnRyYW5zYWN0aW9uc1swXS5leGVjdXRpb24udHJhbnNpdGlvbnNbMF0uaWQ7XG4gICAgICpcbiAgICAgKiAvLyBDaGVjayBpZiB0aGUgYWNjb3VudCBvd25zIHRoZSByZWNvcmRcbiAgICAgKiBpZiBhY2NvdW50Lm93bnNSZWNvcmQocmVjb3JkQ2lwaGVyVGV4dCkge1xuICAgICAqICAgICAvLyBUaGVuIG9uZSBjYW4gZG8gc29tZXRoaW5nIGxpa2U6XG4gICAgICogICAgIC8vIERlY3J5cHQgdGhlIHJlY29yZCBhbmQgY2hlY2sgaWYgaXQncyBzcGVudFxuICAgICAqICAgICAvLyBTdG9yZSB0aGUgcmVjb3JkIGluIGEgbG9jYWwgZGF0YWJhc2VcbiAgICAgKiAgICAgLy8gRXRjLlxuICAgICAqIH1cbiAgICAgKi9cbiAgICBvd25zUmVjb3JkQ2lwaGVydGV4dChjaXBoZXJ0ZXh0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2lwaGVydGV4dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2lwaGVydGV4dE9iamVjdCA9IFJlY29yZENpcGhlcnRleHQuZnJvbVN0cmluZyhjaXBoZXJ0ZXh0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2lwaGVydGV4dE9iamVjdC5pc093bmVyKHRoaXMuX3ZpZXdLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY2lwaGVydGV4dC5pc093bmVyKHRoaXMuX3ZpZXdLZXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNpZ25zIGEgbWVzc2FnZSB3aXRoIHRoZSBhY2NvdW50J3MgcHJpdmF0ZSBrZXkuXG4gICAgICogUmV0dXJucyBhIFNpZ25hdHVyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7VWludDhBcnJheX0gbWVzc2FnZVxuICAgICAqIEByZXR1cm5zIHtTaWduYXR1cmV9XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnN0IGFjY291bnQgPSBuZXcgQWNjb3VudCgpO1xuICAgICAqIGNvbnN0IG1lc3NhZ2UgPSBVaW50OEFycmF5LmZyb20oWzEwNCwgMTAxLCAxMDgsIDEwOCwgMTExIDExOSwgMTExLCAxMTQsIDEwOCwgMTAwXSlcbiAgICAgKiBhY2NvdW50LnNpZ24obWVzc2FnZSk7XG4gICAgICovXG4gICAgc2lnbihtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlS2V5LnNpZ24obWVzc2FnZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZlcmlmaWVzIHRoZSBTaWduYXR1cmUgb24gYSBtZXNzYWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtVaW50OEFycmF5fSBtZXNzYWdlXG4gICAgICogQHBhcmFtIHtTaWduYXR1cmV9IHNpZ25hdHVyZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBjb25zdCBhY2NvdW50ID0gbmV3IEFjY291bnQoKTtcbiAgICAgKiBjb25zdCBtZXNzYWdlID0gVWludDhBcnJheS5mcm9tKFsxMDQsIDEwMSwgMTA4LCAxMDgsIDExMSAxMTksIDExMSwgMTE0LCAxMDgsIDEwMF0pXG4gICAgICogY29uc3Qgc2lnbmF0dXJlID0gYWNjb3VudC5zaWduKG1lc3NhZ2UpO1xuICAgICAqIGFjY291bnQudmVyaWZ5KG1lc3NhZ2UsIHNpZ25hdHVyZSk7XG4gICAgICovXG4gICAgdmVyaWZ5KG1lc3NhZ2UsIHNpZ25hdHVyZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkcmVzcy52ZXJpZnkobWVzc2FnZSwgc2lnbmF0dXJlKTtcbiAgICB9XG59XG5cbi8qKlxuICogU2VhcmNoIHBhcmFtZXRlcnMgZm9yIHRoZSBvZmZsaW5lIGtleSBwcm92aWRlci4gVGhpcyBjbGFzcyBpbXBsZW1lbnRzIHRoZSBLZXlTZWFyY2hQYXJhbXMgaW50ZXJmYWNlIGFuZCBpbmNsdWRlc1xuICogYSBjb252ZW5pZW5jZSBtZXRob2QgZm9yIGNyZWF0aW5nIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZm9yIGVhY2ggZnVuY3Rpb24gb2YgdGhlIGNyZWRpdHMuYWxlbyBwcm9ncmFtLlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiBzdG9yaW5nIGEga2V5IGZvciBhIGN1c3RvbSBwcm9ncmFtIGZ1bmN0aW9uXG4gKiBvZmZsaW5lU2VhcmNoUGFyYW1zID0gbmV3IE9mZmxpbmVTZWFyY2hQYXJhbXMoXCJteXByb2dyYW0uYWxlby9teWZ1bmN0aW9uXCIpO1xuICpcbiAqIC8vIElmIHN0b3JpbmcgYSBrZXkgZm9yIGEgY3JlZGl0cy5hbGVvIHByb2dyYW0gZnVuY3Rpb25cbiAqIGJvbmRQdWJsaWNLZXlQYXJhbXMgPSBPZmZsaW5lU2VhcmNoUGFyYW1zLmJvbmRQdWJsaWNLZXlQYXJhbXMoKTtcbiAqL1xuY2xhc3MgT2ZmbGluZVNlYXJjaFBhcmFtcyB7XG4gICAgY2FjaGVLZXk7XG4gICAgdmVyaWZ5Q3JlZGl0c0tleXM7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IE9mZmxpbmVTZWFyY2hQYXJhbXMgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2FjaGVLZXkgLSBLZXkgdXNlZCB0byBzdG9yZSB0aGUgbG9jYWwgZnVuY3Rpb24gcHJvdmluZyAmIHZlcmlmeWluZyBrZXlzLiBUaGlzIHNob3VsZCBiZSBzdG9yZWRcbiAgICAgKiB1bmRlciB0aGUgbmFtaW5nIGNvbnZlbnRpb24gXCJwcm9ncmFtTmFtZS9mdW5jdGlvbk5hbWVcIiAoaS5lLiBcIm15cHJvZ3JhbS5hbGVvL215ZnVuY3Rpb25cIilcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZlcmlmeUNyZWRpdHNLZXlzIC0gV2hldGhlciB0byB2ZXJpZnkgdGhlIGtleXMgYWdhaW5zdCB0aGUgY3JlZGl0cy5hbGVvIHByb2dyYW0sXG4gICAgICogZGVmYXVsdHMgdG8gZmFsc2UsIGJ1dCBzaG91bGQgYmUgc2V0IHRvIHRydWUgaWYgdXNpbmcga2V5cyBmcm9tIHRoZSBjcmVkaXRzLmFsZW8gcHJvZ3JhbVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNhY2hlS2V5LCB2ZXJpZnlDcmVkaXRzS2V5cyA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuY2FjaGVLZXkgPSBjYWNoZUtleTtcbiAgICAgICAgdGhpcy52ZXJpZnlDcmVkaXRzS2V5cyA9IHZlcmlmeUNyZWRpdHNLZXlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgT2ZmbGluZVNlYXJjaFBhcmFtcyBpbnN0YW5jZSBmb3IgdGhlIGJvbmRfcHVibGljIGZ1bmN0aW9uIG9mIHRoZSBjcmVkaXRzLmFsZW8gcHJvZ3JhbS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYm9uZFB1YmxpY0tleVBhcmFtcygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPZmZsaW5lU2VhcmNoUGFyYW1zKENSRURJVFNfUFJPR1JBTV9LRVlTLmJvbmRfcHVibGljLmxvY2F0b3IsIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgT2ZmbGluZVNlYXJjaFBhcmFtcyBpbnN0YW5jZSBmb3IgdGhlIGJvbmRfdmFsaWRhdG9yIGZ1bmN0aW9uIG9mIHRoZSBjcmVkaXRzLmFsZW8gcHJvZ3JhbS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYm9uZFZhbGlkYXRvcktleVBhcmFtcygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPZmZsaW5lU2VhcmNoUGFyYW1zKENSRURJVFNfUFJPR1JBTV9LRVlTLmJvbmRfdmFsaWRhdG9yLmxvY2F0b3IsIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgT2ZmbGluZVNlYXJjaFBhcmFtcyBpbnN0YW5jZSBmb3IgdGhlIGNsYWltX3VuYm9uZF9wdWJsaWMgZnVuY3Rpb24gb2YgdGhlXG4gICAgICovXG4gICAgc3RhdGljIGNsYWltVW5ib25kUHVibGljS2V5UGFyYW1zKCkge1xuICAgICAgICByZXR1cm4gbmV3IE9mZmxpbmVTZWFyY2hQYXJhbXMoQ1JFRElUU19QUk9HUkFNX0tFWVMuY2xhaW1fdW5ib25kX3B1YmxpYy5sb2NhdG9yLCB0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IE9mZmxpbmVTZWFyY2hQYXJhbXMgaW5zdGFuY2UgZm9yIHRoZSBmZWVfcHJpdmF0ZSBmdW5jdGlvbiBvZiB0aGUgY3JlZGl0cy5hbGVvIHByb2dyYW0uXG4gICAgICovXG4gICAgc3RhdGljIGZlZVByaXZhdGVLZXlQYXJhbXMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2ZmbGluZVNlYXJjaFBhcmFtcyhDUkVESVRTX1BST0dSQU1fS0VZUy5mZWVfcHJpdmF0ZS5sb2NhdG9yLCB0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IE9mZmxpbmVTZWFyY2hQYXJhbXMgaW5zdGFuY2UgZm9yIHRoZSBmZWVfcHVibGljIGZ1bmN0aW9uIG9mIHRoZSBjcmVkaXRzLmFsZW8gcHJvZ3JhbS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZmVlUHVibGljS2V5UGFyYW1zKCkge1xuICAgICAgICByZXR1cm4gbmV3IE9mZmxpbmVTZWFyY2hQYXJhbXMoQ1JFRElUU19QUk9HUkFNX0tFWVMuZmVlX3B1YmxpYy5sb2NhdG9yLCB0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IE9mZmxpbmVTZWFyY2hQYXJhbXMgaW5zdGFuY2UgZm9yIHRoZSBpbmNsdXNpb24gcHJvdmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbmNsdXNpb25LZXlQYXJhbXMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2ZmbGluZVNlYXJjaFBhcmFtcyhDUkVESVRTX1BST0dSQU1fS0VZUy5pbmNsdXNpb24ubG9jYXRvciwgdHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBPZmZsaW5lU2VhcmNoUGFyYW1zIGluc3RhbmNlIGZvciB0aGUgam9pbiBmdW5jdGlvbiBvZiB0aGUgY3JlZGl0cy5hbGVvIHByb2dyYW0uXG4gICAgICovXG4gICAgc3RhdGljIGpvaW5LZXlQYXJhbXMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2ZmbGluZVNlYXJjaFBhcmFtcyhDUkVESVRTX1BST0dSQU1fS0VZUy5qb2luLmxvY2F0b3IsIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgT2ZmbGluZVNlYXJjaFBhcmFtcyBpbnN0YW5jZSBmb3IgdGhlIHNldF92YWxpZGF0b3Jfc3RhdGUgZnVuY3Rpb24gb2YgdGhlIGNyZWRpdHMuYWxlbyBwcm9ncmFtLlxuICAgICAqL1xuICAgIHN0YXRpYyBzZXRWYWxpZGF0b3JTdGF0ZUtleVBhcmFtcygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPZmZsaW5lU2VhcmNoUGFyYW1zKENSRURJVFNfUFJPR1JBTV9LRVlTLnNldF92YWxpZGF0b3Jfc3RhdGUubG9jYXRvciwgdHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBPZmZsaW5lU2VhcmNoUGFyYW1zIGluc3RhbmNlIGZvciB0aGUgc3BsaXQgZnVuY3Rpb24gb2YgdGhlIGNyZWRpdHMuYWxlbyBwcm9ncmFtLlxuICAgICAqL1xuICAgIHN0YXRpYyBzcGxpdEtleVBhcmFtcygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPZmZsaW5lU2VhcmNoUGFyYW1zKENSRURJVFNfUFJPR1JBTV9LRVlTLnNwbGl0LmxvY2F0b3IsIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgT2ZmbGluZVNlYXJjaFBhcmFtcyBpbnN0YW5jZSBmb3IgdGhlIHRyYW5zZmVyX3ByaXZhdGUgZnVuY3Rpb24gb2YgdGhlIGNyZWRpdHMuYWxlbyBwcm9ncmFtLlxuICAgICAqL1xuICAgIHN0YXRpYyB0cmFuc2ZlclByaXZhdGVLZXlQYXJhbXMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2ZmbGluZVNlYXJjaFBhcmFtcyhDUkVESVRTX1BST0dSQU1fS0VZUy50cmFuc2Zlcl9wcml2YXRlLmxvY2F0b3IsIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgT2ZmbGluZVNlYXJjaFBhcmFtcyBpbnN0YW5jZSBmb3IgdGhlIHRyYW5zZmVyX3ByaXZhdGVfdG9fcHVibGljIGZ1bmN0aW9uIG9mIHRoZSBjcmVkaXRzLmFsZW8gcHJvZ3JhbS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdHJhbnNmZXJQcml2YXRlVG9QdWJsaWNLZXlQYXJhbXMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2ZmbGluZVNlYXJjaFBhcmFtcyhDUkVESVRTX1BST0dSQU1fS0VZUy50cmFuc2Zlcl9wcml2YXRlX3RvX3B1YmxpYy5sb2NhdG9yLCB0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IE9mZmxpbmVTZWFyY2hQYXJhbXMgaW5zdGFuY2UgZm9yIHRoZSB0cmFuc2Zlcl9wdWJsaWMgZnVuY3Rpb24gb2YgdGhlIGNyZWRpdHMuYWxlbyBwcm9ncmFtLlxuICAgICAqL1xuICAgIHN0YXRpYyB0cmFuc2ZlclB1YmxpY0tleVBhcmFtcygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPZmZsaW5lU2VhcmNoUGFyYW1zKENSRURJVFNfUFJPR1JBTV9LRVlTLnRyYW5zZmVyX3B1YmxpYy5sb2NhdG9yLCB0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IE9mZmxpbmVTZWFyY2hQYXJhbXMgaW5zdGFuY2UgZm9yIHRoZSB0cmFuc2Zlcl9wdWJsaWNfYXNfc2lnbmVyIGZ1bmN0aW9uIG9mIHRoZSBjcmVkaXRzLmFsZW8gcHJvZ3JhbS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdHJhbnNmZXJQdWJsaWNBc1NpZ25lcktleVBhcmFtcygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPZmZsaW5lU2VhcmNoUGFyYW1zKENSRURJVFNfUFJPR1JBTV9LRVlTLnRyYW5zZmVyX3B1YmxpY19hc19zaWduZXIubG9jYXRvciwgdHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBPZmZsaW5lU2VhcmNoUGFyYW1zIGluc3RhbmNlIGZvciB0aGUgdHJhbnNmZXJfcHVibGljX3RvX3ByaXZhdGUgZnVuY3Rpb24gb2YgdGhlIGNyZWRpdHMuYWxlbyBwcm9ncmFtLlxuICAgICAqL1xuICAgIHN0YXRpYyB0cmFuc2ZlclB1YmxpY1RvUHJpdmF0ZUtleVBhcmFtcygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPZmZsaW5lU2VhcmNoUGFyYW1zKENSRURJVFNfUFJPR1JBTV9LRVlTLnRyYW5zZmVyX3B1YmxpY190b19wcml2YXRlLmxvY2F0b3IsIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgT2ZmbGluZVNlYXJjaFBhcmFtcyBpbnN0YW5jZSBmb3IgdGhlIHVuYm9uZF9wdWJsaWMgZnVuY3Rpb24gb2YgdGhlIGNyZWRpdHMuYWxlbyBwcm9ncmFtLlxuICAgICAqL1xuICAgIHN0YXRpYyB1bmJvbmRQdWJsaWNLZXlQYXJhbXMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2ZmbGluZVNlYXJjaFBhcmFtcyhDUkVESVRTX1BST0dSQU1fS0VZUy51bmJvbmRfcHVibGljLmxvY2F0b3IsIHRydWUpO1xuICAgIH1cbn1cbi8qKlxuICogQSBrZXkgcHJvdmlkZXIgbWVhbnQgZm9yIGJ1aWxkaW5nIHRyYW5zYWN0aW9ucyBvZmZsaW5lIG9uIGRldmljZXMgc3VjaCBhcyBoYXJkd2FyZSB3YWxsZXRzLiBUaGlzIGtleSBwcm92aWRlciBpcyBub3RcbiAqIGFibGUgdG8gY29udGFjdCB0aGUgaW50ZXJuZXQgZm9yIGtleSBtYXRlcmlhbCBhbmQgaW5zdGVhZCByZWxpZXMgb24gdGhlIHVzZXIgdG8gaW5zZXJ0IEFsZW8gZnVuY3Rpb24gcHJvdmluZyAmXG4gKiB2ZXJpZnlpbmcga2V5cyBmcm9tIGxvY2FsIHN0b3JhZ2UgcHJpb3IgdG8gdXNhZ2UuXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENyZWF0ZSBhbiBvZmZsaW5lIHByb2dyYW0gbWFuYWdlclxuICogY29uc3QgcHJvZ3JhbU1hbmFnZXIgPSBuZXcgUHJvZ3JhbU1hbmFnZXIoKTtcbiAqXG4gKiAvLyBDcmVhdGUgYSB0ZW1wb3JhcnkgYWNjb3VudCBmb3IgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgcHJvZ3JhbVxuICogY29uc3QgYWNjb3VudCA9IG5ldyBBY2NvdW50KCk7XG4gKiBwcm9ncmFtTWFuYWdlci5zZXRBY2NvdW50KGFjY291bnQpO1xuICpcbiAqIC8vIENyZWF0ZSB0aGUgcHJvdmluZyBrZXlzIGZyb20gdGhlIGtleSBieXRlcyBvbiB0aGUgb2ZmbGluZSBtYWNoaW5lXG4gKiBjb25zb2xlLmxvZyhcIkNyZWF0aW5nIHByb3Zpbmcga2V5cyBmcm9tIGxvY2FsIGtleSBmaWxlc1wiKTtcbiAqIGNvbnN0IHByb2dyYW0gPSBcInByb2dyYW0gaGVsbG9faGVsbG8uYWxlbzsgZnVuY3Rpb24gaGVsbG86IGlucHV0IHIwIGFzIHUzMi5wdWJsaWM7IGlucHV0IHIxIGFzIHUzMi5wcml2YXRlOyBhZGQgcjAgcjEgaW50byByMjsgb3V0cHV0IHIyIGFzIHUzMi5wcml2YXRlO1wiO1xuICogY29uc3QgbXlGdW5jdGlvblByb3ZlciA9IGF3YWl0IGdldExvY2FsS2V5KFwiL3BhdGgvdG8vbXkvZnVuY3Rpb24vaGVsbG9faGVsbG8ucHJvdmVyXCIpO1xuICogY29uc3QgbXlGdW5jdGlvblZlcmlmaWVyID0gYXdhaXQgZ2V0TG9jYWxLZXkoXCIvcGF0aC90by9teS9mdW5jdGlvbi9oZWxsb19oZWxsby52ZXJpZmllclwiKTtcbiAqIGNvbnN0IGZlZVB1YmxpY1Byb3ZpbmdLZXlCeXRlcyA9IGF3YWl0IGdldExvY2FsS2V5KFwiL3BhdGgvdG8vY3JlZGl0cy5hbGVvL2ZlZVB1YmxpYy5wcm92ZXJcIik7XG4gKlxuICogbXlGdW5jdGlvblByb3ZpbmdLZXkgPSBQcm92aW5nS2V5LmZyb21CeXRlcyhteUZ1bmN0aW9uUHJvdmVyKTtcbiAqIG15RnVuY3Rpb25WZXJpZnlpbmdLZXkgPSBWZXJpZnlpbmdLZXkuZnJvbUJ5dGVzKG15RnVuY3Rpb25WZXJpZmllcik7XG4gKiBjb25zdCBmZWVQdWJsaWNQcm92aW5nS2V5ID0gUHJvdmluZ0tleS5mcm9tQnl0ZXMoZmVlUHVibGljS2V5Qnl0ZXMpO1xuICpcbiAqIC8vIENyZWF0ZSBhbiBvZmZsaW5lIGtleSBwcm92aWRlclxuICogY29uc29sZS5sb2coXCJDcmVhdGluZyBvZmZsaW5lIGtleSBwcm92aWRlclwiKTtcbiAqIGNvbnN0IG9mZmxpbmVLZXlQcm92aWRlciA9IG5ldyBPZmZsaW5lS2V5UHJvdmlkZXIoKTtcbiAqXG4gKiAvLyBDYWNoZSB0aGUga2V5c1xuICogLy8gQ2FjaGUgdGhlIHByb3ZpbmcgYW5kIHZlcmlmeWluZyBrZXlzIGZvciB0aGUgY3VzdG9tIGhlbGxvIGZ1bmN0aW9uXG4gKiBPZmZsaW5lS2V5UHJvdmlkZXIuY2FjaGVLZXlzKFwiaGVsbG9faGVsbG8uYWxlby9oZWxsb1wiLCBteUZ1bmN0aW9uUHJvdmluZ0tleSwgbXlGdW5jdGlvblZlcmlmeWluZ0tleSk7XG4gKlxuICogLy8gQ2FjaGUgdGhlIHByb3Zpbmcga2V5IGZvciB0aGUgZmVlX3B1YmxpYyBmdW5jdGlvbiAodGhlIHZlcmlmeWluZyBrZXkgaXMgYXV0b21hdGljYWxseSBjYWNoZWQpXG4gKiBPZmZsaW5lS2V5UHJvdmlkZXIuaW5zZXJ0RmVlUHVibGljS2V5KGZlZVB1YmxpY1Byb3ZpbmdLZXkpO1xuICpcbiAqIC8vIENyZWF0ZSBhbiBvZmZsaW5lIHF1ZXJ5IHVzaW5nIHRoZSBsYXRlc3Qgc3RhdGUgcm9vdCBpbiBvcmRlciB0byBjcmVhdGUgdGhlIGluY2x1c2lvbiBwcm9vZlxuICogY29uc3Qgb2ZmbGluZVF1ZXJ5ID0gbmV3IE9mZmxpbmVRdWVyeShcImxhdGVzdFN0YXRlUm9vdFwiKTtcbiAqXG4gKiAvLyBJbnNlcnQgdGhlIGtleSBwcm92aWRlciBpbnRvIHRoZSBwcm9ncmFtIG1hbmFnZXJcbiAqIHByb2dyYW1NYW5hZ2VyLnNldEtleVByb3ZpZGVyKG9mZmxpbmVLZXlQcm92aWRlcik7XG4gKlxuICogLy8gQ3JlYXRlIHRoZSBvZmZsaW5lIHNlYXJjaCBwYXJhbXNcbiAqIGNvbnN0IG9mZmxpbmVTZWFyY2hQYXJhbXMgPSBuZXcgT2ZmbGluZVNlYXJjaFBhcmFtcyhcImhlbGxvX2hlbGxvLmFsZW8vaGVsbG9cIik7XG4gKlxuICogLy8gQ3JlYXRlIHRoZSBvZmZsaW5lIHRyYW5zYWN0aW9uXG4gKiBjb25zdCBvZmZsaW5lRXhlY3V0ZVR4ID0gPFRyYW5zYWN0aW9uPmF3YWl0IHRoaXMuYnVpbGRFeGVjdXRpb25UcmFuc2FjdGlvbihcImhlbGxvX2hlbGxvLmFsZW9cIiwgXCJoZWxsb1wiLCAxLCBmYWxzZSwgW1wiNXUzMlwiLCBcIjV1MzJcIl0sIHVuZGVmaW5lZCwgb2ZmbGluZVNlYXJjaFBhcmFtcywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBvZmZsaW5lUXVlcnksIHByb2dyYW0pO1xuICpcbiAqIC8vIEJyb2FkY2FzdCB0aGUgdHJhbnNhY3Rpb24gbGF0ZXIgb24gYSBtYWNoaW5lIHdpdGggaW50ZXJuZXQgYWNjZXNzXG4gKiBjb25zdCBuZXR3b3JrQ2xpZW50ID0gbmV3IEFsZW9OZXR3b3JrQ2xpZW50KFwiaHR0cHM6Ly9hcGkuZXhwbG9yZXIucHJvdmFibGUuY29tL3YxXCIpO1xuICogY29uc3QgdHhJZCA9IGF3YWl0IG5ldHdvcmtDbGllbnQuYnJvYWRjYXN0VHJhbnNhY3Rpb24ob2ZmbGluZUV4ZWN1dGVUeCk7XG4gKi9cbmNsYXNzIE9mZmxpbmVLZXlQcm92aWRlciB7XG4gICAgY2FjaGU7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBib25kX3B1YmxpYyBmdW5jdGlvbiBrZXlzIGZyb20gdGhlIGNyZWRpdHMuYWxlbyBwcm9ncmFtLiBUaGUga2V5cyBtdXN0IGJlIGNhY2hlZCBwcmlvciB0byBjYWxsaW5nIHRoaXNcbiAgICAgKiBtZXRob2QgZm9yIGl0IHRvIHdvcmsuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxGdW5jdGlvbktleVBhaXI+fSBQcm92aW5nIGFuZCB2ZXJpZnlpbmcga2V5cyBmb3IgdGhlIGJvbmRfcHVibGljIGZ1bmN0aW9uXG4gICAgICovXG4gICAgYm9uZFB1YmxpY0tleXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZ1bmN0aW9uS2V5cyhPZmZsaW5lU2VhcmNoUGFyYW1zLmJvbmRQdWJsaWNLZXlQYXJhbXMoKSk7XG4gICAgfVxuICAgIDtcbiAgICAvKipcbiAgICAgKiBHZXQgYm9uZF92YWxpZGF0b3IgZnVuY3Rpb24ga2V5cyBmcm9tIHRoZSBjcmVkaXRzLmFsZW8gcHJvZ3JhbS4gVGhlIGtleXMgbXVzdCBiZSBjYWNoZWQgcHJpb3IgdG8gY2FsbGluZyB0aGlzXG4gICAgICogbWV0aG9kIGZvciBpdCB0byB3b3JrLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8RnVuY3Rpb25LZXlQYWlyPn0gUHJvdmluZyBhbmQgdmVyaWZ5aW5nIGtleXMgZm9yIHRoZSBib25kX3B1YmxpYyBmdW5jdGlvblxuICAgICAqL1xuICAgIGJvbmRWYWxpZGF0b3JLZXlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mdW5jdGlvbktleXMoT2ZmbGluZVNlYXJjaFBhcmFtcy5ib25kVmFsaWRhdG9yS2V5UGFyYW1zKCkpO1xuICAgIH1cbiAgICA7XG4gICAgLyoqXG4gICAgICogQ2FjaGUgYSBzZXQgb2Yga2V5cy4gVGhpcyB3aWxsIG92ZXJ3cml0ZSBhbnkgZXhpc3Rpbmcga2V5cyB3aXRoIHRoZSBzYW1lIGtleUlkLiBUaGUgdXNlciBjYW4gY2hlY2sgaWYgYSBrZXlJZFxuICAgICAqIGV4aXN0cyBpbiB0aGUgY2FjaGUgdXNpbmcgdGhlIGNvbnRhaW5zS2V5cyBtZXRob2QgcHJpb3IgdG8gY2FsbGluZyB0aGlzIG1ldGhvZCBpZiBvdmVyd3JpdGluZyBpcyBub3QgZGVzaXJlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlJZCBhY2Nlc3Mga2V5IGZvciB0aGUgY2FjaGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uS2V5UGFpcn0ga2V5cyBrZXlzIHRvIGNhY2hlXG4gICAgICovXG4gICAgY2FjaGVLZXlzKGtleUlkLCBrZXlzKSB7XG4gICAgICAgIGNvbnN0IFtwcm92aW5nS2V5LCB2ZXJpZnlpbmdLZXldID0ga2V5cztcbiAgICAgICAgdGhpcy5jYWNoZS5zZXQoa2V5SWQsIFtwcm92aW5nS2V5LnRvQnl0ZXMoKSwgdmVyaWZ5aW5nS2V5LnRvQnl0ZXMoKV0pO1xuICAgIH1cbiAgICA7XG4gICAgLyoqXG4gICAgICogR2V0IHVuYm9uZF9wdWJsaWMgZnVuY3Rpb24ga2V5cyBmcm9tIHRoZSBjcmVkaXRzLmFsZW8gcHJvZ3JhbS4gVGhlIGtleXMgbXVzdCBiZSBjYWNoZWQgcHJpb3IgdG8gY2FsbGluZyB0aGlzXG4gICAgICogbWV0aG9kIGZvciBpdCB0byB3b3JrLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8RnVuY3Rpb25LZXlQYWlyPn0gUHJvdmluZyBhbmQgdmVyaWZ5aW5nIGtleXMgZm9yIHRoZSB1bmJvbmRfcHVibGljIGZ1bmN0aW9uXG4gICAgICovXG4gICAgY2xhaW1VbmJvbmRQdWJsaWNLZXlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mdW5jdGlvbktleXMoT2ZmbGluZVNlYXJjaFBhcmFtcy5jbGFpbVVuYm9uZFB1YmxpY0tleVBhcmFtcygpKTtcbiAgICB9XG4gICAgO1xuICAgIC8qKlxuICAgICAqIEdldCBhcmJpdHJhcnkgZnVuY3Rpb24ga2V5IGZyb20gdGhlIG9mZmxpbmUga2V5IHByb3ZpZGVyIGNhY2hlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtLZXlTZWFyY2hQYXJhbXMgfCB1bmRlZmluZWR9IHBhcmFtcyAtIE9wdGlvbmFsIHNlYXJjaCBwYXJhbWV0ZXJzIGZvciB0aGUga2V5IHByb3ZpZGVyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8RnVuY3Rpb25LZXlQYWlyPn0gUHJvdmluZyBhbmQgdmVyaWZ5aW5nIGtleXMgZm9yIHRoZSBzcGVjaWZpZWQgcHJvZ3JhbVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLy8gRmlyc3QgY2FjaGUgdGhlIGtleXMgZnJvbSBsb2NhbCBvZmZsaW5lIHJlc291cmNlc1xuICAgICAqIGNvbnN0IG9mZmxpbmVLZXlQcm92aWRlciA9IG5ldyBPZmZsaW5lS2V5UHJvdmlkZXIoKTtcbiAgICAgKiBjb25zdCBteUZ1bmN0aW9uVmVyaWZ5aW5nS2V5ID0gVmVyaWZ5aW5nS2V5LmZyb21TdHJpbmcoXCJ2ZXJpZmllci4uLlwiKTtcbiAgICAgKiBjb25zdCBteUZ1bmN0aW9uUHJvdmluZ0tleUJ5dGVzID0gYXdhaXQgcmVhZEJpbmFyeUZpbGUoJy4vcmVzb3VyY2VzL215ZnVuY3Rpb24ucHJvdmVyJyk7XG4gICAgICogY29uc3QgbXlGdW5jdGlvblByb3ZpbmdLZXkgPSBQcm92aW5nS2V5LmZyb21CeXRlcyhteUZ1bmN0aW9uUHJvdmluZ0tleUJ5dGVzKTtcbiAgICAgKlxuICAgICAqIC8vLyBDYWNoZSB0aGUga2V5cyBmb3IgZnV0dXJlIHVzZSB3aXRoIGEgbWVtb3JhYmxlIGxvY2F0b3JcbiAgICAgKiBvZmZsaW5lS2V5UHJvdmlkZXIuY2FjaGVLZXlzKFwibXlwcm9ncmFtLmFsZW8vbXlmdW5jdGlvblwiLCBbbXlGdW5jdGlvblByb3ZpbmdLZXksIG15RnVuY3Rpb25WZXJpZnlpbmdLZXldKTtcbiAgICAgKlxuICAgICAqIC8vLyBXaGVuIHRoZXkncmUgbmVlZGVkLCByZXRyaWV2ZSB0aGUga2V5cyBmcm9tIHRoZSBjYWNoZVxuICAgICAqXG4gICAgICogLy8vIEZpcnN0IGNyZWF0ZSBhIHNlYXJjaCBwYXJhbWV0ZXIgb2JqZWN0IHdpdGggdGhlIHNhbWUgbG9jYXRvciB1c2VkIHRvIGNhY2hlIHRoZSBrZXlzXG4gICAgICogY29uc3Qga2V5UGFyYW1zID0gbmV3IE9mZmxpbmVTZWFyY2hQYXJhbXMoXCJteXByb2dyYW0uYWxlby9teWZ1bmN0aW9uXCIpO1xuICAgICAqXG4gICAgICogLy8vIFRoZW4gcmV0cmlldmUgdGhlIGtleXNcbiAgICAgKiBjb25zdCBbbXlGdW5jdGlvblByb3ZlciwgbXlGdW5jdGlvblZlcmlmaWVyXSA9IGF3YWl0IG9mZmxpbmVLZXlQcm92aWRlci5mdW5jdGlvbktleXMoa2V5UGFyYW1zKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbktleXMocGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAocGFyYW1zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiTm8gc2VhcmNoIHBhcmFtZXRlcnMgcHJvdmlkZWQsIGNhbm5vdCByZXRyaWV2ZSBrZXlzXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleUlkID0gcGFyYW1zLmNhY2hlS2V5O1xuICAgICAgICAgICAgICAgIGNvbnN0IHZlcmlmeUNyZWRpdHNLZXlzID0gcGFyYW1zLnZlcmlmeUNyZWRpdHNLZXlzO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhY2hlLmhhcyhrZXlJZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW3Byb3ZpbmdLZXlCeXRlcywgdmVyaWZ5aW5nS2V5Qnl0ZXNdID0gdGhpcy5jYWNoZS5nZXQoa2V5SWQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm92aW5nS2V5ID0gUHJvdmluZ0tleS5mcm9tQnl0ZXMocHJvdmluZ0tleUJ5dGVzKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmVyaWZ5aW5nS2V5ID0gVmVyaWZ5aW5nS2V5LmZyb21CeXRlcyh2ZXJpZnlpbmdLZXlCeXRlcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2ZXJpZnlDcmVkaXRzS2V5cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5c01hdGNoRXhwZWN0ZWQgPSB0aGlzLnZlcmlmeUNyZWRpdHNLZXlzKGtleUlkLCBwcm92aW5nS2V5LCB2ZXJpZnlpbmdLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFrZXlzTWF0Y2hFeHBlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYENhY2hlZCBrZXlzIGRvIG5vdCBtYXRjaCBleHBlY3RlZCBrZXlzIGZvciAke2tleUlkfWApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKFtwcm92aW5nS2V5LCB2ZXJpZnlpbmdLZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJLZXlzIG5vdCBmb3VuZCBpbiBjYWNoZSBmb3IgXCIgKyBrZXlJZCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIDtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBrZXlzIGZvciBhIGdpdmVuIGNyZWRpdHMgZnVuY3Rpb24gbWF0Y2ggdGhlIGV4cGVjdGVkIGtleXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUga2V5cyBtYXRjaCB0aGUgZXhwZWN0ZWQga2V5c1xuICAgICAqL1xuICAgIHZlcmlmeUNyZWRpdHNLZXlzKGxvY2F0b3IsIHByb3ZpbmdLZXksIHZlcmlmeWluZ0tleSkge1xuICAgICAgICBzd2l0Y2ggKGxvY2F0b3IpIHtcbiAgICAgICAgICAgIGNhc2UgQ1JFRElUU19QUk9HUkFNX0tFWVMuYm9uZF9wdWJsaWMubG9jYXRvcjpcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdmluZ0tleS5pc0JvbmRQdWJsaWNQcm92ZXIoKSAmJiB2ZXJpZnlpbmdLZXkuaXNCb25kUHVibGljVmVyaWZpZXIoKTtcbiAgICAgICAgICAgIGNhc2UgQ1JFRElUU19QUk9HUkFNX0tFWVMuY2xhaW1fdW5ib25kX3B1YmxpYy5sb2NhdG9yOlxuICAgICAgICAgICAgICAgIHJldHVybiBwcm92aW5nS2V5LmlzQ2xhaW1VbmJvbmRQdWJsaWNQcm92ZXIoKSAmJiB2ZXJpZnlpbmdLZXkuaXNDbGFpbVVuYm9uZFB1YmxpY1ZlcmlmaWVyKCk7XG4gICAgICAgICAgICBjYXNlIENSRURJVFNfUFJPR1JBTV9LRVlTLmZlZV9wcml2YXRlLmxvY2F0b3I6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3ZpbmdLZXkuaXNGZWVQcml2YXRlUHJvdmVyKCkgJiYgdmVyaWZ5aW5nS2V5LmlzRmVlUHJpdmF0ZVZlcmlmaWVyKCk7XG4gICAgICAgICAgICBjYXNlIENSRURJVFNfUFJPR1JBTV9LRVlTLmZlZV9wdWJsaWMubG9jYXRvcjpcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdmluZ0tleS5pc0ZlZVB1YmxpY1Byb3ZlcigpICYmIHZlcmlmeWluZ0tleS5pc0ZlZVB1YmxpY1ZlcmlmaWVyKCk7XG4gICAgICAgICAgICBjYXNlIENSRURJVFNfUFJPR1JBTV9LRVlTLmluY2x1c2lvbi5sb2NhdG9yOlxuICAgICAgICAgICAgICAgIHJldHVybiBwcm92aW5nS2V5LmlzSW5jbHVzaW9uUHJvdmVyKCkgJiYgdmVyaWZ5aW5nS2V5LmlzSW5jbHVzaW9uVmVyaWZpZXIoKTtcbiAgICAgICAgICAgIGNhc2UgQ1JFRElUU19QUk9HUkFNX0tFWVMuam9pbi5sb2NhdG9yOlxuICAgICAgICAgICAgICAgIHJldHVybiBwcm92aW5nS2V5LmlzSm9pblByb3ZlcigpICYmIHZlcmlmeWluZ0tleS5pc0pvaW5WZXJpZmllcigpO1xuICAgICAgICAgICAgY2FzZSBDUkVESVRTX1BST0dSQU1fS0VZUy5zZXRfdmFsaWRhdG9yX3N0YXRlLmxvY2F0b3I6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3ZpbmdLZXkuaXNTZXRWYWxpZGF0b3JTdGF0ZVByb3ZlcigpICYmIHZlcmlmeWluZ0tleS5pc1NldFZhbGlkYXRvclN0YXRlVmVyaWZpZXIoKTtcbiAgICAgICAgICAgIGNhc2UgQ1JFRElUU19QUk9HUkFNX0tFWVMuc3BsaXQubG9jYXRvcjpcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdmluZ0tleS5pc1NwbGl0UHJvdmVyKCkgJiYgdmVyaWZ5aW5nS2V5LmlzU3BsaXRWZXJpZmllcigpO1xuICAgICAgICAgICAgY2FzZSBDUkVESVRTX1BST0dSQU1fS0VZUy50cmFuc2Zlcl9wcml2YXRlLmxvY2F0b3I6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3ZpbmdLZXkuaXNUcmFuc2ZlclByaXZhdGVQcm92ZXIoKSAmJiB2ZXJpZnlpbmdLZXkuaXNUcmFuc2ZlclByaXZhdGVWZXJpZmllcigpO1xuICAgICAgICAgICAgY2FzZSBDUkVESVRTX1BST0dSQU1fS0VZUy50cmFuc2Zlcl9wcml2YXRlX3RvX3B1YmxpYy5sb2NhdG9yOlxuICAgICAgICAgICAgICAgIHJldHVybiBwcm92aW5nS2V5LmlzVHJhbnNmZXJQcml2YXRlVG9QdWJsaWNQcm92ZXIoKSAmJiB2ZXJpZnlpbmdLZXkuaXNUcmFuc2ZlclByaXZhdGVUb1B1YmxpY1ZlcmlmaWVyKCk7XG4gICAgICAgICAgICBjYXNlIENSRURJVFNfUFJPR1JBTV9LRVlTLnRyYW5zZmVyX3B1YmxpYy5sb2NhdG9yOlxuICAgICAgICAgICAgICAgIHJldHVybiBwcm92aW5nS2V5LmlzVHJhbnNmZXJQdWJsaWNQcm92ZXIoKSAmJiB2ZXJpZnlpbmdLZXkuaXNUcmFuc2ZlclB1YmxpY1ZlcmlmaWVyKCk7XG4gICAgICAgICAgICBjYXNlIENSRURJVFNfUFJPR1JBTV9LRVlTLnRyYW5zZmVyX3B1YmxpY190b19wcml2YXRlLmxvY2F0b3I6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3ZpbmdLZXkuaXNUcmFuc2ZlclB1YmxpY1RvUHJpdmF0ZVByb3ZlcigpICYmIHZlcmlmeWluZ0tleS5pc1RyYW5zZmVyUHVibGljVG9Qcml2YXRlVmVyaWZpZXIoKTtcbiAgICAgICAgICAgIGNhc2UgQ1JFRElUU19QUk9HUkFNX0tFWVMudW5ib25kX3B1YmxpYy5sb2NhdG9yOlxuICAgICAgICAgICAgICAgIHJldHVybiBwcm92aW5nS2V5LmlzVW5ib25kUHVibGljUHJvdmVyKCkgJiYgdmVyaWZ5aW5nS2V5LmlzVW5ib25kUHVibGljVmVyaWZpZXIoKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBmZWVfcHJpdmF0ZSBmdW5jdGlvbiBrZXlzIGZyb20gdGhlIGNyZWRpdHMuYWxlbyBwcm9ncmFtLiBUaGUga2V5cyBtdXN0IGJlIGNhY2hlZCBwcmlvciB0byBjYWxsaW5nIHRoaXNcbiAgICAgKiBtZXRob2QgZm9yIGl0IHRvIHdvcmsuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxGdW5jdGlvbktleVBhaXI+fSBQcm92aW5nIGFuZCB2ZXJpZnlpbmcga2V5cyBmb3IgdGhlIGpvaW4gZnVuY3Rpb25cbiAgICAgKi9cbiAgICBmZWVQcml2YXRlS2V5cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnVuY3Rpb25LZXlzKE9mZmxpbmVTZWFyY2hQYXJhbXMuZmVlUHJpdmF0ZUtleVBhcmFtcygpKTtcbiAgICB9XG4gICAgO1xuICAgIC8qKlxuICAgICAqIEdldCBmZWVfcHVibGljIGZ1bmN0aW9uIGtleXMgZnJvbSB0aGUgY3JlZGl0cy5hbGVvIHByb2dyYW0uIFRoZSBrZXlzIG11c3QgYmUgY2FjaGVkIHByaW9yIHRvIGNhbGxpbmcgdGhpc1xuICAgICAqIG1ldGhvZCBmb3IgaXQgdG8gd29yay5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEZ1bmN0aW9uS2V5UGFpcj59IFByb3ZpbmcgYW5kIHZlcmlmeWluZyBrZXlzIGZvciB0aGUgam9pbiBmdW5jdGlvblxuICAgICAqL1xuICAgIGZlZVB1YmxpY0tleXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZ1bmN0aW9uS2V5cyhPZmZsaW5lU2VhcmNoUGFyYW1zLmZlZVB1YmxpY0tleVBhcmFtcygpKTtcbiAgICB9XG4gICAgO1xuICAgIC8qKlxuICAgICAqIEdldCBqb2luIGZ1bmN0aW9uIGtleXMgZnJvbSB0aGUgY3JlZGl0cy5hbGVvIHByb2dyYW0uIFRoZSBrZXlzIG11c3QgYmUgY2FjaGVkIHByaW9yIHRvIGNhbGxpbmcgdGhpc1xuICAgICAqIG1ldGhvZCBmb3IgaXQgdG8gd29yay5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEZ1bmN0aW9uS2V5UGFpcj59IFByb3ZpbmcgYW5kIHZlcmlmeWluZyBrZXlzIGZvciB0aGUgam9pbiBmdW5jdGlvblxuICAgICAqL1xuICAgIGpvaW5LZXlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mdW5jdGlvbktleXMoT2ZmbGluZVNlYXJjaFBhcmFtcy5qb2luS2V5UGFyYW1zKCkpO1xuICAgIH1cbiAgICA7XG4gICAgLyoqXG4gICAgICogR2V0IHNwbGl0IGZ1bmN0aW9uIGtleXMgZnJvbSB0aGUgY3JlZGl0cy5hbGVvIHByb2dyYW0uIFRoZSBrZXlzIG11c3QgYmUgY2FjaGVkIHByaW9yIHRvIGNhbGxpbmcgdGhpc1xuICAgICAqIG1ldGhvZCBmb3IgaXQgdG8gd29yay5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEZ1bmN0aW9uS2V5UGFpcj59IFByb3ZpbmcgYW5kIHZlcmlmeWluZyBrZXlzIGZvciB0aGUgam9pbiBmdW5jdGlvblxuICAgICAqL1xuICAgIHNwbGl0S2V5cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnVuY3Rpb25LZXlzKE9mZmxpbmVTZWFyY2hQYXJhbXMuc3BsaXRLZXlQYXJhbXMoKSk7XG4gICAgfVxuICAgIDtcbiAgICAvKipcbiAgICAgKiBHZXQga2V5cyBmb3IgYSB2YXJpYW50IG9mIHRoZSB0cmFuc2ZlciBmdW5jdGlvbiBmcm9tIHRoZSBjcmVkaXRzLmFsZW8gcHJvZ3JhbS5cbiAgICAgKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZpc2liaWxpdHkgVmlzaWJpbGl0eSBvZiB0aGUgdHJhbnNmZXIgZnVuY3Rpb24gKHByaXZhdGUsIHB1YmxpYywgcHJpdmF0ZVRvUHVibGljLCBwdWJsaWNUb1ByaXZhdGUpXG4gICAgICogQHJldHVybnMge1Byb21pc2U8RnVuY3Rpb25LZXlQYWlyPn0gUHJvdmluZyBhbmQgdmVyaWZ5aW5nIGtleXMgZm9yIHRoZSBzcGVjaWZpZWQgdHJhbnNmZXIgZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gQ3JlYXRlIGEgbmV3IE9mZmxpbmVLZXlQcm92aWRlclxuICAgICAqIGNvbnN0IG9mZmxpbmVLZXlQcm92aWRlciA9IG5ldyBPZmZsaW5lS2V5UHJvdmlkZXIoKTtcbiAgICAgKlxuICAgICAqIC8vIENhY2hlIHRoZSBrZXlzIGZvciBmdXR1cmUgdXNlIHdpdGggdGhlIG9mZmljaWFsIGxvY2F0b3JcbiAgICAgKiBjb25zdCB0cmFuc2ZlclB1YmxpY1Byb3ZpbmdLZXlCeXRlcyA9IGF3YWl0IHJlYWRCaW5hcnlGaWxlKCcuL3Jlc291cmNlcy90cmFuc2Zlcl9wdWJsaWMucHJvdmVyLmE3NDU2NWUnKTtcbiAgICAgKiBjb25zdCB0cmFuc2ZlclB1YmxpY1Byb3ZpbmdLZXkgPSBQcm92aW5nS2V5LmZyb21CeXRlcyh0cmFuc2ZlclB1YmxpY1Byb3ZpbmdLZXlCeXRlcyk7XG4gICAgICpcbiAgICAgKiAvLyBDYWNoZSB0aGUgdHJhbnNmZXJfcHVibGljIGtleXMgZm9yIGZ1dHVyZSB1c2Ugd2l0aCB0aGUgT2ZmbGluS2V5UHJvdmlkZXIncyBjb252ZW5pZW5jZSBtZXRob2QgZm9yXG4gICAgICogLy8gdHJhbnNmZXJfcHVibGljICh0aGUgdmVyaWZ5aW5nIGtleSB3aWxsIGJlIGNhY2hlZCBhdXRvbWF0aWNhbGx5KVxuICAgICAqIG9mZmxpbmVLZXlQcm92aWRlci5pbnNlcnRUcmFuc2ZlclB1YmxpY0tleXModHJhbnNmZXJQdWJsaWNQcm92aW5nS2V5KTtcbiAgICAgKlxuICAgICAqIC8vLyBXaGVuIHRoZXkncmUgbmVlZGVkLCByZXRyaWV2ZSB0aGUga2V5cyBmcm9tIHRoZSBjYWNoZVxuICAgICAqIGNvbnN0IFt0cmFuc2ZlclB1YmxpY1Byb3ZpbmdLZXksIHRyYW5zZmVyUHVibGljVmVyaWZ5aW5nS2V5XSA9IGF3YWl0IGtleVByb3ZpZGVyLnRyYW5zZmVyS2V5cyhcInB1YmxpY1wiKTtcbiAgICAgKi9cbiAgICB0cmFuc2ZlcktleXModmlzaWJpbGl0eSkge1xuICAgICAgICBpZiAoUFJJVkFURV9UUkFOU0ZFUi5oYXModmlzaWJpbGl0eSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZ1bmN0aW9uS2V5cyhPZmZsaW5lU2VhcmNoUGFyYW1zLnRyYW5zZmVyUHJpdmF0ZUtleVBhcmFtcygpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChQUklWQVRFX1RPX1BVQkxJQ19UUkFOU0ZFUi5oYXModmlzaWJpbGl0eSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZ1bmN0aW9uS2V5cyhPZmZsaW5lU2VhcmNoUGFyYW1zLnRyYW5zZmVyUHJpdmF0ZVRvUHVibGljS2V5UGFyYW1zKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFBVQkxJQ19UUkFOU0ZFUi5oYXModmlzaWJpbGl0eSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZ1bmN0aW9uS2V5cyhPZmZsaW5lU2VhcmNoUGFyYW1zLnRyYW5zZmVyUHVibGljS2V5UGFyYW1zKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFBVQkxJQ19UUkFOU0ZFUl9BU19TSUdORVIuaGFzKHZpc2liaWxpdHkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mdW5jdGlvbktleXMoT2ZmbGluZVNlYXJjaFBhcmFtcy50cmFuc2ZlclB1YmxpY0FzU2lnbmVyS2V5UGFyYW1zKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFBVQkxJQ19UT19QUklWQVRFX1RSQU5TRkVSLmhhcyh2aXNpYmlsaXR5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnVuY3Rpb25LZXlzKE9mZmxpbmVTZWFyY2hQYXJhbXMudHJhbnNmZXJQdWJsaWNUb1ByaXZhdGVLZXlQYXJhbXMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZpc2liaWxpdHkgdHlwZVwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICA7XG4gICAgLyoqXG4gICAgICogR2V0IHVuYm9uZF9wdWJsaWMgZnVuY3Rpb24ga2V5cyBmcm9tIHRoZSBjcmVkaXRzLmFsZW8gcHJvZ3JhbVxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8RnVuY3Rpb25LZXlQYWlyPn0gUHJvdmluZyBhbmQgdmVyaWZ5aW5nIGtleXMgZm9yIHRoZSBqb2luIGZ1bmN0aW9uXG4gICAgICovXG4gICAgYXN5bmMgdW5Cb25kUHVibGljS2V5cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnVuY3Rpb25LZXlzKE9mZmxpbmVTZWFyY2hQYXJhbXMudW5ib25kUHVibGljS2V5UGFyYW1zKCkpO1xuICAgIH1cbiAgICA7XG4gICAgLyoqXG4gICAgICogSW5zZXJ0IHRoZSBwcm92aW5nIGFuZCB2ZXJpZnlpbmcga2V5cyBmb3IgdGhlIGJvbmRfcHVibGljIGZ1bmN0aW9uIGludG8gdGhlIGNhY2hlLiBPbmx5IHRoZSBwcm92aW5nIGtleSBuZWVkc1xuICAgICAqIHRvIGJlIGluc2VydGVkLCB0aGUgdmVyaWZ5aW5nIGtleSBpcyBhdXRvbWF0aWNhbGx5IGluc2VydGVkIGJ5IHRoZSBTREsuIFRoaXMgZnVuY3Rpb24gd2lsbCBhdXRvbWF0aWNhbGx5IGNoZWNrXG4gICAgICogdGhhdCB0aGUga2V5cyBtYXRjaCB0aGUgZXhwZWN0ZWQgY2hlY2tzdW0gZm9yIGJvbmRfcHVibGljIGJlZm9yZSBpbnNlcnRpbmcgdGhlbSBpbnRvIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm92aW5nS2V5XG4gICAgICovXG4gICAgaW5zZXJ0Qm9uZFB1YmxpY0tleXMocHJvdmluZ0tleSkge1xuICAgICAgICBpZiAocHJvdmluZ0tleS5pc0JvbmRQdWJsaWNQcm92ZXIoKSkge1xuICAgICAgICAgICAgdGhpcy5jYWNoZS5zZXQoQ1JFRElUU19QUk9HUkFNX0tFWVMuYm9uZF9wdWJsaWMubG9jYXRvciwgW3Byb3ZpbmdLZXkudG9CeXRlcygpLCBWZXJpZnlpbmdLZXkuYm9uZFB1YmxpY1ZlcmlmaWVyKCkudG9CeXRlcygpXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0ZWQgdG8gaW5zZXJ0IGludmFsaWQgcHJvdmluZyBrZXlzIGZvciBib25kX3B1YmxpY1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgdGhlIHByb3ZpbmcgYW5kIHZlcmlmeWluZyBrZXlzIGZvciB0aGUgY2xhaW1fdW5ib25kX3B1YmxpYyBmdW5jdGlvbiBpbnRvIHRoZSBjYWNoZS4gT25seSB0aGUgcHJvdmluZyBrZXkgbmVlZHNcbiAgICAgKiB0byBiZSBpbnNlcnRlZCwgdGhlIHZlcmlmeWluZyBrZXkgaXMgYXV0b21hdGljYWxseSBpbnNlcnRlZCBieSB0aGUgU0RLLiBUaGlzIGZ1bmN0aW9uIHdpbGwgYXV0b21hdGljYWxseSBjaGVja1xuICAgICAqIHRoYXQgdGhlIGtleXMgbWF0Y2ggdGhlIGV4cGVjdGVkIGNoZWNrc3VtIGZvciBjbGFpbV91bmJvbmRfcHVibGljIGJlZm9yZSBpbnNlcnRpbmcgdGhlbSBpbnRvIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm92aW5nS2V5XG4gICAgICovXG4gICAgaW5zZXJ0Q2xhaW1VbmJvbmRQdWJsaWNLZXlzKHByb3ZpbmdLZXkpIHtcbiAgICAgICAgaWYgKHByb3ZpbmdLZXkuaXNDbGFpbVVuYm9uZFB1YmxpY1Byb3ZlcigpKSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlLnNldChDUkVESVRTX1BST0dSQU1fS0VZUy5jbGFpbV91bmJvbmRfcHVibGljLmxvY2F0b3IsIFtwcm92aW5nS2V5LnRvQnl0ZXMoKSwgVmVyaWZ5aW5nS2V5LmNsYWltVW5ib25kUHVibGljVmVyaWZpZXIoKS50b0J5dGVzKCldKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byBpbnNlcnQgaW52YWxpZCBwcm92aW5nIGtleXMgZm9yIGNsYWltX3VuYm9uZF9wdWJsaWNcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5zZXJ0IHRoZSBwcm92aW5nIGFuZCB2ZXJpZnlpbmcga2V5cyBmb3IgdGhlIGZlZV9wcml2YXRlIGZ1bmN0aW9uIGludG8gdGhlIGNhY2hlLiBPbmx5IHRoZSBwcm92aW5nIGtleSBuZWVkc1xuICAgICAqIHRvIGJlIGluc2VydGVkLCB0aGUgdmVyaWZ5aW5nIGtleSBpcyBhdXRvbWF0aWNhbGx5IGluc2VydGVkIGJ5IHRoZSBTREsuIFRoaXMgZnVuY3Rpb24gd2lsbCBhdXRvbWF0aWNhbGx5IGNoZWNrXG4gICAgICogdGhhdCB0aGUga2V5cyBtYXRjaCB0aGUgZXhwZWN0ZWQgY2hlY2tzdW0gZm9yIGZlZV9wcml2YXRlIGJlZm9yZSBpbnNlcnRpbmcgdGhlbSBpbnRvIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm92aW5nS2V5XG4gICAgICovXG4gICAgaW5zZXJ0RmVlUHJpdmF0ZUtleXMocHJvdmluZ0tleSkge1xuICAgICAgICBpZiAocHJvdmluZ0tleS5pc0ZlZVByaXZhdGVQcm92ZXIoKSkge1xuICAgICAgICAgICAgdGhpcy5jYWNoZS5zZXQoQ1JFRElUU19QUk9HUkFNX0tFWVMuZmVlX3ByaXZhdGUubG9jYXRvciwgW3Byb3ZpbmdLZXkudG9CeXRlcygpLCBWZXJpZnlpbmdLZXkuZmVlUHJpdmF0ZVZlcmlmaWVyKCkudG9CeXRlcygpXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0ZWQgdG8gaW5zZXJ0IGludmFsaWQgcHJvdmluZyBrZXlzIGZvciBmZWVfcHJpdmF0ZVwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgdGhlIHByb3ZpbmcgYW5kIHZlcmlmeWluZyBrZXlzIGZvciB0aGUgZmVlX3B1YmxpYyBmdW5jdGlvbiBpbnRvIHRoZSBjYWNoZS4gT25seSB0aGUgcHJvdmluZyBrZXkgbmVlZHNcbiAgICAgKiB0byBiZSBpbnNlcnRlZCwgdGhlIHZlcmlmeWluZyBrZXkgaXMgYXV0b21hdGljYWxseSBpbnNlcnRlZCBieSB0aGUgU0RLLiBUaGlzIGZ1bmN0aW9uIHdpbGwgYXV0b21hdGljYWxseSBjaGVja1xuICAgICAqIHRoYXQgdGhlIGtleXMgbWF0Y2ggdGhlIGV4cGVjdGVkIGNoZWNrc3VtIGZvciBmZWVfcHVibGljIGJlZm9yZSBpbnNlcnRpbmcgdGhlbSBpbnRvIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm92aW5nS2V5XG4gICAgICovXG4gICAgaW5zZXJ0RmVlUHVibGljS2V5cyhwcm92aW5nS2V5KSB7XG4gICAgICAgIGlmIChwcm92aW5nS2V5LmlzRmVlUHVibGljUHJvdmVyKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUuc2V0KENSRURJVFNfUFJPR1JBTV9LRVlTLmZlZV9wdWJsaWMubG9jYXRvciwgW3Byb3ZpbmdLZXkudG9CeXRlcygpLCBWZXJpZnlpbmdLZXkuZmVlUHVibGljVmVyaWZpZXIoKS50b0J5dGVzKCldKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byBpbnNlcnQgaW52YWxpZCBwcm92aW5nIGtleXMgZm9yIGZlZV9wdWJsaWNcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5zZXJ0IHRoZSBwcm92aW5nIGFuZCB2ZXJpZnlpbmcga2V5cyBmb3IgdGhlIGpvaW4gZnVuY3Rpb24gaW50byB0aGUgY2FjaGUuIE9ubHkgdGhlIHByb3Zpbmcga2V5IG5lZWRzXG4gICAgICogdG8gYmUgaW5zZXJ0ZWQsIHRoZSB2ZXJpZnlpbmcga2V5IGlzIGF1dG9tYXRpY2FsbHkgaW5zZXJ0ZWQgYnkgdGhlIFNESy4gVGhpcyBmdW5jdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgY2hlY2tcbiAgICAgKiB0aGF0IHRoZSBrZXlzIG1hdGNoIHRoZSBleHBlY3RlZCBjaGVja3N1bSBmb3Igam9pbiBiZWZvcmUgaW5zZXJ0aW5nIHRoZW0gaW50byB0aGUgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJvdmluZ0tleVxuICAgICAqL1xuICAgIGluc2VydEpvaW5LZXlzKHByb3ZpbmdLZXkpIHtcbiAgICAgICAgaWYgKHByb3ZpbmdLZXkuaXNKb2luUHJvdmVyKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUuc2V0KENSRURJVFNfUFJPR1JBTV9LRVlTLmpvaW4ubG9jYXRvciwgW3Byb3ZpbmdLZXkudG9CeXRlcygpLCBWZXJpZnlpbmdLZXkuam9pblZlcmlmaWVyKCkudG9CeXRlcygpXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0ZWQgdG8gaW5zZXJ0IGludmFsaWQgcHJvdmluZyBrZXlzIGZvciBqb2luXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluc2VydCB0aGUgcHJvdmluZyBhbmQgdmVyaWZ5aW5nIGtleXMgZm9yIHRoZSBzZXRfdmFsaWRhdG9yX3N0YXRlIGZ1bmN0aW9uIGludG8gdGhlIGNhY2hlLiBPbmx5IHRoZSBwcm92aW5nIGtleSBuZWVkc1xuICAgICAqIHRvIGJlIGluc2VydGVkLCB0aGUgdmVyaWZ5aW5nIGtleSBpcyBhdXRvbWF0aWNhbGx5IGluc2VydGVkIGJ5IHRoZSBTREsuIFRoaXMgZnVuY3Rpb24gd2lsbCBhdXRvbWF0aWNhbGx5IGNoZWNrXG4gICAgICogdGhhdCB0aGUga2V5cyBtYXRjaCB0aGUgZXhwZWN0ZWQgY2hlY2tzdW0gZm9yIHNldF92YWxpZGF0b3Jfc3RhdGUgYmVmb3JlIGluc2VydGluZyB0aGVtIGludG8gdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHByb3ZpbmdLZXlcbiAgICAgKi9cbiAgICBpbnNlcnRTZXRWYWxpZGF0b3JTdGF0ZUtleXMocHJvdmluZ0tleSkge1xuICAgICAgICBpZiAocHJvdmluZ0tleS5pc1NldFZhbGlkYXRvclN0YXRlUHJvdmVyKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUuc2V0KENSRURJVFNfUFJPR1JBTV9LRVlTLnNldF92YWxpZGF0b3Jfc3RhdGUubG9jYXRvciwgW3Byb3ZpbmdLZXkudG9CeXRlcygpLCBWZXJpZnlpbmdLZXkuc2V0VmFsaWRhdG9yU3RhdGVWZXJpZmllcigpLnRvQnl0ZXMoKV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdGVkIHRvIGluc2VydCBpbnZhbGlkIHByb3Zpbmcga2V5cyBmb3Igc2V0X3ZhbGlkYXRvcl9zdGF0ZVwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgdGhlIHByb3ZpbmcgYW5kIHZlcmlmeWluZyBrZXlzIGZvciB0aGUgc3BsaXQgZnVuY3Rpb24gaW50byB0aGUgY2FjaGUuIE9ubHkgdGhlIHByb3Zpbmcga2V5IG5lZWRzXG4gICAgICogdG8gYmUgaW5zZXJ0ZWQsIHRoZSB2ZXJpZnlpbmcga2V5IGlzIGF1dG9tYXRpY2FsbHkgaW5zZXJ0ZWQgYnkgdGhlIFNESy4gVGhpcyBmdW5jdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgY2hlY2tcbiAgICAgKiB0aGF0IHRoZSBrZXlzIG1hdGNoIHRoZSBleHBlY3RlZCBjaGVja3N1bSBmb3Igc3BsaXQgYmVmb3JlIGluc2VydGluZyB0aGVtIGludG8gdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHByb3ZpbmdLZXlcbiAgICAgKi9cbiAgICBpbnNlcnRTcGxpdEtleXMocHJvdmluZ0tleSkge1xuICAgICAgICBpZiAocHJvdmluZ0tleS5pc1NwbGl0UHJvdmVyKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUuc2V0KENSRURJVFNfUFJPR1JBTV9LRVlTLnNwbGl0LmxvY2F0b3IsIFtwcm92aW5nS2V5LnRvQnl0ZXMoKSwgVmVyaWZ5aW5nS2V5LnNwbGl0VmVyaWZpZXIoKS50b0J5dGVzKCldKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byBpbnNlcnQgaW52YWxpZCBwcm92aW5nIGtleXMgZm9yIHNwbGl0XCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluc2VydCB0aGUgcHJvdmluZyBhbmQgdmVyaWZ5aW5nIGtleXMgZm9yIHRoZSB0cmFuc2Zlcl9wcml2YXRlIGZ1bmN0aW9uIGludG8gdGhlIGNhY2hlLiBPbmx5IHRoZSBwcm92aW5nIGtleSBuZWVkc1xuICAgICAqIHRvIGJlIGluc2VydGVkLCB0aGUgdmVyaWZ5aW5nIGtleSBpcyBhdXRvbWF0aWNhbGx5IGluc2VydGVkIGJ5IHRoZSBTREsuIFRoaXMgZnVuY3Rpb24gd2lsbCBhdXRvbWF0aWNhbGx5IGNoZWNrXG4gICAgICogdGhhdCB0aGUga2V5cyBtYXRjaCB0aGUgZXhwZWN0ZWQgY2hlY2tzdW0gZm9yIHRyYW5zZmVyX3ByaXZhdGUgYmVmb3JlIGluc2VydGluZyB0aGVtIGludG8gdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHByb3ZpbmdLZXlcbiAgICAgKi9cbiAgICBpbnNlcnRUcmFuc2ZlclByaXZhdGVLZXlzKHByb3ZpbmdLZXkpIHtcbiAgICAgICAgaWYgKHByb3ZpbmdLZXkuaXNUcmFuc2ZlclByaXZhdGVQcm92ZXIoKSkge1xuICAgICAgICAgICAgdGhpcy5jYWNoZS5zZXQoQ1JFRElUU19QUk9HUkFNX0tFWVMudHJhbnNmZXJfcHJpdmF0ZS5sb2NhdG9yLCBbcHJvdmluZ0tleS50b0J5dGVzKCksIFZlcmlmeWluZ0tleS50cmFuc2ZlclByaXZhdGVWZXJpZmllcigpLnRvQnl0ZXMoKV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdGVkIHRvIGluc2VydCBpbnZhbGlkIHByb3Zpbmcga2V5cyBmb3IgdHJhbnNmZXJfcHJpdmF0ZVwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgdGhlIHByb3ZpbmcgYW5kIHZlcmlmeWluZyBrZXlzIGZvciB0aGUgdHJhbnNmZXJfcHJpdmF0ZV90b19wdWJsaWMgZnVuY3Rpb24gaW50byB0aGUgY2FjaGUuIE9ubHkgdGhlIHByb3Zpbmcga2V5IG5lZWRzXG4gICAgICogdG8gYmUgaW5zZXJ0ZWQsIHRoZSB2ZXJpZnlpbmcga2V5IGlzIGF1dG9tYXRpY2FsbHkgaW5zZXJ0ZWQgYnkgdGhlIFNESy4gVGhpcyBmdW5jdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgY2hlY2tcbiAgICAgKiB0aGF0IHRoZSBrZXlzIG1hdGNoIHRoZSBleHBlY3RlZCBjaGVja3N1bSBmb3IgdHJhbnNmZXJfcHJpdmF0ZV90b19wdWJsaWMgYmVmb3JlIGluc2VydGluZyB0aGVtIGludG8gdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHByb3ZpbmdLZXlcbiAgICAgKi9cbiAgICBpbnNlcnRUcmFuc2ZlclByaXZhdGVUb1B1YmxpY0tleXMocHJvdmluZ0tleSkge1xuICAgICAgICBpZiAocHJvdmluZ0tleS5pc1RyYW5zZmVyUHJpdmF0ZVRvUHVibGljUHJvdmVyKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUuc2V0KENSRURJVFNfUFJPR1JBTV9LRVlTLnRyYW5zZmVyX3ByaXZhdGVfdG9fcHVibGljLmxvY2F0b3IsIFtwcm92aW5nS2V5LnRvQnl0ZXMoKSwgVmVyaWZ5aW5nS2V5LnRyYW5zZmVyUHJpdmF0ZVRvUHVibGljVmVyaWZpZXIoKS50b0J5dGVzKCldKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byBpbnNlcnQgaW52YWxpZCBwcm92aW5nIGtleXMgZm9yIHRyYW5zZmVyX3ByaXZhdGVfdG9fcHVibGljXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluc2VydCB0aGUgcHJvdmluZyBhbmQgdmVyaWZ5aW5nIGtleXMgZm9yIHRoZSB0cmFuc2Zlcl9wdWJsaWMgZnVuY3Rpb24gaW50byB0aGUgY2FjaGUuIE9ubHkgdGhlIHByb3Zpbmcga2V5IG5lZWRzXG4gICAgICogdG8gYmUgaW5zZXJ0ZWQsIHRoZSB2ZXJpZnlpbmcga2V5IGlzIGF1dG9tYXRpY2FsbHkgaW5zZXJ0ZWQgYnkgdGhlIFNESy4gVGhpcyBmdW5jdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgY2hlY2tcbiAgICAgKiB0aGF0IHRoZSBrZXlzIG1hdGNoIHRoZSBleHBlY3RlZCBjaGVja3N1bSBmb3IgdHJhbnNmZXJfcHVibGljIGJlZm9yZSBpbnNlcnRpbmcgdGhlbSBpbnRvIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm92aW5nS2V5XG4gICAgICovXG4gICAgaW5zZXJ0VHJhbnNmZXJQdWJsaWNLZXlzKHByb3ZpbmdLZXkpIHtcbiAgICAgICAgaWYgKHByb3ZpbmdLZXkuaXNUcmFuc2ZlclB1YmxpY1Byb3ZlcigpKSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlLnNldChDUkVESVRTX1BST0dSQU1fS0VZUy50cmFuc2Zlcl9wdWJsaWMubG9jYXRvciwgW3Byb3ZpbmdLZXkudG9CeXRlcygpLCBWZXJpZnlpbmdLZXkudHJhbnNmZXJQdWJsaWNWZXJpZmllcigpLnRvQnl0ZXMoKV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdGVkIHRvIGluc2VydCBpbnZhbGlkIHByb3Zpbmcga2V5cyBmb3IgdHJhbnNmZXJfcHVibGljXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluc2VydCB0aGUgcHJvdmluZyBhbmQgdmVyaWZ5aW5nIGtleXMgZm9yIHRoZSB0cmFuc2Zlcl9wdWJsaWNfdG9fcHJpdmF0ZSBmdW5jdGlvbiBpbnRvIHRoZSBjYWNoZS4gT25seSB0aGUgcHJvdmluZyBrZXkgbmVlZHNcbiAgICAgKiB0byBiZSBpbnNlcnRlZCwgdGhlIHZlcmlmeWluZyBrZXkgaXMgYXV0b21hdGljYWxseSBpbnNlcnRlZCBieSB0aGUgU0RLLiBUaGlzIGZ1bmN0aW9uIHdpbGwgYXV0b21hdGljYWxseSBjaGVja1xuICAgICAqIHRoYXQgdGhlIGtleXMgbWF0Y2ggdGhlIGV4cGVjdGVkIGNoZWNrc3VtIGZvciB0cmFuc2Zlcl9wdWJsaWNfdG9fcHJpdmF0ZSBiZWZvcmUgaW5zZXJ0aW5nIHRoZW0gaW50byB0aGUgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJvdmluZ0tleVxuICAgICAqL1xuICAgIGluc2VydFRyYW5zZmVyUHVibGljVG9Qcml2YXRlS2V5cyhwcm92aW5nS2V5KSB7XG4gICAgICAgIGlmIChwcm92aW5nS2V5LmlzVHJhbnNmZXJQdWJsaWNUb1ByaXZhdGVQcm92ZXIoKSkge1xuICAgICAgICAgICAgdGhpcy5jYWNoZS5zZXQoQ1JFRElUU19QUk9HUkFNX0tFWVMudHJhbnNmZXJfcHVibGljX3RvX3ByaXZhdGUubG9jYXRvciwgW3Byb3ZpbmdLZXkudG9CeXRlcygpLCBWZXJpZnlpbmdLZXkudHJhbnNmZXJQdWJsaWNUb1ByaXZhdGVWZXJpZmllcigpLnRvQnl0ZXMoKV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdGVkIHRvIGluc2VydCBpbnZhbGlkIHByb3Zpbmcga2V5cyBmb3IgdHJhbnNmZXJfcHVibGljX3RvX3ByaXZhdGVcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5zZXJ0VW5ib25kUHVibGljS2V5cyhwcm92aW5nS2V5KSB7XG4gICAgICAgIGlmIChwcm92aW5nS2V5LmlzVW5ib25kUHVibGljUHJvdmVyKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUuc2V0KENSRURJVFNfUFJPR1JBTV9LRVlTLnVuYm9uZF9wdWJsaWMubG9jYXRvciwgW3Byb3ZpbmdLZXkudG9CeXRlcygpLCBWZXJpZnlpbmdLZXkudW5ib25kUHVibGljVmVyaWZpZXIoKS50b0J5dGVzKCldKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byBpbnNlcnQgaW52YWxpZCBwcm92aW5nIGtleXMgZm9yIHVuYm9uZF9wdWJsaWNcIik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogQSByZWNvcmQgcHJvdmlkZXIgaW1wbGVtZW50YXRpb24gdGhhdCB1c2VzIHRoZSBvZmZpY2lhbCBBbGVvIEFQSSB0byBmaW5kIHJlY29yZHMgZm9yIHVzYWdlIGluIHByb2dyYW0gZXhlY3V0aW9uIGFuZFxuICogZGVwbG95bWVudCwgd2FsbGV0IGZ1bmN0aW9uYWxpdHksIGFuZCBvdGhlciB1c2UgY2FzZXMuXG4gKi9cbmNsYXNzIE5ldHdvcmtSZWNvcmRQcm92aWRlciB7XG4gICAgYWNjb3VudDtcbiAgICBuZXR3b3JrQ2xpZW50O1xuICAgIGNvbnN0cnVjdG9yKGFjY291bnQsIG5ldHdvcmtDbGllbnQpIHtcbiAgICAgICAgdGhpcy5hY2NvdW50ID0gYWNjb3VudDtcbiAgICAgICAgdGhpcy5uZXR3b3JrQ2xpZW50ID0gbmV0d29ya0NsaWVudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBhY2NvdW50IHVzZWQgdG8gc2VhcmNoIGZvciByZWNvcmRzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FjY291bnR9IGFjY291bnQgVGhlIGFjY291bnQgdG8gdXNlIGZvciBzZWFyY2hpbmcgZm9yIHJlY29yZHNcbiAgICAgKi9cbiAgICBzZXRBY2NvdW50KGFjY291bnQpIHtcbiAgICAgICAgdGhpcy5hY2NvdW50ID0gYWNjb3VudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZCBhIGxpc3Qgb2YgY3JlZGl0IHJlY29yZHMgd2l0aCBhIGdpdmVuIG51bWJlciBvZiBtaWNyb2NyZWRpdHMgYnkgdmlhIHRoZSBvZmZpY2lhbCBBbGVvIEFQSVxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gbWljcm9jcmVkaXRzIFRoZSBudW1iZXIgb2YgbWljcm9jcmVkaXRzIHRvIHNlYXJjaCBmb3JcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHVuc3BlbnQgV2hldGhlciBvciBub3QgdGhlIHJlY29yZCBpcyB1bnNwZW50XG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gbm9uY2VzIE5vbmNlcyBvZiByZWNvcmRzIGFscmVhZHkgZm91bmQgc28gdGhhdCB0aGV5IGFyZSBub3QgZm91bmQgYWdhaW5cbiAgICAgKiBAcGFyYW0ge1JlY29yZFNlYXJjaFBhcmFtc30gc2VhcmNoUGFyYW1ldGVycyBBZGRpdGlvbmFsIHBhcmFtZXRlcnMgdG8gc2VhcmNoIGZvclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFJlY29yZFBsYWludGV4dD59IFRoZSByZWNvcmQgaWYgZm91bmQsIG90aGVyd2lzZSBhbiBlcnJvclxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBDcmVhdGUgYSBuZXcgTmV0d29ya1JlY29yZFByb3ZpZGVyXG4gICAgICogY29uc3QgbmV0d29ya0NsaWVudCA9IG5ldyBBbGVvTmV0d29ya0NsaWVudChcImh0dHBzOi8vYXBpLmV4cGxvcmVyLnByb3ZhYmxlLmNvbS92MVwiKTtcbiAgICAgKiBjb25zdCBrZXlQcm92aWRlciA9IG5ldyBBbGVvS2V5UHJvdmlkZXIoKTtcbiAgICAgKiBjb25zdCByZWNvcmRQcm92aWRlciA9IG5ldyBOZXR3b3JrUmVjb3JkUHJvdmlkZXIoYWNjb3VudCwgbmV0d29ya0NsaWVudCk7XG4gICAgICpcbiAgICAgKiAvLyBUaGUgcmVjb3JkIHByb3ZpZGVyIGNhbiBiZSB1c2VkIHRvIGZpbmQgcmVjb3JkcyB3aXRoIGEgZ2l2ZW4gbnVtYmVyIG9mIG1pY3JvY3JlZGl0c1xuICAgICAqIGNvbnN0IHJlY29yZCA9IGF3YWl0IHJlY29yZFByb3ZpZGVyLmZpbmRDcmVkaXRzUmVjb3JkKDUwMDAsIHRydWUsIFtdKTtcbiAgICAgKlxuICAgICAqIC8vIFdoZW4gYSByZWNvcmQgaXMgZm91bmQgYnV0IG5vdCB5ZXQgdXNlZCwgaXQncyBub25jZSBzaG91bGQgYmUgYWRkZWQgdG8gdGhlIG5vbmNlcyBwYXJhbWV0ZXIgc28gdGhhdCBpdCBpcyBub3RcbiAgICAgKiAvLyBmb3VuZCBhZ2FpbiBpZiBhIHN1YnNlcXVlbnQgc2VhcmNoIGlzIHBlcmZvcm1lZFxuICAgICAqIGNvbnN0IHJlY29yZHMgPSBhd2FpdCByZWNvcmRQcm92aWRlci5maW5kQ3JlZGl0c1JlY29yZHMoNTAwMCwgdHJ1ZSwgW3JlY29yZC5ub25jZSgpXSk7XG4gICAgICpcbiAgICAgKiAvLyBXaGVuIHRoZSBwcm9ncmFtIG1hbmFnZXIgaXMgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgcmVjb3JkIHByb3ZpZGVyIGl0IHdpbGwgYmUgdXNlZCB0byBmaW5kIGF1dG9tYXRpY2FsbHkgZmluZFxuICAgICAqIC8vIGZlZSByZWNvcmRzIGFuZCBhbW91bnQgcmVjb3JkcyBmb3IgdmFsdWUgdHJhbnNmZXJzIHNvIHRoYXQgdGhleSBkbyBub3QgbmVlZCB0byBiZSBzcGVjaWZpZWQgbWFudWFsbHlcbiAgICAgKiBjb25zdCBwcm9ncmFtTWFuYWdlciA9IG5ldyBQcm9ncmFtTWFuYWdlcihcImh0dHBzOi8vYXBpLmV4cGxvcmVyLnByb3ZhYmxlLmNvbS92MVwiLCBrZXlQcm92aWRlciwgcmVjb3JkUHJvdmlkZXIpO1xuICAgICAqIHByb2dyYW1NYW5hZ2VyLnRyYW5zZmVyKDEsIFwiYWxlbzE2NnE2d3c2Njg4Y3VnN3F4d2U3bmhjdGpweW15ZHd6eTJoN3JzY2ZtYXRxbWZ3bmp2Z2dxY2FkMGF0XCIsIFwicHVibGljXCIsIDAuNSk7XG4gICAgICpcbiAgICAgKiAqL1xuICAgIGFzeW5jIGZpbmRDcmVkaXRzUmVjb3JkcyhtaWNyb2NyZWRpdHMsIHVuc3BlbnQsIG5vbmNlcywgc2VhcmNoUGFyYW1ldGVycykge1xuICAgICAgICBsZXQgc3RhcnRIZWlnaHQgPSAwO1xuICAgICAgICBsZXQgZW5kSGVpZ2h0ID0gMDtcbiAgICAgICAgbGV0IG1heEFtb3VudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHNlYXJjaFBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIGlmIChcInN0YXJ0SGVpZ2h0XCIgaW4gc2VhcmNoUGFyYW1ldGVycyAmJiB0eXBlb2Ygc2VhcmNoUGFyYW1ldGVyc1tcImVuZEhlaWdodFwiXSA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRIZWlnaHQgPSBzZWFyY2hQYXJhbWV0ZXJzW1wic3RhcnRIZWlnaHRcIl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXCJlbmRIZWlnaHRcIiBpbiBzZWFyY2hQYXJhbWV0ZXJzICYmIHR5cGVvZiBzZWFyY2hQYXJhbWV0ZXJzW1wiZW5kSGVpZ2h0XCJdID09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICBlbmRIZWlnaHQgPSBzZWFyY2hQYXJhbWV0ZXJzW1wiZW5kSGVpZ2h0XCJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFwiYW1vdW50c1wiIGluIHNlYXJjaFBhcmFtZXRlcnMgJiYgQXJyYXkuaXNBcnJheShzZWFyY2hQYXJhbWV0ZXJzW1wiYW1vdW50c1wiXSkgJiYgc2VhcmNoUGFyYW1ldGVyc1tcImFtb3VudFwiXS5ldmVyeSgoaXRlbSkgPT4gdHlwZW9mIGl0ZW0gPT09ICdudW1iZXInKSkge1xuICAgICAgICAgICAgICAgIG1pY3JvY3JlZGl0cyA9IHNlYXJjaFBhcmFtZXRlcnNbXCJhbW91bnRzXCJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFwibWF4QW1vdW50XCIgaW4gc2VhcmNoUGFyYW1ldGVycyAmJiB0eXBlb2Ygc2VhcmNoUGFyYW1ldGVyc1tcIm1heEFtb3VudFwiXSA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgbWF4QW1vdW50ID0gc2VhcmNoUGFyYW1ldGVyc1tcIm1heEFtb3VudFwiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcInVuc3BlbnRcIiBpbiBzZWFyY2hQYXJhbWV0ZXJzICYmIHR5cGVvZiBzZWFyY2hQYXJhbWV0ZXJzW1widW5zcGVudFwiXSA9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgICAgIHVuc3BlbnQgPSBzZWFyY2hQYXJhbWV0ZXJzW1widW5zcGVudFwiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgZW5kIGhlaWdodCBpcyBub3Qgc3BlY2lmaWVkLCB1c2UgdGhlIGN1cnJlbnQgYmxvY2sgaGVpZ2h0XG4gICAgICAgIGlmIChlbmRIZWlnaHQgPT0gMCkge1xuICAgICAgICAgICAgY29uc3QgZW5kID0gYXdhaXQgdGhpcy5uZXR3b3JrQ2xpZW50LmdldExhdGVzdEhlaWdodCgpO1xuICAgICAgICAgICAgZW5kSGVpZ2h0ID0gZW5kO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZSBzdGFydCBoZWlnaHQgaXMgZ3JlYXRlciB0aGFuIHRoZSBlbmQgaGVpZ2h0LCB0aHJvdyBhbiBlcnJvclxuICAgICAgICBpZiAoc3RhcnRIZWlnaHQgPj0gZW5kSGVpZ2h0KSB7XG4gICAgICAgICAgICBsb2dBbmRUaHJvdyhcIlN0YXJ0IGhlaWdodCBtdXN0IGJlIGxlc3MgdGhhbiBlbmQgaGVpZ2h0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLm5ldHdvcmtDbGllbnQuZmluZFJlY29yZHMoc3RhcnRIZWlnaHQsIGVuZEhlaWdodCwgdW5zcGVudCwgW1wiY3JlZGl0cy5hbGVvXCJdLCBtaWNyb2NyZWRpdHMsIG1heEFtb3VudCwgbm9uY2VzLCB0aGlzLmFjY291bnQucHJpdmF0ZUtleSgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZCBhIGNyZWRpdCByZWNvcmQgd2l0aCBhIGdpdmVuIG51bWJlciBvZiBtaWNyb2NyZWRpdHMgYnkgdmlhIHRoZSBvZmZpY2lhbCBBbGVvIEFQSVxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pY3JvY3JlZGl0cyBUaGUgbnVtYmVyIG9mIG1pY3JvY3JlZGl0cyB0byBzZWFyY2ggZm9yXG4gICAgICogQHBhcmFtIHtib29sZWFufSB1bnNwZW50IFdoZXRoZXIgb3Igbm90IHRoZSByZWNvcmQgaXMgdW5zcGVudFxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IG5vbmNlcyBOb25jZXMgb2YgcmVjb3JkcyBhbHJlYWR5IGZvdW5kIHNvIHRoYXQgdGhleSBhcmUgbm90IGZvdW5kIGFnYWluXG4gICAgICogQHBhcmFtIHtSZWNvcmRTZWFyY2hQYXJhbXN9IHNlYXJjaFBhcmFtZXRlcnMgQWRkaXRpb25hbCBwYXJhbWV0ZXJzIHRvIHNlYXJjaCBmb3JcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxSZWNvcmRQbGFpbnRleHQ+fSBUaGUgcmVjb3JkIGlmIGZvdW5kLCBvdGhlcndpc2UgYW4gZXJyb3JcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gQ3JlYXRlIGEgbmV3IE5ldHdvcmtSZWNvcmRQcm92aWRlclxuICAgICAqIGNvbnN0IG5ldHdvcmtDbGllbnQgPSBuZXcgQWxlb05ldHdvcmtDbGllbnQoXCJodHRwczovL2FwaS5leHBsb3Jlci5wcm92YWJsZS5jb20vdjFcIik7XG4gICAgICogY29uc3Qga2V5UHJvdmlkZXIgPSBuZXcgQWxlb0tleVByb3ZpZGVyKCk7XG4gICAgICogY29uc3QgcmVjb3JkUHJvdmlkZXIgPSBuZXcgTmV0d29ya1JlY29yZFByb3ZpZGVyKGFjY291bnQsIG5ldHdvcmtDbGllbnQpO1xuICAgICAqXG4gICAgICogLy8gVGhlIHJlY29yZCBwcm92aWRlciBjYW4gYmUgdXNlZCB0byBmaW5kIHJlY29yZHMgd2l0aCBhIGdpdmVuIG51bWJlciBvZiBtaWNyb2NyZWRpdHNcbiAgICAgKiBjb25zdCByZWNvcmQgPSBhd2FpdCByZWNvcmRQcm92aWRlci5maW5kQ3JlZGl0c1JlY29yZCg1MDAwLCB0cnVlLCBbXSk7XG4gICAgICpcbiAgICAgKiAvLyBXaGVuIGEgcmVjb3JkIGlzIGZvdW5kIGJ1dCBub3QgeWV0IHVzZWQsIGl0J3Mgbm9uY2Ugc2hvdWxkIGJlIGFkZGVkIHRvIHRoZSBub25jZXMgcGFyYW1ldGVyIHNvIHRoYXQgaXQgaXMgbm90XG4gICAgICogLy8gZm91bmQgYWdhaW4gaWYgYSBzdWJzZXF1ZW50IHNlYXJjaCBpcyBwZXJmb3JtZWRcbiAgICAgKiBjb25zdCByZWNvcmRzID0gYXdhaXQgcmVjb3JkUHJvdmlkZXIuZmluZENyZWRpdHNSZWNvcmRzKDUwMDAsIHRydWUsIFtyZWNvcmQubm9uY2UoKV0pO1xuICAgICAqXG4gICAgICogLy8gV2hlbiB0aGUgcHJvZ3JhbSBtYW5hZ2VyIGlzIGluaXRpYWxpemVkIHdpdGggdGhlIHJlY29yZCBwcm92aWRlciBpdCB3aWxsIGJlIHVzZWQgdG8gZmluZCBhdXRvbWF0aWNhbGx5IGZpbmRcbiAgICAgKiAvLyBmZWUgcmVjb3JkcyBhbmQgYW1vdW50IHJlY29yZHMgZm9yIHZhbHVlIHRyYW5zZmVycyBzbyB0aGF0IHRoZXkgZG8gbm90IG5lZWQgdG8gYmUgc3BlY2lmaWVkIG1hbnVhbGx5XG4gICAgICogY29uc3QgcHJvZ3JhbU1hbmFnZXIgPSBuZXcgUHJvZ3JhbU1hbmFnZXIoXCJodHRwczovL2FwaS5leHBsb3Jlci5wcm92YWJsZS5jb20vdjFcIiwga2V5UHJvdmlkZXIsIHJlY29yZFByb3ZpZGVyKTtcbiAgICAgKiBwcm9ncmFtTWFuYWdlci50cmFuc2ZlcigxLCBcImFsZW8xNjZxNnd3NjY4OGN1ZzdxeHdlN25oY3RqcHlteWR3enkyaDdyc2NmbWF0cW1md25qdmdncWNhZDBhdFwiLCBcInB1YmxpY1wiLCAwLjUpO1xuICAgICAqL1xuICAgIGFzeW5jIGZpbmRDcmVkaXRzUmVjb3JkKG1pY3JvY3JlZGl0cywgdW5zcGVudCwgbm9uY2VzLCBzZWFyY2hQYXJhbWV0ZXJzKSB7XG4gICAgICAgIGxldCByZWNvcmRzID0gbnVsbDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlY29yZHMgPSBhd2FpdCB0aGlzLmZpbmRDcmVkaXRzUmVjb3JkcyhbbWljcm9jcmVkaXRzXSwgdW5zcGVudCwgbm9uY2VzLCBzZWFyY2hQYXJhbWV0ZXJzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJObyByZWNvcmRzIGZvdW5kIHdpdGggZXJyb3I6XCIsIGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWNvcmRzICYmIHJlY29yZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlY29yZHNbMF07XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5lcnJvcihcIlJlY29yZCBub3QgZm91bmQgd2l0aCBlcnJvcjpcIiwgcmVjb3Jkcyk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlY29yZCBub3QgZm91bmRcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbmQgYW4gYXJiaXRyYXJ5IHJlY29yZC4gV0FSTklORzogVGhpcyBmdW5jdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgeWV0IGFuZCB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgICAqL1xuICAgIGFzeW5jIGZpbmRSZWNvcmQodW5zcGVudCwgbm9uY2VzLCBzZWFyY2hQYXJhbWV0ZXJzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZCBtdWx0aXBsZSByZWNvcmRzIGZyb20gYSBzcGVjaWZpZWQgcHJvZ3JhbS5cbiAgICAgKi9cbiAgICBhc3luYyBmaW5kUmVjb3Jkcyh1bnNwZW50LCBub25jZXMsIHNlYXJjaFBhcmFtZXRlcnMpIHtcbiAgICAgICAgbGV0IHN0YXJ0SGVpZ2h0ID0gMDtcbiAgICAgICAgbGV0IGVuZEhlaWdodCA9IDA7XG4gICAgICAgIGxldCBhbW91bnRzID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgbWF4QW1vdW50ID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgcHJvZ3JhbXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChzZWFyY2hQYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICBpZiAoXCJzdGFydEhlaWdodFwiIGluIHNlYXJjaFBhcmFtZXRlcnMgJiYgdHlwZW9mIHNlYXJjaFBhcmFtZXRlcnNbXCJlbmRIZWlnaHRcIl0gPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHN0YXJ0SGVpZ2h0ID0gc2VhcmNoUGFyYW1ldGVyc1tcInN0YXJ0SGVpZ2h0XCJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFwiZW5kSGVpZ2h0XCIgaW4gc2VhcmNoUGFyYW1ldGVycyAmJiB0eXBlb2Ygc2VhcmNoUGFyYW1ldGVyc1tcImVuZEhlaWdodFwiXSA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgZW5kSGVpZ2h0ID0gc2VhcmNoUGFyYW1ldGVyc1tcImVuZEhlaWdodFwiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcImFtb3VudHNcIiBpbiBzZWFyY2hQYXJhbWV0ZXJzICYmIEFycmF5LmlzQXJyYXkoc2VhcmNoUGFyYW1ldGVyc1tcImFtb3VudHNcIl0pICYmIHNlYXJjaFBhcmFtZXRlcnNbXCJhbW91bnRzXCJdLmV2ZXJ5KChpdGVtKSA9PiB0eXBlb2YgaXRlbSA9PT0gJ251bWJlcicpKSB7XG4gICAgICAgICAgICAgICAgYW1vdW50cyA9IHNlYXJjaFBhcmFtZXRlcnNbXCJhbW91bnRzXCJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFwibWF4QW1vdW50XCIgaW4gc2VhcmNoUGFyYW1ldGVycyAmJiB0eXBlb2Ygc2VhcmNoUGFyYW1ldGVyc1tcIm1heEFtb3VudFwiXSA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgbWF4QW1vdW50ID0gc2VhcmNoUGFyYW1ldGVyc1tcIm1heEFtb3VudFwiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcIm5vbmNlc1wiIGluIHNlYXJjaFBhcmFtZXRlcnMgJiYgQXJyYXkuaXNBcnJheShzZWFyY2hQYXJhbWV0ZXJzW1wibm9uY2VzXCJdKSAmJiBzZWFyY2hQYXJhbWV0ZXJzW1wibm9uY2VzXCJdLmV2ZXJ5KChpdGVtKSA9PiB0eXBlb2YgaXRlbSA9PT0gXCJzdHJpbmdcIikpIHtcbiAgICAgICAgICAgICAgICBub25jZXMgPSBzZWFyY2hQYXJhbWV0ZXJzW1wibm9uY2VzXCJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFwicHJvZ3JhbVwiIGluIHNlYXJjaFBhcmFtZXRlcnMgJiYgdHlwZW9mIHNlYXJjaFBhcmFtZXRlcnNbXCJwcm9ncmFtXCJdID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBwcm9ncmFtcyA9IFtzZWFyY2hQYXJhbWV0ZXJzW1wicHJvZ3JhbVwiXV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXCJwcm9ncmFtc1wiIGluIHNlYXJjaFBhcmFtZXRlcnMgJiYgQXJyYXkuaXNBcnJheShzZWFyY2hQYXJhbWV0ZXJzW1wicHJvZ3JhbXNcIl0pICYmIHNlYXJjaFBhcmFtZXRlcnNbXCJwcm9ncmFtc1wiXS5ldmVyeSgoaXRlbSkgPT4gdHlwZW9mIGl0ZW0gPT09IFwic3RyaW5nXCIpKSB7XG4gICAgICAgICAgICAgICAgcHJvZ3JhbXMgPSBzZWFyY2hQYXJhbWV0ZXJzW1wicHJvZ3JhbXNcIl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXCJ1bnNwZW50XCIgaW4gc2VhcmNoUGFyYW1ldGVycyAmJiB0eXBlb2Ygc2VhcmNoUGFyYW1ldGVyc1tcInVuc3BlbnRcIl0gPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgICAgICB1bnNwZW50ID0gc2VhcmNoUGFyYW1ldGVyc1tcInVuc3BlbnRcIl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlIGVuZCBoZWlnaHQgaXMgbm90IHNwZWNpZmllZCwgdXNlIHRoZSBjdXJyZW50IGJsb2NrIGhlaWdodFxuICAgICAgICBpZiAoZW5kSGVpZ2h0ID09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IGF3YWl0IHRoaXMubmV0d29ya0NsaWVudC5nZXRMYXRlc3RIZWlnaHQoKTtcbiAgICAgICAgICAgIGVuZEhlaWdodCA9IGVuZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgc3RhcnQgaGVpZ2h0IGlzIGdyZWF0ZXIgdGhhbiB0aGUgZW5kIGhlaWdodCwgdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgaWYgKHN0YXJ0SGVpZ2h0ID49IGVuZEhlaWdodCkge1xuICAgICAgICAgICAgbG9nQW5kVGhyb3coXCJTdGFydCBoZWlnaHQgbXVzdCBiZSBsZXNzIHRoYW4gZW5kIGhlaWdodFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5uZXR3b3JrQ2xpZW50LmZpbmRSZWNvcmRzKHN0YXJ0SGVpZ2h0LCBlbmRIZWlnaHQsIHVuc3BlbnQsIHByb2dyYW1zLCBhbW91bnRzLCBtYXhBbW91bnQsIG5vbmNlcywgdGhpcy5hY2NvdW50LnByaXZhdGVLZXkoKSk7XG4gICAgfVxufVxuLyoqXG4gKiBCbG9ja0hlaWdodFNlYXJjaCBpcyBhIFJlY29yZFNlYXJjaFBhcmFtcyBpbXBsZW1lbnRhdGlvbiB0aGF0IGFsbG93cyBmb3Igc2VhcmNoaW5nIGZvciByZWNvcmRzIHdpdGhpbiBhIGdpdmVuXG4gKiBibG9jayBoZWlnaHQgcmFuZ2UuXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENyZWF0ZSBhIG5ldyBCbG9ja0hlaWdodFNlYXJjaFxuICogY29uc3QgcGFyYW1zID0gbmV3IEJsb2NrSGVpZ2h0U2VhcmNoKDg5OTk1LCA5OTk5NSk7XG4gKlxuICogLy8gQ3JlYXRlIGEgbmV3IE5ldHdvcmtSZWNvcmRQcm92aWRlclxuICogY29uc3QgbmV0d29ya0NsaWVudCA9IG5ldyBBbGVvTmV0d29ya0NsaWVudChcImh0dHBzOi8vYXBpLmV4cGxvcmVyLnByb3ZhYmxlLmNvbS92MVwiKTtcbiAqIGNvbnN0IGtleVByb3ZpZGVyID0gbmV3IEFsZW9LZXlQcm92aWRlcigpO1xuICogY29uc3QgcmVjb3JkUHJvdmlkZXIgPSBuZXcgTmV0d29ya1JlY29yZFByb3ZpZGVyKGFjY291bnQsIG5ldHdvcmtDbGllbnQpO1xuICpcbiAqIC8vIFRoZSByZWNvcmQgcHJvdmlkZXIgY2FuIGJlIHVzZWQgdG8gZmluZCByZWNvcmRzIHdpdGggYSBnaXZlbiBudW1iZXIgb2YgbWljcm9jcmVkaXRzIGFuZCB0aGUgYmxvY2sgaGVpZ2h0IHNlYXJjaFxuICogLy8gY2FuIGJlIHVzZWQgdG8gZmluZCByZWNvcmRzIHdpdGhpbiBhIGdpdmVuIGJsb2NrIGhlaWdodCByYW5nZVxuICogY29uc3QgcmVjb3JkID0gYXdhaXQgcmVjb3JkUHJvdmlkZXIuZmluZENyZWRpdHNSZWNvcmQoNTAwMCwgdHJ1ZSwgW10sIHBhcmFtcyk7XG4gKlxuICovXG5jbGFzcyBCbG9ja0hlaWdodFNlYXJjaCB7XG4gICAgc3RhcnRIZWlnaHQ7XG4gICAgZW5kSGVpZ2h0O1xuICAgIGNvbnN0cnVjdG9yKHN0YXJ0SGVpZ2h0LCBlbmRIZWlnaHQpIHtcbiAgICAgICAgdGhpcy5zdGFydEhlaWdodCA9IHN0YXJ0SGVpZ2h0O1xuICAgICAgICB0aGlzLmVuZEhlaWdodCA9IGVuZEhlaWdodDtcbiAgICB9XG59XG5cbi8vIEV4cGVyaW1lbnRhbCBleGFtcGxlIHdoZXJlIFNESyBtYW5hZ2VzIHdvcmtlclxubGV0IHNpbmdsZXRvbldvcmtlciA9IG51bGw7XG5jb25zdCBjcmVhdGVBbGVvV29ya2VyID0gKCkgPT4ge1xuICAgIGlmICghc2luZ2xldG9uV29ya2VyKSB7XG4gICAgICAgIGNvbnN0IHdvcmtlciA9IG5ldyBXb3JrZXIobmV3IFVSTChcIndvcmtlci5qc1wiLCBpbXBvcnQubWV0YS51cmwpLCB7XG4gICAgICAgICAgICB0eXBlOiBcIm1vZHVsZVwiLFxuICAgICAgICB9KTtcbiAgICAgICAgc2luZ2xldG9uV29ya2VyID0gd3JhcCh3b3JrZXIpO1xuICAgIH1cbiAgICByZXR1cm4gc2luZ2xldG9uV29ya2VyO1xufTtcblxuLy8gQFRPRE86IFRoaXMgZnVuY3Rpb24gaXMgbm8gbG9uZ2VyIG5lZWRlZCwgcmVtb3ZlIGl0LlxuYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZVdhc20oKSB7XG4gICAgY29uc29sZS53YXJuKFwiaW5pdGlhbGl6ZVdhc20gaXMgZGVwcmVjYXRlZCwgeW91IG5vIGxvbmdlciBuZWVkIHRvIHVzZSBpdFwiKTtcbn1cblxuZXhwb3J0IHsgQWNjb3VudCwgQmxvY2tIZWlnaHRTZWFyY2gsIENSRURJVFNfUFJPR1JBTV9LRVlTLCBOZXR3b3JrUmVjb3JkUHJvdmlkZXIsIE9mZmxpbmVLZXlQcm92aWRlciwgT2ZmbGluZVNlYXJjaFBhcmFtcywgUFJJVkFURV9UT19QVUJMSUNfVFJBTlNGRVIsIFBSSVZBVEVfVFJBTlNGRVIsIFBVQkxJQ19UT19QUklWQVRFX1RSQU5TRkVSLCBQVUJMSUNfVFJBTlNGRVIsIFBVQkxJQ19UUkFOU0ZFUl9BU19TSUdORVIsIGNyZWF0ZUFsZW9Xb3JrZXIsIGluaXRpYWxpemVXYXNtLCBsb2dBbmRUaHJvdyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJvd3Nlci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/browser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/node-polyfill.js?3032":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/node-polyfill.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_proposals_json_parse_with_source_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/proposals/json-parse-with-source.js */ \"(ssr)/./node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/proposals/json-parse-with-source.js\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var mime_lite__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! mime/lite */ \"(ssr)/./node_modules/.pnpm/mime@4.0.6/node_modules/mime/dist/src/index_lite.js\");\n/* harmony import */ var xmlhttprequest_ssl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! xmlhttprequest-ssl */ \"(ssr)/./node_modules/.pnpm/xmlhttprequest-ssl@3.1.0/node_modules/xmlhttprequest-ssl/lib/XMLHttpRequest.js\");\n/* harmony import */ var sync_request__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! sync-request */ \"(ssr)/./node_modules/.pnpm/sync-request@6.1.0/node_modules/sync-request/lib/index.js\");\n/* harmony import */ var node_worker_threads__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\n/* harmony import */ var node_os__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! node:os */ \"node:os\");\n/* provided dependency */ var process = __webpack_require__(/*! process/browser */ \"(ssr)/./node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js\");\n\n\n\n\n\n\n\n\n\nif (globalThis.crypto == null) {\n    globalThis.crypto = node_crypto__WEBPACK_IMPORTED_MODULE_1__.webcrypto;\n}\n\nconst oldFetch = globalThis.fetch;\nlet supports = null;\nasync function checkFetch() {\n    try {\n        await oldFetch(new URL(\"file:\"));\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n}\nasync function supportsFetch() {\n    if (supports === null) {\n        supports = checkFetch();\n    }\n    return await supports;\n}\n// We always polyfill fetch because Node's fetch doesn't support file URLs.\nglobalThis.fetch = async function (resource, options) {\n    const request = new Request(resource, options);\n    const url = new URL(request.url);\n    if (!(await supportsFetch()) && url.protocol === \"file:\") {\n        const readStream = node_fs__WEBPACK_IMPORTED_MODULE_2__.createReadStream(url);\n        const headers = {};\n        const type = mime_lite__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getType(url.pathname);\n        if (type) {\n            headers[\"Content-Type\"] = type;\n        }\n        return new Response(readStream, {\n            status: 200,\n            statusText: \"OK\",\n            headers,\n        });\n    }\n    else {\n        return await oldFetch(request);\n    }\n};\n\n// @ts-ignore\nif (globalThis.XMLHttpRequest == null) {\n    globalThis.XMLHttpRequest = class extends xmlhttprequest_ssl__WEBPACK_IMPORTED_MODULE_4__.XMLHttpRequest {\n        // We have to override the methods inside of the `constructor`\n        // because `xmlhttprequest-ssl` doesn't use a regular class,\n        // instead it defines all of the methods inside of the constructor.\n        constructor(...args) {\n            super(...args);\n            const open = this.open;\n            const send = this.send;\n            let _async = true;\n            let _url = null;\n            let _mime = \"text/xml\";\n            function reset() {\n                _async = true;\n                _url = null;\n                _mime = \"text/xml\";\n            }\n            this.open = function (method, url, async, user, password) {\n                // Special behavior for synchronous requests\n                if (method === \"GET\" && !async && !user && !password) {\n                    _async = false;\n                    _url = url;\n                    // Default to the normal polyfill for async requests\n                }\n                else {\n                    reset();\n                    return open.call(this, method, url, async, user, password);\n                }\n            };\n            this.send = function (data) {\n                if (_async) {\n                    return send.call(this, data);\n                    // Use `sync-request` for synchronous requests.\n                }\n                else {\n                    const response = sync_request__WEBPACK_IMPORTED_MODULE_5__(\"GET\", _url, {\n                        headers: {\n                            \"Content-Type\": _mime,\n                        }\n                    });\n                    const buffer = response.body.buffer;\n                    const responseText = new TextDecoder(\"iso-8859-5\", { fatal: true }).decode(buffer);\n                    this.status = 200;\n                    this.response = this.responseText = responseText;\n                    reset();\n                }\n            };\n            this.overrideMimeType = function (mime) {\n                _mime = mime;\n            };\n        }\n    };\n}\n\n// This is technically not a part of the Worker polyfill,\n// but Workers are used for multi-threading, so this is often\n// needed when writing Worker code.\nif (globalThis.navigator == null) {\n    globalThis.navigator = {\n        hardwareConcurrency: node_os__WEBPACK_IMPORTED_MODULE_7__.cpus().length,\n    };\n}\nif (globalThis.Worker == null) {\n    globalThis.Worker = class Worker extends EventTarget {\n        _worker;\n        constructor(url, options) {\n            super();\n            if (url instanceof URL) {\n                if (url.protocol !== \"file:\") {\n                    throw new Error(\"Worker only supports file: URLs\");\n                }\n                url = url.href;\n            }\n            else {\n                throw new Error(\"Filepaths are unreliable, use `new URL(\\\"...\\\", import.meta.url)` instead.\");\n            }\n            if (!options || options.type !== \"module\") {\n                throw new Error(\"Workers must use \\`type: \\\"module\\\"\\`\");\n            }\n            const code = `\n                import(\"node:worker_threads\")\n                    .then(({ workerData }) => {\n                        return import(workerData.polyfill)\n                            .then(() => import(workerData.url))\n                    })\n                    .catch((e) => {\n                        // TODO maybe it should send a message to the parent?\n                        console.error(e.stack);\n                    });\n            `;\n            this._worker = new node_worker_threads__WEBPACK_IMPORTED_MODULE_6__.Worker(code, {\n                eval: true,\n                workerData: {\n                    url,\n                    polyfill: /* asset import */ new __webpack_require__.U(__webpack_require__(/*! node-polyfill.js */ \"(ssr)/./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/node-polyfill.js?8a58\")).href,\n                },\n            });\n            this._worker.on(\"message\", (data) => {\n                this.dispatchEvent(new MessageEvent(\"message\", { data }));\n            });\n            this._worker.on(\"messageerror\", (error) => {\n                throw new Error(\"UNIMPLEMENTED\");\n            });\n            this._worker.on(\"error\", (error) => {\n                // TODO attach the error to the event somehow\n                const event = new Event(\"error\");\n                this.dispatchEvent(event);\n            });\n        }\n        set onmessage(f) {\n            throw new Error(\"UNIMPLEMENTED\");\n        }\n        set onmessageerror(f) {\n            throw new Error(\"UNIMPLEMENTED\");\n        }\n        set onerror(f) {\n            throw new Error(\"UNIMPLEMENTED\");\n        }\n        postMessage(value, transfer) {\n            this._worker.postMessage(value, transfer);\n        }\n        terminate() {\n            this._worker.terminate();\n        }\n        // This is Node-specific, it allows the process to exit\n        // even if the Worker is still running.\n        unref() {\n            this._worker.unref();\n        }\n    };\n}\nif (!node_worker_threads__WEBPACK_IMPORTED_MODULE_6__.isMainThread) {\n    const globals = globalThis;\n    // This is used to create the onmessage, onmessageerror, and onerror setters\n    const makeSetter = (prop, event) => {\n        let oldvalue;\n        Object.defineProperty(globals, prop, {\n            get() {\n                return oldvalue;\n            },\n            set(value) {\n                if (oldvalue) {\n                    globals.removeEventListener(event, oldvalue);\n                }\n                oldvalue = value;\n                if (oldvalue) {\n                    globals.addEventListener(event, oldvalue);\n                }\n            },\n        });\n    };\n    // This makes sure that `f` is only run once\n    const memoize = (f) => {\n        let run = false;\n        return () => {\n            if (!run) {\n                run = true;\n                f();\n            }\n        };\n    };\n    // We only start listening for messages / errors when the worker calls addEventListener\n    const startOnMessage = memoize(() => {\n        node_worker_threads__WEBPACK_IMPORTED_MODULE_6__.parentPort.on(\"message\", (data) => {\n            workerEvents.dispatchEvent(new MessageEvent(\"message\", { data }));\n        });\n    });\n    const startOnMessageError = memoize(() => {\n        throw new Error(\"UNIMPLEMENTED\");\n    });\n    const startOnError = memoize(() => {\n        node_worker_threads__WEBPACK_IMPORTED_MODULE_6__.parentPort.on(\"error\", (data) => {\n            workerEvents.dispatchEvent(new Event(\"error\"));\n        });\n    });\n    // Node workers don't have top-level events, so we have to make our own\n    const workerEvents = new EventTarget();\n    globals.close = () => {\n        process.exit();\n    };\n    globals.addEventListener = (type, callback, options) => {\n        workerEvents.addEventListener(type, callback, options);\n        if (type === \"message\") {\n            startOnMessage();\n        }\n        else if (type === \"messageerror\") {\n            startOnMessageError();\n        }\n        else if (type === \"error\") {\n            startOnError();\n        }\n    };\n    globals.removeEventListener = (type, callback, options) => {\n        workerEvents.removeEventListener(type, callback, options);\n    };\n    function postMessage(value, transfer) {\n        node_worker_threads__WEBPACK_IMPORTED_MODULE_6__.parentPort.postMessage(value, transfer);\n    }\n    globals.postMessage = postMessage;\n    makeSetter(\"onmessage\", \"message\");\n    makeSetter(\"onmessageerror\", \"messageerror\");\n    makeSetter(\"onerror\", \"error\");\n}\n\nif (!globalThis.self) {\n    globalThis.self = globalThis;\n}\n//# sourceMappingURL=node-polyfill.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/node-polyfill.js?3032\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/node-polyfill.js?8a58":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/node-polyfill.js ***!
  \*************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "static/media/node-polyfill.65393b57.js";

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/node.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/node.js ***!
  \****************************************************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* reexport safe */ _browser_js__WEBPACK_IMPORTED_MODULE_1__.Account),\n/* harmony export */   Address: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.Address),\n/* harmony export */   AleoKeyProvider: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.A),\n/* harmony export */   AleoKeyProviderParams: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.a),\n/* harmony export */   AleoNetworkClient: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.b),\n/* harmony export */   BHP1024: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.BHP1024),\n/* harmony export */   BHP256: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.BHP256),\n/* harmony export */   BHP512: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.BHP512),\n/* harmony export */   BHP768: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.BHP768),\n/* harmony export */   BlockHeightSearch: () => (/* reexport safe */ _browser_js__WEBPACK_IMPORTED_MODULE_1__.BlockHeightSearch),\n/* harmony export */   CREDITS_PROGRAM_KEYS: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.C),\n/* harmony export */   Ciphertext: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.Ciphertext),\n/* harmony export */   ComputeKey: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.ComputeKey),\n/* harmony export */   ExecutionResponse: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.ExecutionResponse),\n/* harmony export */   Field: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.Field),\n/* harmony export */   FunctionExecution: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.Execution),\n/* harmony export */   Group: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.Group),\n/* harmony export */   KEY_STORE: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.K),\n/* harmony export */   NetworkRecordProvider: () => (/* reexport safe */ _browser_js__WEBPACK_IMPORTED_MODULE_1__.NetworkRecordProvider),\n/* harmony export */   OfflineKeyProvider: () => (/* reexport safe */ _browser_js__WEBPACK_IMPORTED_MODULE_1__.OfflineKeyProvider),\n/* harmony export */   OfflineQuery: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.OfflineQuery),\n/* harmony export */   OfflineSearchParams: () => (/* reexport safe */ _browser_js__WEBPACK_IMPORTED_MODULE_1__.OfflineSearchParams),\n/* harmony export */   PRIVATE_TO_PUBLIC_TRANSFER: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.d),\n/* harmony export */   PRIVATE_TRANSFER: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.c),\n/* harmony export */   PRIVATE_TRANSFER_TYPES: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.e),\n/* harmony export */   PUBLIC_TO_PRIVATE_TRANSFER: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.h),\n/* harmony export */   PUBLIC_TRANSFER: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.f),\n/* harmony export */   PUBLIC_TRANSFER_AS_SIGNER: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.g),\n/* harmony export */   Pedersen128: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.Pedersen128),\n/* harmony export */   Pedersen64: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.Pedersen64),\n/* harmony export */   Plaintext: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.Plaintext),\n/* harmony export */   Poseidon2: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.Poseidon2),\n/* harmony export */   Poseidon4: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.Poseidon4),\n/* harmony export */   Poseidon8: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.Poseidon8),\n/* harmony export */   PrivateKey: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.PrivateKey),\n/* harmony export */   PrivateKeyCiphertext: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.PrivateKeyCiphertext),\n/* harmony export */   Program: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.Program),\n/* harmony export */   ProgramManager: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.P),\n/* harmony export */   ProgramManagerBase: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.ProgramManager),\n/* harmony export */   ProvingKey: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.ProvingKey),\n/* harmony export */   RecordCiphertext: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.RecordCiphertext),\n/* harmony export */   RecordPlaintext: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.RecordPlaintext),\n/* harmony export */   Scalar: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.Scalar),\n/* harmony export */   Signature: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.Signature),\n/* harmony export */   Transaction: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.Transaction),\n/* harmony export */   Transition: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.Transition),\n/* harmony export */   VALID_TRANSFER_TYPES: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.V),\n/* harmony export */   VerifyingKey: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.VerifyingKey),\n/* harmony export */   ViewKey: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.ViewKey),\n/* harmony export */   createAleoWorker: () => (/* reexport safe */ _browser_js__WEBPACK_IMPORTED_MODULE_1__.createAleoWorker),\n/* harmony export */   initThreadPool: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.initThreadPool),\n/* harmony export */   initializeWasm: () => (/* reexport safe */ _browser_js__WEBPACK_IMPORTED_MODULE_1__.initializeWasm),\n/* harmony export */   logAndThrow: () => (/* reexport safe */ _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.l),\n/* harmony export */   verifyFunctionExecution: () => (/* reexport safe */ _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__.verifyFunctionExecution)\n/* harmony export */ });\n/* harmony import */ var _node_polyfill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node-polyfill.js */ \"(ssr)/./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/node-polyfill.js?3032\");\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./browser.js */ \"(ssr)/./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/browser.js\");\n/* harmony import */ var _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./program-manager-CjvnOyfn.js */ \"(ssr)/./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/program-manager-CjvnOyfn.js\");\n/* harmony import */ var _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @provablehq/wasm/testnet.js */ \"(ssr)/./node_modules/.pnpm/@provablehq+wasm@0.8.6/node_modules/@provablehq/wasm/dist/testnet/index.js\");\n/* harmony import */ var core_js_proposals_json_parse_with_source_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/proposals/json-parse-with-source.js */ \"(ssr)/./node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/proposals/json-parse-with-source.js\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var mime_lite__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! mime/lite */ \"(ssr)/./node_modules/.pnpm/mime@4.0.6/node_modules/mime/dist/src/index_lite.js\");\n/* harmony import */ var xmlhttprequest_ssl__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! xmlhttprequest-ssl */ \"(ssr)/./node_modules/.pnpm/xmlhttprequest-ssl@3.1.0/node_modules/xmlhttprequest-ssl/lib/XMLHttpRequest.js\");\n/* harmony import */ var sync_request__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! sync-request */ \"(ssr)/./node_modules/.pnpm/sync-request@6.1.0/node_modules/sync-request/lib/index.js\");\n/* harmony import */ var node_worker_threads__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\n/* harmony import */ var node_os__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! node:os */ \"node:os\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_browser_js__WEBPACK_IMPORTED_MODULE_1__, _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__, _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__]);\n([_browser_js__WEBPACK_IMPORTED_MODULE_1__, _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__, _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=node.js.map\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHByb3ZhYmxlaHErc2RrQDAuOC42L25vZGVfbW9kdWxlcy9AcHJvdmFibGVocS9zZGsvZGlzdC90ZXN0bmV0L25vZGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTRCO0FBQ2dJO0FBQ3NQO0FBQzZGO0FBQzFiO0FBQ2hDO0FBQ0o7QUFDRTtBQUNTO0FBQ047QUFDTztBQUNaO0FBQ0E7QUFDakIiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXJuYW1lL2FsZW8vcmF0ZS1saW1pdGluZy1udWxsaWZpZXIvcmxuLW1lc3NhZ2UtYm9hcmQvbm9kZV9tb2R1bGVzLy5wbnBtL0Bwcm92YWJsZWhxK3Nka0AwLjguNi9ub2RlX21vZHVsZXMvQHByb3ZhYmxlaHEvc2RrL2Rpc3QvdGVzdG5ldC9ub2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi9ub2RlLXBvbHlmaWxsLmpzJztcbmV4cG9ydCB7IEFjY291bnQsIEJsb2NrSGVpZ2h0U2VhcmNoLCBOZXR3b3JrUmVjb3JkUHJvdmlkZXIsIE9mZmxpbmVLZXlQcm92aWRlciwgT2ZmbGluZVNlYXJjaFBhcmFtcywgY3JlYXRlQWxlb1dvcmtlciwgaW5pdGlhbGl6ZVdhc20gfSBmcm9tICcuL2Jyb3dzZXIuanMnO1xuZXhwb3J0IHsgQSBhcyBBbGVvS2V5UHJvdmlkZXIsIGEgYXMgQWxlb0tleVByb3ZpZGVyUGFyYW1zLCBiIGFzIEFsZW9OZXR3b3JrQ2xpZW50LCBDIGFzIENSRURJVFNfUFJPR1JBTV9LRVlTLCBLIGFzIEtFWV9TVE9SRSwgZCBhcyBQUklWQVRFX1RPX1BVQkxJQ19UUkFOU0ZFUiwgYyBhcyBQUklWQVRFX1RSQU5TRkVSLCBlIGFzIFBSSVZBVEVfVFJBTlNGRVJfVFlQRVMsIGggYXMgUFVCTElDX1RPX1BSSVZBVEVfVFJBTlNGRVIsIGYgYXMgUFVCTElDX1RSQU5TRkVSLCBnIGFzIFBVQkxJQ19UUkFOU0ZFUl9BU19TSUdORVIsIFAgYXMgUHJvZ3JhbU1hbmFnZXIsIFYgYXMgVkFMSURfVFJBTlNGRVJfVFlQRVMsIGwgYXMgbG9nQW5kVGhyb3cgfSBmcm9tICcuL3Byb2dyYW0tbWFuYWdlci1DanZuT3lmbi5qcyc7XG5leHBvcnQgeyBBZGRyZXNzLCBCSFAxMDI0LCBCSFAyNTYsIEJIUDUxMiwgQkhQNzY4LCBDaXBoZXJ0ZXh0LCBDb21wdXRlS2V5LCBFeGVjdXRpb25SZXNwb25zZSwgRmllbGQsIEV4ZWN1dGlvbiBhcyBGdW5jdGlvbkV4ZWN1dGlvbiwgR3JvdXAsIE9mZmxpbmVRdWVyeSwgUGVkZXJzZW4xMjgsIFBlZGVyc2VuNjQsIFBsYWludGV4dCwgUG9zZWlkb24yLCBQb3NlaWRvbjQsIFBvc2VpZG9uOCwgUHJpdmF0ZUtleSwgUHJpdmF0ZUtleUNpcGhlcnRleHQsIFByb2dyYW0sIFByb2dyYW1NYW5hZ2VyIGFzIFByb2dyYW1NYW5hZ2VyQmFzZSwgUHJvdmluZ0tleSwgUmVjb3JkQ2lwaGVydGV4dCwgUmVjb3JkUGxhaW50ZXh0LCBTY2FsYXIsIFNpZ25hdHVyZSwgVHJhbnNhY3Rpb24sIFRyYW5zaXRpb24sIFZlcmlmeWluZ0tleSwgVmlld0tleSwgaW5pdFRocmVhZFBvb2wsIHZlcmlmeUZ1bmN0aW9uRXhlY3V0aW9uIH0gZnJvbSAnQHByb3ZhYmxlaHEvd2FzbS90ZXN0bmV0LmpzJztcbmltcG9ydCAnY29yZS1qcy9wcm9wb3NhbHMvanNvbi1wYXJzZS13aXRoLXNvdXJjZS5qcyc7XG5pbXBvcnQgJ25vZGU6Y3J5cHRvJztcbmltcG9ydCAnbm9kZTpmcyc7XG5pbXBvcnQgJ21pbWUvbGl0ZSc7XG5pbXBvcnQgJ3htbGh0dHByZXF1ZXN0LXNzbCc7XG5pbXBvcnQgJ3N5bmMtcmVxdWVzdCc7XG5pbXBvcnQgJ25vZGU6d29ya2VyX3RocmVhZHMnO1xuaW1wb3J0ICdub2RlOm9zJztcbmltcG9ydCAnY29tbGluayc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/program-manager-CjvnOyfn.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/program-manager-CjvnOyfn.js ***!
  \************************************************************************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ AleoKeyProvider),\n/* harmony export */   C: () => (/* binding */ CREDITS_PROGRAM_KEYS),\n/* harmony export */   K: () => (/* binding */ KEY_STORE),\n/* harmony export */   P: () => (/* binding */ ProgramManager),\n/* harmony export */   V: () => (/* binding */ VALID_TRANSFER_TYPES),\n/* harmony export */   a: () => (/* binding */ AleoKeyProviderParams),\n/* harmony export */   b: () => (/* binding */ AleoNetworkClient),\n/* harmony export */   c: () => (/* binding */ PRIVATE_TRANSFER),\n/* harmony export */   d: () => (/* binding */ PRIVATE_TO_PUBLIC_TRANSFER),\n/* harmony export */   e: () => (/* binding */ PRIVATE_TRANSFER_TYPES),\n/* harmony export */   f: () => (/* binding */ PUBLIC_TRANSFER),\n/* harmony export */   g: () => (/* binding */ PUBLIC_TRANSFER_AS_SIGNER),\n/* harmony export */   h: () => (/* binding */ PUBLIC_TO_PRIVATE_TRANSFER),\n/* harmony export */   l: () => (/* binding */ logAndThrow)\n/* harmony export */ });\n/* harmony import */ var _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @provablehq/wasm/testnet.js */ \"(ssr)/./node_modules/.pnpm/@provablehq+wasm@0.8.6/node_modules/@provablehq/wasm/dist/testnet/index.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__]);\n_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nfunction logAndThrow(message) {\n    console.error(message);\n    throw new Error(message);\n}\nfunction parseJSON(json) {\n    function revive(key, value, context) {\n        if (Number.isInteger(value)) {\n            return BigInt(context.source);\n        }\n        else {\n            return value;\n        }\n    }\n    return JSON.parse(json, revive);\n}\nasync function get(url, options) {\n    const response = await fetch(url, options);\n    if (!response.ok) {\n        throw new Error(response.status + \" could not get URL \" + url);\n    }\n    return response;\n}\nasync function post(url, options) {\n    options.method = \"POST\";\n    const response = await fetch(url, options);\n    if (!response.ok) {\n        throw new Error(response.status + \" could not post URL \" + url);\n    }\n    return response;\n}\n\n/**\n * Client library that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this\n * allow users to query public information from the Aleo blockchain and submit transactions to the network.\n *\n * @param {string} host\n * @example\n * // Connection to a local node\n * const localNetworkClient = new AleoNetworkClient(\"http://localhost:3030\");\n *\n * // Connection to a public beacon node\n * const account = Account.fromCiphertext(process.env.ciphertext, process.env.password);\n * const publicnetworkClient = new AleoNetworkClient(\"http://localhost:3030\", undefined, account);\n */\nclass AleoNetworkClient {\n    host;\n    headers;\n    account;\n    constructor(host, options) {\n        this.host = host + \"/testnet\";\n        if (options && options.headers) {\n            this.headers = options.headers;\n        }\n        else {\n            this.headers = {\n                // This is replaced by the actual version by a Rollup plugin\n                \"X-Aleo-SDK-Version\": \"0.8.6\",\n            };\n        }\n    }\n    /**\n     * Set an account to use in networkClient calls\n     *\n     * @param {Account} account\n     * @example\n     * const account = new Account();\n     * networkClient.setAccount(account);\n     */\n    setAccount(account) {\n        this.account = account;\n    }\n    /**\n     * Return the Aleo account used in the networkClient\n     *\n     * @example\n     * const account = networkClient.getAccount();\n     */\n    getAccount() {\n        return this.account;\n    }\n    /**\n     * Set a new host for the networkClient\n     *\n     * @param {string} host The address of a node hosting the Aleo API\n     * @param host\n     */\n    setHost(host) {\n        this.host = host + \"/testnet\";\n    }\n    /**\n     * Fetches data from the Aleo network and returns it as a JSON object.\n     *\n     * @param url\n     */\n    async fetchData(url = \"/\") {\n        try {\n            return parseJSON(await this.fetchRaw(url));\n        }\n        catch (error) {\n            throw new Error(`Error fetching data: ${error}`);\n        }\n    }\n    /**\n     * Fetches data from the Aleo network and returns it as an unparsed string.\n     *\n     * This method should be used when it is desired to reconstitute data returned\n     * from the network into a WASM object.\n     *\n     * @param url\n     */\n    async fetchRaw(url = \"/\") {\n        try {\n            const response = await get(this.host + url, {\n                headers: this.headers\n            });\n            return await response.text();\n        }\n        catch (error) {\n            throw new Error(`Error fetching data: ${error}`);\n        }\n    }\n    /**\n     * Attempt to find records in the Aleo blockchain.\n     *\n     * @param {number} startHeight - The height at which to start searching for unspent records\n     * @param {number} endHeight - The height at which to stop searching for unspent records\n     * @param {boolean} unspent - Whether to search for unspent records only\n     * @param {string[]} programs - The program(s) to search for unspent records in\n     * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n     * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n     * @param {string[]} nonces - The nonces of already found records to exclude from the search\n     * @param {string | PrivateKey} privateKey - An optional private key to use to find unspent records.\n     *\n     * @example\n     * // Find specific amounts\n     * const startHeight = 500000;\n     * const amounts = [600000, 1000000];\n     * const records = networkClient.findRecords(startHeight, undefined, true, [\"credits.aleo\"] amounts);\n     *\n     * // Find specific amounts with a maximum number of cumulative microcredits\n     * const maxMicrocredits = 100000;\n     * const records = networkClient.findRecords(startHeight, undefined, true, [\"credits.aleo\"] undefined, maxMicrocredits);\n     */\n    async findRecords(startHeight, endHeight, unspent = false, programs, amounts, maxMicrocredits, nonces, privateKey) {\n        nonces = nonces || [];\n        // Ensure start height is not negative\n        if (startHeight < 0) {\n            throw new Error(\"Start height must be greater than or equal to 0\");\n        }\n        // Initialize search parameters\n        const records = new Array();\n        let start;\n        let end;\n        let resolvedPrivateKey;\n        let failures = 0;\n        let totalRecordValue = BigInt(0);\n        let latestHeight;\n        // Ensure a private key is present to find owned records\n        if (typeof privateKey === \"undefined\") {\n            if (typeof this.account === \"undefined\") {\n                throw new Error(\"Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient\");\n            }\n            else {\n                resolvedPrivateKey = this.account._privateKey;\n            }\n        }\n        else {\n            try {\n                resolvedPrivateKey = privateKey instanceof _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.PrivateKey ? privateKey : _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.PrivateKey.from_string(privateKey);\n            }\n            catch (error) {\n                throw new Error(\"Error parsing private key provided.\");\n            }\n        }\n        const viewKey = resolvedPrivateKey.to_view_key();\n        // Get the latest height to ensure the range being searched is valid\n        try {\n            const blockHeight = await this.getLatestHeight();\n            if (typeof blockHeight === \"number\") {\n                latestHeight = blockHeight;\n            }\n            else {\n                throw new Error(`Error fetching latest block height: Expected type 'number' got '${typeof blockHeight}'`);\n            }\n        }\n        catch (error) {\n            throw new Error(`Error fetching latest block height: ${error}`);\n        }\n        // If no end height is specified or is greater than the latest height, set the end height to the latest height\n        if (typeof endHeight === \"number\" && endHeight <= latestHeight) {\n            end = endHeight;\n        }\n        else {\n            end = latestHeight;\n        }\n        // If the starting is greater than the ending height, return an error\n        if (startHeight > end) {\n            throw new Error(\"Start height must be less than or equal to end height.\");\n        }\n        // Iterate through blocks in reverse order in chunks of 50\n        while (end > startHeight) {\n            start = end - 50;\n            if (start < startHeight) {\n                start = startHeight;\n            }\n            try {\n                // Get 50 blocks (or the difference between the start and end if less than 50)\n                const blocks = await this.getBlockRange(start, end);\n                end = start;\n                // Iterate through blocks to find unspent records\n                for (let i = 0; i < blocks.length; i++) {\n                    const block = blocks[i];\n                    const transactions = block.transactions;\n                    if (!(typeof transactions === \"undefined\")) {\n                        for (let j = 0; j < transactions.length; j++) {\n                            const confirmedTransaction = transactions[j];\n                            // Search for unspent records in execute transactions of credits.aleo\n                            if (confirmedTransaction.type == \"execute\") {\n                                const transaction = confirmedTransaction.transaction;\n                                if (transaction.execution && !(typeof transaction.execution.transitions == \"undefined\")) {\n                                    for (let k = 0; k < transaction.execution.transitions.length; k++) {\n                                        const transition = transaction.execution.transitions[k];\n                                        // Only search for unspent records in the specified programs.\n                                        if (!(typeof programs === \"undefined\")) {\n                                            if (!programs.includes(transition.program)) {\n                                                continue;\n                                            }\n                                        }\n                                        if (!(typeof transition.outputs == \"undefined\")) {\n                                            for (let l = 0; l < transition.outputs.length; l++) {\n                                                const output = transition.outputs[l];\n                                                if (output.type === \"record\") {\n                                                    try {\n                                                        // Create a wasm record ciphertext object from the found output\n                                                        const record = _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.RecordCiphertext.fromString(output.value);\n                                                        // Determine if the record is owned by the specified view key\n                                                        if (record.isOwner(viewKey)) {\n                                                            // Decrypt the record and get the serial number\n                                                            const recordPlaintext = record.decrypt(viewKey);\n                                                            // If the record has already been found, skip it\n                                                            const nonce = recordPlaintext.nonce();\n                                                            if (nonces.includes(nonce)) {\n                                                                continue;\n                                                            }\n                                                            if (unspent) {\n                                                                // Otherwise record the nonce that has been found\n                                                                const serialNumber = recordPlaintext.serialNumberString(resolvedPrivateKey, \"credits.aleo\", \"credits\");\n                                                                // Attempt to see if the serial number is spent\n                                                                try {\n                                                                    await this.getTransitionId(serialNumber);\n                                                                    continue;\n                                                                }\n                                                                catch (error) {\n                                                                    console.log(\"Found unspent record!\");\n                                                                }\n                                                            }\n                                                            // Add the record to the list of records if the user did not specify amounts.\n                                                            if (!amounts) {\n                                                                records.push(recordPlaintext);\n                                                                // If the user specified a maximum number of microcredits, check if the search has found enough\n                                                                if (typeof maxMicrocredits === \"number\") {\n                                                                    totalRecordValue += recordPlaintext.microcredits();\n                                                                    // Exit if the search has found the amount specified\n                                                                    if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                                                        return records;\n                                                                    }\n                                                                }\n                                                            }\n                                                            // If the user specified a list of amounts, check if the search has found them\n                                                            if (!(typeof amounts === \"undefined\") && amounts.length > 0) {\n                                                                let amounts_found = 0;\n                                                                if (recordPlaintext.microcredits() > amounts[amounts_found]) {\n                                                                    amounts_found += 1;\n                                                                    records.push(recordPlaintext);\n                                                                    // If the user specified a maximum number of microcredits, check if the search has found enough\n                                                                    if (typeof maxMicrocredits === \"number\") {\n                                                                        totalRecordValue += recordPlaintext.microcredits();\n                                                                        // Exit if the search has found the amount specified\n                                                                        if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                                                            return records;\n                                                                        }\n                                                                    }\n                                                                    if (records.length >= amounts.length) {\n                                                                        return records;\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                    catch (error) {\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            catch (error) {\n                // If there is an error fetching blocks, log it and keep searching\n                console.warn(\"Error fetching blocks in range: \" + start.toString() + \"-\" + end.toString());\n                console.warn(\"Error: \", error);\n                failures += 1;\n                if (failures > 10) {\n                    console.warn(\"10 failures fetching records reached. Returning records fetched so far\");\n                    return records;\n                }\n            }\n        }\n        return records;\n    }\n    /**\n     * Attempts to find unspent records in the Aleo blockchain.\n     *\n     * @param {number} startHeight - The height at which to start searching for unspent records\n     * @param {number} endHeight - The height at which to stop searching for unspent records\n     * @param {string[]} programs - The program(s) to search for unspent records in\n     * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n     * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n     * @param {string[]} nonces - The nonces of already found records to exclude from the search\n     * @param {string | PrivateKey} privateKey - An optional private key to use to find unspent records.\n     *\n     * @example\n     * // Find specific amounts\n     * const startHeight = 500000;\n     * const endHeight = 550000;\n     * const amounts = [600000, 1000000];\n     * const records = networkClient.findUnspentRecords(startHeight, endHeight, [\"credits.aleo\"], amounts);\n     *\n     * // Find specific amounts with a maximum number of cumulative microcredits\n     * const maxMicrocredits = 100000;\n     * const records = networkClient.findUnspentRecords(startHeight, undefined, [\"credits.aleo\"], undefined, maxMicrocredits);\n     */\n    async findUnspentRecords(startHeight, endHeight, programs, amounts, maxMicrocredits, nonces, privateKey) {\n        return await this.findRecords(startHeight, endHeight, true, programs, amounts, maxMicrocredits, nonces, privateKey);\n    }\n    /**\n     * Returns the contents of the block at the specified block height.\n     *\n     * @param {number} blockHeight\n     * @example\n     * const block = networkClient.getBlock(1234);\n     */\n    async getBlock(blockHeight) {\n        try {\n            const block = await this.fetchData(\"/block/\" + blockHeight);\n            return block;\n        }\n        catch (error) {\n            throw new Error(`Error fetching block ${blockHeight}: ${error}`);\n        }\n    }\n    /**\n     * Returns the contents of the block with the specified hash.\n     *\n     * @param {string} blockHash\n     * @example\n     * const block = networkClient.getBlockByHash(\"ab19dklwl9vp63zu3hwg57wyhvmqf92fx5g8x0t6dr72py8r87pxupqfne5t9\");\n     */\n    async getBlockByHash(blockHash) {\n        try {\n            const block = await this.fetchData(`/block/${blockHash}`);\n            return block;\n        }\n        catch (error) {\n            throw new Error(`Error fetching block ${blockHash}: ${error}`);\n        }\n    }\n    /**\n     * Returns a range of blocks between the specified block heights.\n     *\n     * @param {number} start\n     * @param {number} end\n     * @example\n     * const blockRange = networkClient.getBlockRange(2050, 2100);\n     */\n    async getBlockRange(start, end) {\n        try {\n            return await this.fetchData(\"/blocks?start=\" + start + \"&end=\" + end);\n        }\n        catch (error) {\n            throw new Error(`Error fetching blocks between ${start} and ${end}: ${error}`);\n        }\n    }\n    /**\n     * Returns the deployment transaction id associated with the specified program.\n     *\n     * @param {Program | string} program\n     * @returns {TransactionJSON}\n     */\n    async getDeploymentTransactionIDForProgram(program) {\n        if (program instanceof _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Program) {\n            program = program.id();\n        }\n        try {\n            const id = await this.fetchData(\"/find/transactionID/deployment/\" + program);\n            return id.replace(\"\\\"\", \"\");\n        }\n        catch (error) {\n            throw new Error(`Error fetching deployment transaction for program ${program}: ${error}`);\n        }\n    }\n    /**\n     * Returns the deployment transaction associated with a specified program.\n     *\n     * @param {Program | string} program\n     * @returns {TransactionJSON}\n     */\n    async getDeploymentTransactionForProgram(program) {\n        if (program instanceof _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Program) {\n            program = program.id();\n        }\n        try {\n            const transaction_id = await this.getDeploymentTransactionIDForProgram(program);\n            return await this.getTransaction(transaction_id);\n        }\n        catch (error) {\n            throw new Error(`Error fetching deployment transaction for program ${program}: ${error}`);\n        }\n    }\n    /**\n     * Returns the deployment transaction associated with a specified program as a wasm object.\n     *\n     * @param {Program | string} program\n     * @returns {TransactionJSON}\n     */\n    async getDeploymentTransactionObjectForProgram(program) {\n        try {\n            const transaction_id = await this.getDeploymentTransactionIDForProgram(program);\n            return await this.getTransactionObject(transaction_id);\n        }\n        catch (error) {\n            throw new Error(`Error fetching deployment transaction for program ${program}: ${error}`);\n        }\n    }\n    /**\n     * Returns the contents of the latest block.\n     *\n     * @example\n     * const latestHeight = networkClient.getLatestBlock();\n     */\n    async getLatestBlock() {\n        try {\n            return await this.fetchData(\"/block/latest\");\n        }\n        catch (error) {\n            throw new Error(`Error fetching latest block: ${error}`);\n        }\n    }\n    /**\n     * Returns the latest committee.\n     *\n     * @returns {Promise<object>} A javascript object containing the latest committee\n     */\n    async getLatestCommittee() {\n        try {\n            return await this.fetchData(\"/committee/latest\");\n        }\n        catch (error) {\n            throw new Error(`Error fetching latest committee: ${error}`);\n        }\n    }\n    /**\n     * Returns the committe at the specified block height.\n     *\n     * @param {number} blockHeight\n     *\n     * @returns {Promise<object>} A javascript object containing the committee\n     *\n     * @example\n     * const committee = await networkClient.getCommitteByBlockHeight(1234);\n     */\n    async getCommitteeByBlockHeight(blockHeight) {\n        try {\n            return await this.fetchData(`/committee/${blockHeight}`);\n        }\n        catch (error) {\n            throw new Error(`Error fetching committee at height ${blockHeight}: ${error}`);\n        }\n    }\n    /**\n     * Returns the latest block height.\n     *\n     * @example\n     * const latestHeight = networkClient.getLatestHeight();\n     */\n    async getLatestHeight() {\n        try {\n            return Number(await this.fetchData(\"/block/height/latest\"));\n        }\n        catch (error) {\n            throw new Error(`Error fetching latest height: ${error}`);\n        }\n    }\n    /**\n     * Returns the latest block hash.\n     *\n     * @example\n     * const latestHash - newtworkClient.getLatestBlockHash();\n     */\n    async getLatestBlockHash() {\n        try {\n            return String(await this.fetchData(\"/block/hash/latest\"));\n        }\n        catch (error) {\n            throw new Error(`Error fetching latest hash: ${error}`);\n        }\n    }\n    /**\n     * Returns the source code of a program given a program ID.\n     *\n     * @param {string} programId The program ID of a program deployed to the Aleo Network\n     * @return {Promise<string>} Source code of the program\n     *\n     * @example\n     * const program = networkClient.getProgram(\"hello_hello.aleo\");\n     * const expectedSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n     * assert.equal(program, expectedSource);\n     */\n    async getProgram(programId) {\n        try {\n            return await this.fetchData(\"/program/\" + programId);\n        }\n        catch (error) {\n            throw new Error(`Error fetching program ${programId}: ${error}`);\n        }\n    }\n    /**\n     * Returns a program object from a program ID or program source code.\n     *\n     * @param {string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n     * @return {Promise<Program>} Source code of the program\n     *\n     * @example\n     * const programID = \"hello_hello.aleo\";\n     * const programSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n     *\n     * // Get program object from program ID or program source code\n     * const programObjectFromID = await networkClient.getProgramObject(programID);\n     * const programObjectFromSource = await networkClient.getProgramObject(programSource);\n     *\n     * // Both program objects should be equal\n     * assert.equal(programObjectFromID.to_string(), programObjectFromSource.to_string());\n     */\n    async getProgramObject(inputProgram) {\n        try {\n            return _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Program.fromString(inputProgram);\n        }\n        catch (error) {\n            try {\n                return _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Program.fromString((await this.getProgram(inputProgram)));\n            }\n            catch (error) {\n                throw new Error(`${inputProgram} is neither a program name or a valid program: ${error}`);\n            }\n        }\n    }\n    /**\n     *  Returns an object containing the source code of a program and the source code of all programs it imports\n     *\n     * @param {Program | string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n     * @returns {Promise<ProgramImports>} Object of the form { \"program_id\": \"program_source\", .. } containing program id & source code for all program imports\n     *\n     * @example\n     * const double_test_source = \"import multiply_test.aleo;\\n\\nprogram double_test.aleo;\\n\\nfunction double_it:\\n    input r0 as u32.private;\\n    call multiply_test.aleo/multiply 2u32 r0 into r1;\\n    output r1 as u32.private;\\n\"\n     * const double_test = Program.fromString(double_test_source);\n     * const expectedImports = {\n     *     \"multiply_test.aleo\": \"program multiply_test.aleo;\\n\\nfunction multiply:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    mul r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n     * }\n     *\n     * // Imports can be fetched using the program ID, source code, or program object\n     * let programImports = await networkClient.getProgramImports(\"double_test.aleo\");\n     * assert.deepStrictEqual(programImports, expectedImports);\n     *\n     * // Using the program source code\n     * programImports = await networkClient.getProgramImports(double_test_source);\n     * assert.deepStrictEqual(programImports, expectedImports);\n     *\n     * // Using the program object\n     * programImports = await networkClient.getProgramImports(double_test);\n     * assert.deepStrictEqual(programImports, expectedImports);\n     */\n    async getProgramImports(inputProgram) {\n        try {\n            const imports = {};\n            // Get the program object or fail if the program is not valid or does not exist\n            const program = inputProgram instanceof _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Program ? inputProgram : (await this.getProgramObject(inputProgram));\n            // Get the list of programs that the program imports\n            const importList = program.getImports();\n            // Recursively get any imports that the imported programs have in a depth first search order\n            for (let i = 0; i < importList.length; i++) {\n                const import_id = importList[i];\n                if (!imports.hasOwnProperty(import_id)) {\n                    const programSource = await this.getProgram(import_id);\n                    const nestedImports = await this.getProgramImports(import_id);\n                    for (const key in nestedImports) {\n                        if (!imports.hasOwnProperty(key)) {\n                            imports[key] = nestedImports[key];\n                        }\n                    }\n                    imports[import_id] = programSource;\n                }\n            }\n            return imports;\n        }\n        catch (error) {\n            logAndThrow(\"Error fetching program imports: \" + error.message);\n        }\n    }\n    /**\n     * Get a list of the program names that a program imports.\n     *\n     * @param {Program | string} inputProgram - The program id or program source code to get the imports of\n     * @returns {string[]} - The list of program names that the program imports\n     *\n     * @example\n     * const programImportsNames = networkClient.getProgramImports(\"double_test.aleo\");\n     * const expectedImportsNames = [\"multiply_test.aleo\"];\n     * assert.deepStrictEqual(programImportsNames, expectedImportsNames);\n     */\n    async getProgramImportNames(inputProgram) {\n        try {\n            const program = inputProgram instanceof _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Program ? inputProgram : (await this.getProgramObject(inputProgram));\n            return program.getImports();\n        }\n        catch (error) {\n            throw new Error(`Error fetching imports for program ${inputProgram instanceof _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Program ? inputProgram.id() : inputProgram}: ${error.message}`);\n        }\n    }\n    /**\n     * Returns the names of the mappings of a program.\n     *\n     * @param {string} programId - The program ID to get the mappings of (e.g. \"credits.aleo\")\n     * @example\n     * const mappings = networkClient.getProgramMappingNames(\"credits.aleo\");\n     * const expectedMappings = [\n     *   \"committee\",\n     *   \"delegated\",\n     *   \"metadata\",\n     *   \"bonded\",\n     *   \"unbonding\",\n     *   \"account\",\n     *   \"withdraw\"\n     * ];\n     * assert.deepStrictEqual(mappings, expectedMappings);\n     */\n    async getProgramMappingNames(programId) {\n        try {\n            return await this.fetchData(`/program/${programId}/mappings`);\n        }\n        catch (error) {\n            throw new Error(`Error fetching mappings for program ${programId} - ensure the program exists on chain before trying again`);\n        }\n    }\n    /**\n     * Returns the value of a program's mapping for a specific key.\n     *\n     * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n     * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n     * @param {string | Plaintext} key - The key of the mapping to get the value of (e.g. \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\")\n     * @return {Promise<string>} String representation of the value of the mapping\n     *\n     * @example\n     * // Get public balance of an account\n     * const mappingValue = networkClient.getMappingValue(\"credits.aleo\", \"account\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n     * const expectedValue = \"0u64\";\n     * assert.equal(mappingValue, expectedValue);\n     */\n    async getProgramMappingValue(programId, mappingName, key) {\n        try {\n            const keyString = key instanceof _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Plaintext ? key.toString() : key;\n            return await this.fetchData(`/program/${programId}/mapping/${mappingName}/${keyString}`);\n        }\n        catch (error) {\n            throw new Error(`Error fetching value for key '${key}' in mapping '${mappingName}' in program '${programId}' - ensure the mapping exists and the key is correct`);\n        }\n    }\n    /**\n     * Returns the value of a mapping as a wasm Plaintext object. Returning an\n     * object in this format allows it to be converted to a Js type and for its\n     * internal members to be inspected if it's a struct or array.\n     *\n     * @example\n     * // Get the bond state as an account.\n     * const unbondedState = networkClient.getMappingPlaintext(\"credits.aleo\", \"bonded\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n     *\n     * // Get the two members of the object individually.\n     * const validator = unbondedState.getMember(\"validator\");\n     * const microcredits = unbondedState.getMember(\"microcredits\");\n     *\n     * // Ensure the expected values are correct.\n     * assert.equal(validator, \"aleo1u6940v5m0fzud859xx2c9tj2gjg6m5qrd28n636e6fdd2akvfcgqs34mfd\");\n     * assert.equal(microcredits, BigInt(\"9007199254740991\"));\n     *\n     * // Get a JS object representation of the unbonded state.\n     * const unbondedStateObject = unbondedState.toObject();\n     *\n     * const expectedState = {\n     *     validator: \"aleo1u6940v5m0fzud859xx2c9tj2gjg6m5qrd28n636e6fdd2akvfcgqs34mfd\",\n     *     microcredits: BigInt(\"9007199254740991\")\n     * };\n     * assert.equal(unbondedState, expectedState);\n     *\n     * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n     * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n     * @param {string | Plaintext} key - The key of the mapping to get the value of (e.g. \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\")\n     *\n     * @return {Promise<string>} String representation of the value of the mapping\n     */\n    async getProgramMappingPlaintext(programId, mappingName, key) {\n        try {\n            const keyString = key instanceof _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Plaintext ? key.toString() : key;\n            const value = await this.fetchRaw(`/program/${programId}/mapping/${mappingName}/${keyString}`);\n            return _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Plaintext.fromString(JSON.parse(value));\n        }\n        catch (error) {\n            throw new Error(\"Failed to fetch mapping value.\" + error);\n        }\n    }\n    /**\n     * Returns the public balance of an address from the account mapping in credits.aleo\n     *\n     * @param {string} address\n     *\n     * @example\n     * const account = new Account();\n     * const publicBalance = networkClient.getPublicBalance(account.address());\n     */\n    async getPublicBalance(address) {\n        try {\n            const balanceStr = await this.getProgramMappingValue('credits.aleo', 'account', address.to_string());\n            return balanceStr ? parseInt(balanceStr) : 0;\n        }\n        catch (error) {\n            throw new Error(`Error fetching public balance for ${address}: ${error}`);\n        }\n    }\n    /**\n     * Returns the latest state/merkle root of the Aleo blockchain.\n     *\n     * @example\n     * const stateRoot = networkClient.getStateRoot();\n     */\n    async getStateRoot() {\n        try {\n            return await this.fetchData('/stateRoot/latest');\n        }\n        catch (error) {\n            throw new Error(`Error fetching latest state root: ${error}`);\n        }\n    }\n    /**\n     * Returns a transaction by its unique identifier.\n     *\n     * @param {string} transactionId\n     * @example\n     * const transaction = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n     */\n    async getTransaction(transactionId) {\n        try {\n            return await this.fetchData(\"/transaction/\" + transactionId);\n        }\n        catch (error) {\n            throw new Error(`Error fetching transaction ${transactionId}: ${error}`);\n        }\n    }\n    /**\n     * Returns a confirmed transaction by its unique identifier.\n     *\n     * @param {string} transactionId\n     * @example\n     * const transaction = networkClient.getConfirmedTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n     */\n    async getConfirmedTransaction(transactionId) {\n        try {\n            return await this.fetchData(`/transaction/confirmed/${transactionId}`);\n        }\n        catch (error) {\n            throw new Error(`Error fetching confirmed transaction ${transactionId}: ${error}`);\n        }\n    }\n    /**\n     * Returns a transaction as a wasm object. Getting a transaction of this type will allow the ability for the inputs,\n     * outputs, and records to be searched for and displayed.\n     *\n     * @example\n     * const transactionObject = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n     * // Get the transaction inputs as a JS array.\n     * const transactionOutputs = transactionObject.inputs(true);\n     *\n     * // Get the transaction outputs as a JS object.\n     * const transactionInputs = transactionObject.outputs(true);\n     *\n     * // Get any records generated in transitions in the transaction as a JS object.\n     * const records = transactionObject.records();\n     *\n     * // Get the transaction type.\n     * const transactionType = transactionObject.transactionType();\n     * assert.equal(transactionType, \"Execute\");\n     *\n     * // Get a JS representation of all inputs, outputs, and transaction metadata.\n     * const transactionSummary = transactionObject.summary();\n     *\n     * @param {string} transactionId\n     * @example\n     * const transaction = networkClient.getTransactionObject(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n     */\n    async getTransactionObject(transactionId) {\n        try {\n            const transaction = await this.fetchRaw(\"/transaction/\" + transactionId);\n            return _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Transaction.fromString(transaction);\n        }\n        catch (error) {\n            throw new Error(`Error fetching transaction object ${transactionId}: ${error}`);\n        }\n    }\n    /**\n     * Returns the transactions present at the specified block height.\n     *\n     * @param {number} blockHeight\n     * @example\n     * const transactions = networkClient.getTransactions(654);\n     */\n    async getTransactions(blockHeight) {\n        try {\n            return await this.fetchData(\"/block/\" + blockHeight.toString() + \"/transactions\");\n        }\n        catch (error) {\n            throw new Error(`Error fetching transactions: ${error}`);\n        }\n    }\n    /**\n     * Returns the confirmed transactions present in the block with the specified block hash.\n     *\n     * @param {string} blockHash\n     * @example\n     * const transactions = networkClient.getTransactionsByHash(\"ab19dklwl9vp63zu3hwg57wyhvmqf92fx5g8x0t6dr72py8r87pxupqfne5t9\");\n     */\n    async getTransactionsByBlockHash(blockHash) {\n        try {\n            const block = await this.fetchData(`/block/${blockHash}`);\n            const height = block.header.metadata.height;\n            return await this.getTransactions(Number(height));\n        }\n        catch (error) {\n            throw new Error(`Error fetching transactions for block ${blockHash}: ${error}`);\n        }\n    }\n    /**\n     * Returns the transactions in the memory pool. This method requires access to a validator's REST API.\n     *\n     * @example\n     * const transactions = networkClient.getTransactionsInMempool();\n     */\n    async getTransactionsInMempool() {\n        try {\n            return await this.fetchData(\"/memoryPool/transactions\");\n        }\n        catch (error) {\n            throw new Error(`Error fetching transactions from mempool: ${error}`);\n        }\n    }\n    /**\n     * Returns the transition ID of the transition corresponding to the ID of the input or output.\n     * @param {string} inputOrOutputID - ID of the input or output.\n     *\n     * @example\n     * const transitionId = networkClient.getTransitionId(\"2429232855236830926144356377868449890830704336664550203176918782554219952323field\");\n     */\n    async getTransitionId(inputOrOutputID) {\n        try {\n            return await this.fetchData(\"/find/transitionID/\" + inputOrOutputID);\n        }\n        catch (error) {\n            throw new Error(`Error fetching transition ID for input/output ${inputOrOutputID}: ${error}`);\n        }\n    }\n    /**\n     * Submit an execute or deployment transaction to the Aleo network.\n     *\n     * @param {Transaction | string} transaction  - The transaction to submit to the network\n     * @returns {string} - The transaction id of the submitted transaction or the resulting error\n     */\n    async submitTransaction(transaction) {\n        const transaction_string = transaction instanceof _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Transaction ? transaction.toString() : transaction;\n        try {\n            const response = await post(this.host + \"/transaction/broadcast\", {\n                body: transaction_string,\n                headers: Object.assign({}, this.headers, {\n                    \"Content-Type\": \"application/json\",\n                }),\n            });\n            try {\n                const text = await response.text();\n                return parseJSON(text);\n            }\n            catch (error) {\n                throw new Error(`Error posting transaction. Aleo network response: ${error.message}`);\n            }\n        }\n        catch (error) {\n            throw new Error(`Error posting transaction: No response received: ${error.message}`);\n        }\n    }\n    /**\n     * Submit a solution to the Aleo network.\n     *\n     * @param {string} solution The string representation of the solution desired to be submitted to the network.\n     */\n    async submitSolution(solution) {\n        try {\n            const response = await post(this.host + \"/solution/broadcast\", {\n                body: solution,\n                headers: Object.assign({}, this.headers, {\n                    \"Content-Type\": \"application/json\",\n                }),\n            });\n            try {\n                const text = await response.text();\n                return parseJSON(text);\n            }\n            catch (error) {\n                throw new Error(`Error posting transaction. Aleo network response: ${error.message}`);\n            }\n        }\n        catch (error) {\n            throw new Error(`Error posting transaction: No response received: ${error.message}`);\n        }\n    }\n    /**\n     * Await a transaction to be confirmed on the Aleo network.\n     *\n     * @param {string} solution The string representation of the solution desired to be submitted to the network.\n     */\n    async waitForTransactionConfirmation(transactionId, checkInterval = 2000, // Poll every 2 seconds\n    timeout = 45000 // Timeout after 45 seconds\n    ) {\n        const startTime = Date.now();\n        return new Promise((resolve, reject) => {\n            const interval = setInterval(async () => {\n                try {\n                    // Replace with actual Aleo transaction lookup API\n                    const transaction = await this.getTransactionObject(transactionId);\n                    resolve(transaction);\n                    if (Date.now() - startTime > timeout) {\n                        clearInterval(interval);\n                        reject(new Error(\"Transaction confirmation timed out\"));\n                    }\n                }\n                catch (error) {\n                    console.error(\"Error checking transaction:\", error);\n                }\n            }, checkInterval);\n        });\n    }\n}\n\nconst KEY_STORE = _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Metadata.baseUrl();\nfunction convert(metadata) {\n    // This looks up the method name in VerifyingKey\n    const verifyingKey = _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.VerifyingKey[metadata.verifyingKey];\n    if (!verifyingKey) {\n        throw new Error(\"Invalid method name: \" + metadata.verifyingKey);\n    }\n    return {\n        name: metadata.name,\n        locator: metadata.locator,\n        prover: metadata.prover,\n        verifier: metadata.verifier,\n        verifyingKey,\n    };\n}\nconst CREDITS_PROGRAM_KEYS = {\n    bond_public: convert(_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Metadata.bond_public()),\n    bond_validator: convert(_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Metadata.bond_validator()),\n    claim_unbond_public: convert(_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Metadata.claim_unbond_public()),\n    fee_private: convert(_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Metadata.fee_private()),\n    fee_public: convert(_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Metadata.fee_public()),\n    inclusion: convert(_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Metadata.inclusion()),\n    join: convert(_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Metadata.join()),\n    set_validator_state: convert(_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Metadata.set_validator_state()),\n    split: convert(_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Metadata.split()),\n    transfer_private: convert(_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Metadata.transfer_private()),\n    transfer_private_to_public: convert(_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Metadata.transfer_private_to_public()),\n    transfer_public: convert(_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Metadata.transfer_public()),\n    transfer_public_as_signer: convert(_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Metadata.transfer_public_as_signer()),\n    transfer_public_to_private: convert(_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Metadata.transfer_public_to_private()),\n    unbond_public: convert(_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Metadata.unbond_public()),\n    getKey: function (key) {\n        if (this.hasOwnProperty(key)) {\n            return this[key];\n        }\n        else {\n            throw new Error(`Key \"${key}\" not found.`);\n        }\n    }\n};\nconst PRIVATE_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n]);\nconst VALID_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n    \"transfer_public\",\n    \"transfer_public_as_signer\",\n    \"public\",\n    \"public_as_signer\",\n    \"transferPublic\",\n    \"transferPublicAsSigner\",\n    \"transfer_public_to_private\",\n    \"publicToPrivate\",\n    \"publicAsSigner\",\n    \"transferPublicToPrivate\",\n]);\nconst PRIVATE_TRANSFER = new Set([\n    \"private\",\n    \"transfer_private\",\n    \"transferPrivate\",\n]);\nconst PRIVATE_TO_PUBLIC_TRANSFER = new Set([\n    \"private_to_public\",\n    \"privateToPublic\",\n    \"transfer_private_to_public\",\n    \"transferPrivateToPublic\",\n]);\nconst PUBLIC_TRANSFER = new Set([\n    \"public\",\n    \"transfer_public\",\n    \"transferPublic\",\n]);\nconst PUBLIC_TRANSFER_AS_SIGNER = new Set([\n    \"public_as_signer\",\n    \"transfer_public_as_signer\",\n    \"transferPublicAsSigner\",\n]);\nconst PUBLIC_TO_PRIVATE_TRANSFER = new Set([\n    \"public_to_private\",\n    \"publicToPrivate\",\n    \"transfer_public_to_private\",\n    \"transferPublicToPrivate\",\n]);\n\n/**\n * AleoKeyProviderParams search parameter for the AleoKeyProvider. It allows for the specification of a proverUri and\n * verifierUri to fetch keys via HTTP from a remote resource as well as a unique cacheKey to store the keys in memory.\n */\nclass AleoKeyProviderParams {\n    name;\n    proverUri;\n    verifierUri;\n    cacheKey;\n    /**\n     * Create a new AleoKeyProviderParams object which implements the KeySearchParams interface. Users can optionally\n     * specify a url for the proverUri & verifierUri to fetch keys via HTTP from a remote resource as well as a unique\n     * cacheKey to store the keys in memory for future use. If no proverUri or verifierUri is specified, a cachekey must\n     * be provided.\n     *\n     * @param { AleoKeyProviderInitParams } params - Optional search parameters\n     */\n    constructor(params) {\n        this.proverUri = params.proverUri;\n        this.verifierUri = params.verifierUri;\n        this.cacheKey = params.cacheKey;\n        this.name = params.name;\n    }\n}\n/**\n * AleoKeyProvider class. Implements the KeyProvider interface. Enables the retrieval of Aleo program proving and\n * verifying keys for the credits.aleo program over http from official Aleo sources and storing and retrieving function\n * keys from a local memory cache.\n */\nclass AleoKeyProvider {\n    cache;\n    cacheOption;\n    keyUris;\n    async fetchBytes(url = \"/\") {\n        try {\n            const response = await get(url);\n            const data = await response.arrayBuffer();\n            return new Uint8Array(data);\n        }\n        catch (error) {\n            throw new Error(\"Error fetching data.\" + error.message);\n        }\n    }\n    constructor() {\n        this.keyUris = KEY_STORE;\n        this.cache = new Map();\n        this.cacheOption = false;\n    }\n    /**\n     * Use local memory to store keys\n     *\n     * @param {boolean} useCache whether to store keys in local memory\n     */\n    useCache(useCache) {\n        this.cacheOption = useCache;\n    }\n    /**\n     * Clear the key cache\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId, keys) {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    }\n    /**\n     * Determine if a keyId exists in the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair\n     * @returns {boolean} true if the keyId exists in the cache, false otherwise\n     */\n    containsKeys(keyId) {\n        return this.cache.has(keyId);\n    }\n    /**\n     * Delete a set of keys from the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair to delete from memory\n     * @returns {boolean} true if the keyId exists in the cache and was deleted, false if the key did not exist\n     */\n    deleteKeys(keyId) {\n        return this.cache.delete(keyId);\n    }\n    /**\n     * Get a set of keys from the cache\n     * @param keyId keyId of a proving and verifying key pair\n     *\n     * @returns {FunctionKeyPair} Proving and verifying keys for the specified program\n     */\n    getKeys(keyId) {\n        console.debug(`Checking if key exists in cache. KeyId: ${keyId}`);\n        if (this.cache.has(keyId)) {\n            const [provingKeyBytes, verifyingKeyBytes] = this.cache.get(keyId);\n            return [_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.ProvingKey.fromBytes(provingKeyBytes), _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.VerifyingKey.fromBytes(verifyingKeyBytes)];\n        }\n        else {\n            throw new Error(\"Key not found in cache.\");\n        }\n    }\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams} params parameters for the key search in form of: {proverUri: string, verifierUri: string, cacheKey: string}\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually using the key provider\n     * const keySearchParams = { \"cacheKey\": \"myProgram:myFunction\" };\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(keySearchParams);\n     */\n    async functionKeys(params) {\n        if (params) {\n            let proverUrl;\n            let verifierUrl;\n            let cacheKey;\n            if (\"name\" in params && typeof params[\"name\"] == \"string\") {\n                let key = CREDITS_PROGRAM_KEYS.getKey(params[\"name\"]);\n                return this.fetchCreditsKeys(key);\n            }\n            if (\"proverUri\" in params && typeof params[\"proverUri\"] == \"string\") {\n                proverUrl = params[\"proverUri\"];\n            }\n            if (\"verifierUri\" in params && typeof params[\"verifierUri\"] == \"string\") {\n                verifierUrl = params[\"verifierUri\"];\n            }\n            if (\"cacheKey\" in params && typeof params[\"cacheKey\"] == \"string\") {\n                cacheKey = params[\"cacheKey\"];\n            }\n            if (proverUrl && verifierUrl) {\n                return await this.fetchRemoteKeys(proverUrl, verifierUrl, cacheKey);\n            }\n            if (cacheKey) {\n                return this.getKeys(cacheKey);\n            }\n        }\n        throw new Error(\"Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl\");\n    }\n    /**\n     * Returns the proving and verifying keys for a specified program from a specified url.\n     *\n     * @param {string} verifierUrl Url of the proving key\n     * @param {string} proverUrl Url the verifying key\n     * @param {string} cacheKey Key to store the keys in the cache\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new AleoKeyProvider object\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.fetchKeys(\n     *     CREDITS_PROGRAM_KEYS.transfer_private.prover,\n     *     CREDITS_PROGRAM_KEYS.transfer_private.verifier,\n     * );\n     */\n    async fetchRemoteKeys(proverUrl, verifierUrl, cacheKey) {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return [_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.ProvingKey.fromBytes(value[0]), _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.VerifyingKey.fromBytes(value[1])];\n                }\n                else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.ProvingKey.fromBytes(await this.fetchBytes(proverUrl));\n                    console.debug(\"Fetching verifying keys \" + verifierUrl);\n                    const verifyingKey = (await this.getVerifyingKey(verifierUrl));\n                    this.cache.set(cacheKey, [provingKey.toBytes(), verifyingKey.toBytes()]);\n                    return [provingKey, verifyingKey];\n                }\n            }\n            else {\n                // If cache is disabled, fetch the keys and return them\n                const provingKey = _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.ProvingKey.fromBytes(await this.fetchBytes(proverUrl));\n                const verifyingKey = (await this.getVerifyingKey(verifierUrl));\n                return [provingKey, verifyingKey];\n            }\n        }\n        catch (error) {\n            throw new Error(`Error: ${error.message} fetching fee proving and verifying keys from ${proverUrl} and ${verifierUrl}.`);\n        }\n    }\n    /***\n     * Fetches the proving key from a remote source.\n     *\n     * @param proverUrl\n     * @param cacheKey\n     *\n     * @returns {Promise<ProvingKey>} Proving key for the specified program\n     */\n    async fetchProvingKey(proverUrl, cacheKey) {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.ProvingKey.fromBytes(value[0]);\n                }\n                else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.ProvingKey.fromBytes(await this.fetchBytes(proverUrl));\n                    return provingKey;\n                }\n            }\n            else {\n                const provingKey = _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.ProvingKey.fromBytes(await this.fetchBytes(proverUrl));\n                return provingKey;\n            }\n        }\n        catch (error) {\n            throw new Error(`Error: ${error.message} fetching fee proving keys from ${proverUrl}`);\n        }\n    }\n    async fetchCreditsKeys(key) {\n        try {\n            if (!this.cache.has(key.locator) || !this.cacheOption) {\n                const verifying_key = key.verifyingKey();\n                const proving_key = await this.fetchProvingKey(key.prover, key.locator);\n                if (this.cacheOption) {\n                    this.cache.set(CREDITS_PROGRAM_KEYS.bond_public.locator, [proving_key.toBytes(), verifying_key.toBytes()]);\n                }\n                return [proving_key, verifying_key];\n            }\n            else {\n                const keyPair = this.cache.get(key.locator);\n                return [_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.ProvingKey.fromBytes(keyPair[0]), _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.VerifyingKey.fromBytes(keyPair[1])];\n            }\n        }\n        catch (error) {\n            throw new Error(`Error: fetching credits.aleo keys: ${error.message}`);\n        }\n    }\n    async bondPublicKeys() {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.bond_public);\n    }\n    bondValidatorKeys() {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.bond_validator);\n    }\n    claimUnbondPublicKeys() {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.claim_unbond_public);\n    }\n    /**\n     * Returns the proving and verifying keys for the transfer functions in the credits.aleo program\n     * @param {string} visibility Visibility of the transfer function\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the transfer functions\n     *\n     * @example\n     * // Create a new AleoKeyProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    async transferKeys(visibility) {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_private);\n        }\n        else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_private_to_public);\n        }\n        else if (PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public);\n        }\n        else if (PUBLIC_TRANSFER_AS_SIGNER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public_as_signer);\n        }\n        else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public_to_private);\n        }\n        else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    }\n    /**\n     * Returns the proving and verifying keys for the join function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    async joinKeys() {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.join);\n    }\n    /**\n     * Returns the proving and verifying keys for the split function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the split function\n     * */\n    async splitKeys() {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.split);\n    }\n    /**\n     * Returns the proving and verifying keys for the fee_private function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the fee function\n     */\n    async feePrivateKeys() {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.fee_private);\n    }\n    /**\n     * Returns the proving and verifying keys for the fee_public function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the fee function\n     */\n    async feePublicKeys() {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.fee_public);\n    }\n    /**\n     * Gets a verifying key. If the verifying key is for a credits.aleo function, get it from the wasm cache otherwise\n     *\n     * @returns {Promise<VerifyingKey>} Verifying key for the function\n     */\n    // attempt to fetch it from the network\n    async getVerifyingKey(verifierUri) {\n        switch (verifierUri) {\n            case CREDITS_PROGRAM_KEYS.bond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.bond_validator.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_validator.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.claim_unbond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_private.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_public.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.inclusion.verifier:\n                return CREDITS_PROGRAM_KEYS.inclusion.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.join.verifier:\n                return CREDITS_PROGRAM_KEYS.join.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.set_validator_state.verifier:\n                return CREDITS_PROGRAM_KEYS.set_validator_state.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.split.verifier:\n                return CREDITS_PROGRAM_KEYS.split.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_as_signer.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_as_signer.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.unbond_public.verifyingKey();\n            default:\n                try {\n                    /// Try to fetch the verifying key from the network as a string\n                    const response = await get(verifierUri);\n                    const text = await response.text();\n                    return _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.VerifyingKey.fromString(text);\n                }\n                catch (e) {\n                    /// If that fails, try to fetch the verifying key from the network as bytes\n                    try {\n                        return _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.VerifyingKey.fromBytes(await this.fetchBytes(verifierUri));\n                    }\n                    catch (inner) {\n                        throw new Error(\"Invalid verifying key. Error: \" + inner.message);\n                    }\n                }\n        }\n    }\n    unBondPublicKeys() {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.unbond_public);\n    }\n}\n\n/**\n * The ProgramManager class is used to execute and deploy programs on the Aleo network and create value transfers.\n */\nclass ProgramManager {\n    account;\n    keyProvider;\n    host;\n    networkClient;\n    recordProvider;\n    /** Create a new instance of the ProgramManager\n     *\n     * @param { string | undefined } host A host uri running the official Aleo API\n     * @param { FunctionKeyProvider | undefined } keyProvider A key provider that implements {@link FunctionKeyProvider} interface\n     * @param { RecordProvider | undefined } recordProvider A record provider that implements {@link RecordProvider} interface\n     */\n    constructor(host, keyProvider, recordProvider) {\n        this.host = host ? host : 'https://api.explorer.provable.com/v1';\n        this.networkClient = new AleoNetworkClient(this.host);\n        this.keyProvider = keyProvider ? keyProvider : new AleoKeyProvider();\n        this.recordProvider = recordProvider;\n    }\n    /**\n     * Set the account to use for transaction submission to the Aleo network\n     *\n     * @param {Account} account Account to use for transaction submission\n     */\n    setAccount(account) {\n        this.account = account;\n    }\n    /**\n     * Set the key provider that provides the proving and verifying keys for programs\n     *\n     * @param {FunctionKeyProvider} keyProvider\n     */\n    setKeyProvider(keyProvider) {\n        this.keyProvider = keyProvider;\n    }\n    /**\n     * Set the host peer to use for transaction submission to the Aleo network\n     *\n     * @param host {string} Peer url to use for transaction submission\n     */\n    setHost(host) {\n        this.host = host;\n        this.networkClient.setHost(host);\n    }\n    /**\n     * Set the record provider that provides records for transactions\n     *\n     * @param {RecordProvider} recordProvider\n     */\n    setRecordProvider(recordProvider) {\n        this.recordProvider = recordProvider;\n    }\n    /**\n     * Builds a deployment transaction for submission to the Aleo network.\n     *\n     * @param {string} program Program source code\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use\n     * pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Define a fee in credits\n     * const fee = 1.2;\n     *\n     * // Create the deployment transaction.\n     * const tx = await programManager.buildDeploymentTransaction(program, fee, false);\n     */\n    async buildDeploymentTransaction(program, fee, privateFee, recordSearchParams, feeRecord, privateKey) {\n        // Ensure the program is valid and does not exist on the network\n        try {\n            const programObject = _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Program.fromString(program);\n            let programSource;\n            try {\n                programSource = await this.networkClient.getProgram(programObject.id());\n            }\n            catch (e) {\n                // Program does not exist on the network, deployment can proceed\n                console.log(`Program ${programObject.id()} does not exist on the network, deploying...`);\n            }\n            if (typeof programSource == \"string\") {\n                throw (`Program ${programObject.id()} already exists on the network, please rename your program`);\n            }\n        }\n        catch (e) {\n            logAndThrow(`Error validating program: ${e.message}`);\n        }\n        // Get the private key from the account if it is not provided in the parameters\n        let deploymentPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            deploymentPrivateKey = this.account.privateKey();\n        }\n        if (typeof deploymentPrivateKey === \"undefined\") {\n            throw (\"No private key provided and no private key set in the ProgramManager\");\n        }\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        }\n        catch (e) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? await this.keyProvider.feePrivateKeys() : await this.keyProvider.feePublicKeys();\n        }\n        catch (e) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n        }\n        catch (e) {\n            logAndThrow(`Error finding program imports. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n        // Build a deployment transaction and submit it to the network\n        return await _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.ProgramManager.buildDeploymentTransaction(deploymentPrivateKey, program, fee, feeRecord, this.host, imports, feeProvingKey, feeVerifyingKey);\n    }\n    /**\n     * Deploy an Aleo program to the Aleo network\n     *\n     * @param {string} program Program source code\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use\n     * pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Define a fee in credits\n     * const fee = 1.2;\n     *\n     * // Deploy the program\n     * const tx_id = await programManager.deploy(program, fee, false);\n     *\n     * // Verify the transaction was successful\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async deploy(program, fee, privateFee, recordSearchParams, feeRecord, privateKey) {\n        const tx = await this.buildDeploymentTransaction(program, fee, privateFee, recordSearchParams, feeRecord, privateKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.buildExecutionTransaction({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async buildExecutionTransaction(options) {\n        // Destructure the options object to access the parameters\n        const { programName, functionName, fee, privateFee, inputs, recordSearchParams, keySearchParams, privateKey, offlineQuery } = options;\n        let feeRecord = options.feeRecord;\n        let provingKey = options.provingKey;\n        let verifyingKey = options.verifyingKey;\n        let program = options.program;\n        let imports = options.imports;\n        // Ensure the function exists on the network\n        if (program === undefined) {\n            try {\n                program = (await this.networkClient.getProgram(programName));\n            }\n            catch (e) {\n                logAndThrow(`Error finding ${programName}. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`);\n            }\n        }\n        else if (program instanceof _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Program) {\n            program = program.toString();\n        }\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw (\"No private key provided and no private key set in the ProgramManager\");\n        }\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        }\n        catch (e) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n        // Get the fee proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? await this.keyProvider.feePrivateKeys() : await this.keyProvider.feePublicKeys();\n        }\n        catch (e) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = await this.keyProvider.functionKeys(keySearchParams);\n            }\n            catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`);\n            }\n        }\n        // Resolve the program imports if they exist\n        const numberOfImports = _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Program.fromString(program).getImports().length;\n        if (numberOfImports > 0 && !imports) {\n            try {\n                imports = await this.networkClient.getProgramImports(programName);\n            }\n            catch (e) {\n                logAndThrow(`Error finding program imports. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n            }\n        }\n        // Build an execution transaction and submit it to the network\n        return await _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.ProgramManager.buildExecutionTransaction(executionPrivateKey, program, functionName, inputs, fee, feeRecord, this.host, imports, provingKey, verifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.execute({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async execute(options) {\n        const tx = await this.buildExecutionTransaction(options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n    /**\n     * Run an Aleo program in offline mode\n     *\n     * @param {string} program Program source code containing the function to be executed\n     * @param {string} function_name Function name to execute\n     * @param {string[]} inputs Inputs to the function\n     * @param {number} proveExecution Whether to prove the execution of the function and return an execution transcript\n     * that contains the proof.\n     * @param {string[] | undefined} imports Optional imports to the program\n     * @param {KeySearchParams | undefined} keySearchParams Optional parameters for finding the matching proving &\n     * verifying keys for the function\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>}\n     *\n     * @example\n     * import { Account, Program } from '@provablehq/sdk';\n     *\n     * /// Create the source for the \"helloworld\" program\n     * const program = \"program helloworld.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager();\n     *\n     * /// Create a temporary account for the execution of the program\n     * const account = new Account();\n     * programManager.setAccount(account);\n     *\n     * /// Get the response and ensure that the program executed correctly\n     * const executionResponse = await programManager.run(program, \"hello\", [\"5u32\", \"5u32\"]);\n     * const result = executionResponse.getOutputs();\n     * assert(result === [\"10u32\"]);\n     */\n    async run(program, function_name, inputs, proveExecution, imports, keySearchParams, provingKey, verifyingKey, privateKey, offlineQuery) {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw (\"No private key provided and no private key set in the ProgramManager\");\n        }\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = await this.keyProvider.functionKeys(keySearchParams);\n            }\n            catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`);\n            }\n        }\n        // Run the program offline and return the result\n        console.log(\"Running program offline\");\n        console.log(\"Proving key: \", provingKey);\n        console.log(\"Verifying key: \", verifyingKey);\n        return _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.ProgramManager.executeFunctionOffline(executionPrivateKey, program, function_name, inputs, proveExecution, false, imports, provingKey, verifyingKey, this.host, offlineQuery);\n    }\n    /**\n     * Join two credits records into a single credits record\n     *\n     * @param {RecordPlaintext | string} recordOne First credits record to join\n     * @param {RecordPlaintext | string} recordTwo Second credits record to join\n     * @param {number} fee Fee in credits pay for the join transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the fee record to use\n     * to pay the fee for the join transaction\n     * @param {RecordPlaintext | string | undefined} feeRecord Fee record to use for the join transaction\n     * @param {PrivateKey | undefined} privateKey Private key to use for the join transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>}\n     */\n    async join(recordOne, recordTwo, fee, privateFee, recordSearchParams, feeRecord, privateKey, offlineQuery) {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw (\"No private key provided and no private key set in the ProgramManager\");\n        }\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let joinKeys;\n        try {\n            feeKeys = privateFee ? await this.keyProvider.feePrivateKeys() : await this.keyProvider.feePublicKeys();\n            joinKeys = await this.keyProvider.joinKeys();\n        }\n        catch (e) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [joinProvingKey, joinVerifyingKey] = joinKeys;\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        }\n        catch (e) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n        // Validate the records provided are valid plaintext records\n        try {\n            recordOne = recordOne instanceof _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.RecordPlaintext ? recordOne : _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.RecordPlaintext.fromString(recordOne);\n            recordTwo = recordTwo instanceof _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.RecordPlaintext ? recordTwo : _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.RecordPlaintext.fromString(recordTwo);\n        }\n        catch (e) {\n            logAndThrow('Records provided are not valid. Please ensure they are valid plaintext records.');\n        }\n        // Build an execution transaction and submit it to the network\n        const tx = await _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.ProgramManager.buildJoinTransaction(executionPrivateKey, recordOne, recordTwo, fee, feeRecord, this.host, joinProvingKey, joinVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n    /**\n     * Split credits into two new credits records\n     *\n     * @param {number} splitAmount Amount in microcredits to split from the original credits record\n     * @param {RecordPlaintext | string} amountRecord Amount record to use for the split transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the split transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * const record = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}\"\n     * const tx_id = await programManager.split(25000000, record);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async split(splitAmount, amountRecord, privateKey, offlineQuery) {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw (\"No private key provided and no private key set in the ProgramManager\");\n        }\n        // Get the split keys from the key provider\n        let splitKeys;\n        try {\n            splitKeys = await this.keyProvider.splitKeys();\n        }\n        catch (e) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [splitProvingKey, splitVerifyingKey] = splitKeys;\n        // Validate the record to be split\n        try {\n            amountRecord = amountRecord instanceof _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.RecordPlaintext ? amountRecord : _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.RecordPlaintext.fromString(amountRecord);\n        }\n        catch (e) {\n            logAndThrow(\"Record provided is not valid. Please ensure it is a valid plaintext record.\");\n        }\n        // Build an execution transaction and submit it to the network\n        const tx = await _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.ProgramManager.buildSplitTransaction(executionPrivateKey, splitAmount, amountRecord, this.host, splitProvingKey, splitVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n    /**\n     * Pre-synthesize proving and verifying keys for a program\n     *\n     * @param program {string} The program source code to synthesize keys for\n     * @param function_id {string} The function id to synthesize keys for\n     * @param inputs {Array<string>}  Sample inputs to the function\n     * @param privateKey {PrivateKey | undefined} Optional private key to use for the key synthesis\n     *\n     * @returns {Promise<FunctionKeyPair>}\n     */\n    async synthesizeKeys(program, function_id, inputs, privateKey) {\n        // Resolve the program imports if they exist\n        let imports;\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\") {\n            if (typeof this.account !== \"undefined\") {\n                executionPrivateKey = this.account.privateKey();\n            }\n            else {\n                executionPrivateKey = new _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.PrivateKey();\n            }\n        }\n        // Attempt to run an offline execution of the program and extract the proving and verifying keys\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n            const keyPair = await _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.ProgramManager.synthesizeKeyPair(executionPrivateKey, program, function_id, inputs, imports);\n            return [keyPair.provingKey(), keyPair.verifyingKey()];\n        }\n        catch (e) {\n            logAndThrow(`Could not synthesize keys - error ${e.message}. Please ensure the program is valid and the inputs are correct.`);\n        }\n    }\n    /**\n     * Build a transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async buildTransferTransaction(amount, recipient, transferType, fee, privateFee, recordSearchParams, amountRecord, feeRecord, privateKey, offlineQuery) {\n        // Validate the transfer type\n        transferType = validateTransferType(transferType);\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw (\"No private key provided and no private key set in the ProgramManager\");\n        }\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let transferKeys;\n        try {\n            feeKeys = privateFee ? await this.keyProvider.feePrivateKeys() : await this.keyProvider.feePublicKeys();\n            transferKeys = await this.keyProvider.transferKeys(transferType);\n        }\n        catch (e) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [transferProvingKey, transferVerifyingKey] = transferKeys;\n        // Get the amount and fee record from the account if it is not provided in the parameters\n        try {\n            // Track the nonces of the records found so no duplicate records are used\n            const nonces = [];\n            if (requiresAmountRecord(transferType)) {\n                // If the transfer type is private and requires an amount record, get it from the record provider\n                amountRecord = await this.getCreditsRecord(fee, [], amountRecord, recordSearchParams);\n                nonces.push(amountRecord.nonce());\n            }\n            else {\n                amountRecord = undefined;\n            }\n            feeRecord = privateFee ? await this.getCreditsRecord(fee, nonces, feeRecord, recordSearchParams) : undefined;\n        }\n        catch (e) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n        // Build an execution transaction and submit it to the network\n        return await _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.ProgramManager.buildTransferTransaction(executionPrivateKey, amount, recipient, transferType, amountRecord, fee, feeRecord, this.host, transferProvingKey, transferVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n    /**\n     * Build a transfer_public transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     */\n    async buildTransferPublicTransaction(amount, recipient, fee, privateKey, offlineQuery) {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n    /**\n     * Build a transfer_public_as_signer transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     */\n    async buildTransferPublicAsSignerTransaction(amount, recipient, fee, privateKey, offlineQuery) {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n    /**\n     * Transfer credits to another account\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async transfer(amount, recipient, transferType, fee, privateFee, recordSearchParams, amountRecord, feeRecord, privateKey, offlineQuery) {\n        const tx = await this.buildTransferTransaction(amount, recipient, transferType, fee, privateFee, recordSearchParams, amountRecord, feeRecord, privateKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n    /**\n     * Build transaction to bond credits to a validator for later submission to the Aleo Network\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction object for later submission\n     * const tx = await programManager.buildBondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can be later submitted to the network using the network client.\n     * const result = await programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async buildBondPublicTransaction(validator_address, withdrawal_address, amount, options = {}) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n        const { programName = \"credits.aleo\", functionName = \"bond_public\", fee = options.fee || 0.86, privateFee = false, inputs = [validator_address, withdrawal_address, `${scaledAmount.toString()}u64`], keySearchParams = new AleoKeyProviderParams({\n            proverUri: CREDITS_PROGRAM_KEYS.bond_public.prover,\n            verifierUri: CREDITS_PROGRAM_KEYS.bond_public.verifier,\n            cacheKey: \"credits.aleo/bond_public\"\n        }), program = this.creditsProgram(), ...additionalOptions } = options;\n        const executeOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n    /**\n     * Bond credits to validator.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * @returns string\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the signer (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 1,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {Options} options Options for the execution\n     */\n    async bondPublic(validator_address, withdrawal_address, amount, options = {}) {\n        const tx = await this.buildBondPublicTransaction(validator_address, withdrawal_address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n    /**\n     * Build a bond_validator transaction for later submission to the Aleo Network.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bond validator transaction object for later use.\n     * const tx = await programManager.buildBondValidatorTransaction(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can later be submitted to the network using the network client.\n     * const tx_id = await programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {number} commission The commission rate for the validator (must be between 0 and 100 - an error will be thrown if it is not)\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async buildBondValidatorTransaction(validator_address, withdrawal_address, amount, commission, options = {}) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n        const adjustedCommission = Math.trunc(commission);\n        const { programName = \"credits.aleo\", functionName = \"bond_validator\", fee = options.fee || 0.86, privateFee = false, inputs = [validator_address, withdrawal_address, `${scaledAmount.toString()}u64`, `${adjustedCommission.toString()}u8`], keySearchParams = new AleoKeyProviderParams({\n            proverUri: CREDITS_PROGRAM_KEYS.bond_validator.prover,\n            verifierUri: CREDITS_PROGRAM_KEYS.bond_validator.verifier,\n            cacheKey: \"credits.aleo/bond_validator\"\n        }), program = this.creditsProgram(), ...additionalOptions } = options;\n        const executeOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n    /**\n     * Build transaction to bond a validator.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondValidator(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * @returns string\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {number} commission The commission rate for the validator (must be between 0 and 100 - an error will be thrown if it is not)\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async bondValidator(validator_address, withdrawal_address, amount, commission, options = {}) {\n        const tx = await this.buildBondValidatorTransaction(validator_address, withdrawal_address, amount, commission, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n    /**\n     * Build a transaction to unbond public credits from a validator in the Aleo network.\n     *\n     * @param {string} staker_address - The address of the staker who is unbonding the credits.\n     * @param {number} amount - The amount of credits to unbond (scaled by 1,000,000).\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * // Create a keyProvider to handle key management.\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to unbond credits.\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * const tx = await programManager.buildUnbondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     */\n    async buildUnbondPublicTransaction(staker_address, amount, options = {}) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n        const { programName = \"credits.aleo\", functionName = \"unbond_public\", fee = options.fee || 1.3, privateFee = false, inputs = [staker_address, `${scaledAmount.toString()}u64`], keySearchParams = new AleoKeyProviderParams({\n            proverUri: CREDITS_PROGRAM_KEYS.unbond_public.prover,\n            verifierUri: CREDITS_PROGRAM_KEYS.unbond_public.verifier,\n            cacheKey: \"credits.aleo/unbond_public\"\n        }), program = this.creditsProgram(), ...additionalOptions } = options;\n        const executeOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n        return this.buildExecutionTransaction(executeOptions);\n    }\n    /**\n     * Unbond a specified amount of staked credits.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction and send it to the network\n     * const tx_id = await programManager.unbondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", 10);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is unbonding the credits\n     * @param {number} amount Amount of credits to unbond. If the address of the executor of this function is an\n     * existing validator, it will subtract this amount of credits from the validator's staked credits. If there are\n     * less than 1,000,000 credits staked pool after the unbond, the validator will be removed from the validator set.\n     * If the address of the executor of this function is not a validator and has credits bonded as a delegator, it will\n     * subtract this amount of credits from the delegator's staked credits. If there are less than 10 credits bonded\n     * after the unbond operation, the delegator will be removed from the validator's staking pool.\n     * @param {ExecuteOptions} options Options for the execution\n     */\n    async unbondPublic(staker_address, amount, options = {}) {\n        const tx = await this.buildUnbondPublicTransaction(staker_address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n    /**\n     * Build a transaction to claim unbonded public credits in the Aleo network.\n     *\n     * @param {string} staker_address - The address of the staker who is claiming the credits.\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to claim unbonded credits.\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     *\n     * // Create the claim unbonded transaction object for later use.\n     * const tx = await programManager.buildClaimUnbondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\");\n     * console.log(tx);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     */\n    async buildClaimUnbondPublicTransaction(staker_address, options = {}) {\n        const { programName = \"credits.aleo\", functionName = \"claim_unbond_public\", fee = options.fee || 2, privateFee = false, inputs = [staker_address], keySearchParams = new AleoKeyProviderParams({\n            proverUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.prover,\n            verifierUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier,\n            cacheKey: \"credits.aleo/claim_unbond_public\"\n        }), program = this.creditsProgram(), ...additionalOptions } = options;\n        const executeOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n    /**\n     * Claim unbonded credits. If credits have been unbonded by the account executing this function, this method will\n     * claim them and add them to the public balance of the account.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.claimUnbondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\");\n     *\n     * @param {string} staker_address Address of the staker who is claiming the credits\n     * @param {ExecuteOptions} options\n     * @returns string\n     */\n    async claimUnbondPublic(staker_address, options = {}) {\n        const tx = await this.buildClaimUnbondPublicTransaction(staker_address, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n    /**\n     * Build a set_validator_state transaction for later usage.\n     *\n     * This function allows a validator to set their state to be either opened or closed to new stakers.\n     * When the validator is open to new stakers, any staker (including the validator) can bond or unbond from the validator.\n     * When the validator is closed to new stakers, existing stakers can still bond or unbond from the validator, but new stakers cannot bond.\n     *\n     * This function serves two primary purposes:\n     * 1. Allow a validator to leave the committee, by closing themselves to stakers and then unbonding all of their stakers.\n     * 2. Allow a validator to maintain their % of stake, by closing themselves to allowing more stakers to bond to them.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"ValidatorPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx = await programManager.buildSetValidatorStateTransaction(true);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     */\n    async buildSetValidatorStateTransaction(validator_state, options = {}) {\n        const { programName = \"credits.aleo\", functionName = \"set_validator_state\", fee = 1, privateFee = false, inputs = [validator_state.toString()], keySearchParams = new AleoKeyProviderParams({\n            proverUri: CREDITS_PROGRAM_KEYS.set_validator_state.prover,\n            verifierUri: CREDITS_PROGRAM_KEYS.set_validator_state.verifier,\n            cacheKey: \"credits.aleo/set_validator_state\"\n        }), ...additionalOptions } = options;\n        const executeOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n        return await this.execute(executeOptions);\n    }\n    /**\n     * Submit a set_validator_state transaction to the Aleo Network.\n     *\n     * This function allows a validator to set their state to be either opened or closed to new stakers.\n     * When the validator is open to new stakers, any staker (including the validator) can bond or unbond from the validator.\n     * When the validator is closed to new stakers, existing stakers can still bond or unbond from the validator, but new stakers cannot bond.\n     *\n     * This function serves two primary purposes:\n     * 1. Allow a validator to leave the committee, by closing themselves to stakers and then unbonding all of their stakers.\n     * 2. Allow a validator to maintain their % of stake, by closing themselves to allowing more stakers to bond to them.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"ValidatorPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.setValidatorState(true);\n     *\n     * @returns string\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     */\n    async setValidatorState(validator_state, options = {}) {\n        const tx = await this.buildSetValidatorStateTransaction(validator_state, options);\n        return this.networkClient.submitTransaction(tx);\n    }\n    /**\n     * Verify a proof of execution from an offline execution\n     *\n     * @param {executionResponse} executionResponse\n     * @returns {boolean} True if the proof is valid, false otherwise\n     */\n    verifyExecution(executionResponse) {\n        try {\n            const execution = executionResponse.getExecution();\n            const function_id = executionResponse.getFunctionId();\n            const program = executionResponse.getProgram();\n            const verifyingKey = executionResponse.getVerifyingKey();\n            return (0,_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.verifyFunctionExecution)(execution, verifyingKey, program, function_id);\n        }\n        catch (e) {\n            console.warn(\"The execution was not found in the response, cannot verify the execution\");\n            return false;\n        }\n    }\n    /**\n     * Create a program object from a program's source code\n     *\n     * @param {string} program Program source code\n     * @returns {Program} The program object\n     */\n    createProgramFromSource(program) {\n        return _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Program.fromString(program);\n    }\n    /**\n     * Get the credits program object\n     *\n     * @returns {Program} The credits program object\n     */\n    creditsProgram() {\n        return _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Program.getCreditsProgram();\n    }\n    /**\n     * Verify a program is valid\n     *\n     * @param {string} program The program source code\n     */\n    verifyProgram(program) {\n        try {\n            _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.Program.fromString(program);\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    // Internal utility function for getting a credits.aleo record\n    async getCreditsRecord(amount, nonces, record, params) {\n        try {\n            return record instanceof _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.RecordPlaintext ? record : _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_0__.RecordPlaintext.fromString(record);\n        }\n        catch (e) {\n            try {\n                const recordProvider = this.recordProvider;\n                return (await recordProvider.findCreditsRecord(amount, true, nonces, params));\n            }\n            catch (e) {\n                logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n            }\n        }\n    }\n}\n// Ensure the transfer type requires an amount record\nfunction requiresAmountRecord(transferType) {\n    return PRIVATE_TRANSFER_TYPES.has(transferType);\n}\n// Validate the transfer type\nfunction validateTransferType(transferType) {\n    return VALID_TRANSFER_TYPES.has(transferType) ? transferType :\n        logAndThrow(`Invalid transfer type '${transferType}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`);\n}\n\n\n//# sourceMappingURL=program-manager-CjvnOyfn.js.map\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/program-manager-CjvnOyfn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/worker.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/worker.js ***!
  \******************************************************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_proposals_json_parse_with_source_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/proposals/json-parse-with-source.js */ \"(ssr)/./node_modules/.pnpm/core-js@3.41.0/node_modules/core-js/proposals/json-parse-with-source.js\");\n/* harmony import */ var _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @provablehq/wasm/testnet.js */ \"(ssr)/./node_modules/.pnpm/@provablehq+wasm@0.8.6/node_modules/@provablehq/wasm/dist/testnet/index.js\");\n/* harmony import */ var _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./program-manager-CjvnOyfn.js */ \"(ssr)/./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/program-manager-CjvnOyfn.js\");\n/* harmony import */ var comlink__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! comlink */ \"(ssr)/./node_modules/.pnpm/comlink@4.4.2/node_modules/comlink/dist/esm/comlink.mjs\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__, _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__]);\n([_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__, _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\nawait (0,_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.initThreadPool)();\nconst defaultHost = \"https://api.explorer.provable.com/v1\";\nconst keyProvider = new _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.A();\nconst programManager = new _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.P(defaultHost, keyProvider, undefined);\nkeyProvider.useCache(true);\nlet lastLocalProgram = \"\";\nasync function run(localProgram, aleoFunction, inputs, privateKey, proveExecution = false) {\n    console.log(\"Web worker: Executing function locally...\");\n    const startTime = performance.now();\n    // Ensure the program is valid and that it contains the function specified\n    let program;\n    try {\n        program = programManager.createProgramFromSource(localProgram);\n    }\n    catch (e) {\n        throw new Error(\"Error creating program from source\");\n    }\n    const program_id = program.id();\n    if (!program.hasFunction(aleoFunction)) {\n        throw new Error(`Program ${program_id} does not contain function ${aleoFunction}`);\n    }\n    const cacheKey = `${program_id}:${aleoFunction}`;\n    // Get the program imports\n    let imports;\n    try {\n        imports = await programManager.networkClient.getProgramImports(localProgram);\n    }\n    catch (e) {\n        throw new Error(\"Error getting program imports\");\n    }\n    // Get the proving and verifying keys for the function\n    if (lastLocalProgram !== localProgram) {\n        const keys = await programManager.synthesizeKeys(localProgram, aleoFunction, inputs, _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.PrivateKey.from_string(privateKey));\n        programManager.keyProvider.cacheKeys(cacheKey, keys);\n        lastLocalProgram = localProgram;\n    }\n    // Pass the cache key to the execute function\n    const keyParams = new _program_manager_CjvnOyfn_js__WEBPACK_IMPORTED_MODULE_2__.a({\n        cacheKey: cacheKey,\n    });\n    // Execute the function locally\n    const response = await programManager.run(localProgram, aleoFunction, inputs, proveExecution, imports, keyParams, undefined, undefined, _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.PrivateKey.from_string(privateKey));\n    // Return the outputs to the main thread\n    console.log(`Web worker: Local execution completed in ${performance.now() - startTime} ms`);\n    const outputs = response.getOutputs();\n    const execution = response.getExecution();\n    let executionString = \"\";\n    let keys;\n    try {\n        keys = keyProvider.getKeys(cacheKey);\n    }\n    catch (e) {\n        throw new Error(\"Could not get verifying key\");\n    }\n    const verifyingKey = keys[1];\n    if (execution) {\n        (0,_provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.verifyFunctionExecution)(execution, verifyingKey, program, \"hello\");\n        executionString = execution.toString();\n        console.log(\"Execution verified successfully: \" + execution);\n    }\n    else {\n        executionString = \"\";\n    }\n    console.log(`Function execution response: ${outputs}`);\n    return { outputs: outputs, execution: executionString };\n}\nasync function getPrivateKey() {\n    const privateKey = new _provablehq_wasm_testnet_js__WEBPACK_IMPORTED_MODULE_1__.PrivateKey();\n    return privateKey.to_string();\n}\nconst workerAPI = { run, getPrivateKey };\n(0,comlink__WEBPACK_IMPORTED_MODULE_3__.expose)(workerAPI);\n//# sourceMappingURL=worker.js.map\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHByb3ZhYmxlaHErc2RrQDAuOC42L25vZGVfbW9kdWxlcy9AcHJvdmFibGVocS9zZGsvZGlzdC90ZXN0bmV0L3dvcmtlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFxRDtBQUM2QztBQUNvQjtBQUNyRjs7QUFFakMsTUFBTSwyRUFBYztBQUNwQjtBQUNBLHdCQUF3QiwyREFBZTtBQUN2QywyQkFBMkIsMkRBQWM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLFlBQVksNEJBQTRCLGFBQWE7QUFDeEY7QUFDQSx3QkFBd0IsV0FBVyxHQUFHLGFBQWE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RkFBNkYsbUVBQVU7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsMkRBQXFCO0FBQy9DO0FBQ0EsS0FBSztBQUNMO0FBQ0EsNElBQTRJLG1FQUFVO0FBQ3RKO0FBQ0EsNERBQTRELCtCQUErQjtBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLG9GQUF1QjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsUUFBUTtBQUN4RCxhQUFhO0FBQ2I7QUFDQTtBQUNBLDJCQUEyQixtRUFBVTtBQUNyQztBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCLCtDQUFNO0FBQ04iLCJzb3VyY2VzIjpbIi9ob21lL3VzZXJuYW1lL2FsZW8vcmF0ZS1saW1pdGluZy1udWxsaWZpZXIvcmxuLW1lc3NhZ2UtYm9hcmQvbm9kZV9tb2R1bGVzLy5wbnBtL0Bwcm92YWJsZWhxK3Nka0AwLjguNi9ub2RlX21vZHVsZXMvQHByb3ZhYmxlaHEvc2RrL2Rpc3QvdGVzdG5ldC93b3JrZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdjb3JlLWpzL3Byb3Bvc2Fscy9qc29uLXBhcnNlLXdpdGgtc291cmNlLmpzJztcbmltcG9ydCB7IGluaXRUaHJlYWRQb29sLCBQcml2YXRlS2V5LCB2ZXJpZnlGdW5jdGlvbkV4ZWN1dGlvbiB9IGZyb20gJ0Bwcm92YWJsZWhxL3dhc20vdGVzdG5ldC5qcyc7XG5pbXBvcnQgeyBBIGFzIEFsZW9LZXlQcm92aWRlciwgUCBhcyBQcm9ncmFtTWFuYWdlciwgYSBhcyBBbGVvS2V5UHJvdmlkZXJQYXJhbXMgfSBmcm9tICcuL3Byb2dyYW0tbWFuYWdlci1DanZuT3lmbi5qcyc7XG5pbXBvcnQgeyBleHBvc2UgfSBmcm9tICdjb21saW5rJztcblxuYXdhaXQgaW5pdFRocmVhZFBvb2woKTtcbmNvbnN0IGRlZmF1bHRIb3N0ID0gXCJodHRwczovL2FwaS5leHBsb3Jlci5wcm92YWJsZS5jb20vdjFcIjtcbmNvbnN0IGtleVByb3ZpZGVyID0gbmV3IEFsZW9LZXlQcm92aWRlcigpO1xuY29uc3QgcHJvZ3JhbU1hbmFnZXIgPSBuZXcgUHJvZ3JhbU1hbmFnZXIoZGVmYXVsdEhvc3QsIGtleVByb3ZpZGVyLCB1bmRlZmluZWQpO1xua2V5UHJvdmlkZXIudXNlQ2FjaGUodHJ1ZSk7XG5sZXQgbGFzdExvY2FsUHJvZ3JhbSA9IFwiXCI7XG5hc3luYyBmdW5jdGlvbiBydW4obG9jYWxQcm9ncmFtLCBhbGVvRnVuY3Rpb24sIGlucHV0cywgcHJpdmF0ZUtleSwgcHJvdmVFeGVjdXRpb24gPSBmYWxzZSkge1xuICAgIGNvbnNvbGUubG9nKFwiV2ViIHdvcmtlcjogRXhlY3V0aW5nIGZ1bmN0aW9uIGxvY2FsbHkuLi5cIik7XG4gICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgLy8gRW5zdXJlIHRoZSBwcm9ncmFtIGlzIHZhbGlkIGFuZCB0aGF0IGl0IGNvbnRhaW5zIHRoZSBmdW5jdGlvbiBzcGVjaWZpZWRcbiAgICBsZXQgcHJvZ3JhbTtcbiAgICB0cnkge1xuICAgICAgICBwcm9ncmFtID0gcHJvZ3JhbU1hbmFnZXIuY3JlYXRlUHJvZ3JhbUZyb21Tb3VyY2UobG9jYWxQcm9ncmFtKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgY3JlYXRpbmcgcHJvZ3JhbSBmcm9tIHNvdXJjZVwiKTtcbiAgICB9XG4gICAgY29uc3QgcHJvZ3JhbV9pZCA9IHByb2dyYW0uaWQoKTtcbiAgICBpZiAoIXByb2dyYW0uaGFzRnVuY3Rpb24oYWxlb0Z1bmN0aW9uKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFByb2dyYW0gJHtwcm9ncmFtX2lkfSBkb2VzIG5vdCBjb250YWluIGZ1bmN0aW9uICR7YWxlb0Z1bmN0aW9ufWApO1xuICAgIH1cbiAgICBjb25zdCBjYWNoZUtleSA9IGAke3Byb2dyYW1faWR9OiR7YWxlb0Z1bmN0aW9ufWA7XG4gICAgLy8gR2V0IHRoZSBwcm9ncmFtIGltcG9ydHNcbiAgICBsZXQgaW1wb3J0cztcbiAgICB0cnkge1xuICAgICAgICBpbXBvcnRzID0gYXdhaXQgcHJvZ3JhbU1hbmFnZXIubmV0d29ya0NsaWVudC5nZXRQcm9ncmFtSW1wb3J0cyhsb2NhbFByb2dyYW0pO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBnZXR0aW5nIHByb2dyYW0gaW1wb3J0c1wiKTtcbiAgICB9XG4gICAgLy8gR2V0IHRoZSBwcm92aW5nIGFuZCB2ZXJpZnlpbmcga2V5cyBmb3IgdGhlIGZ1bmN0aW9uXG4gICAgaWYgKGxhc3RMb2NhbFByb2dyYW0gIT09IGxvY2FsUHJvZ3JhbSkge1xuICAgICAgICBjb25zdCBrZXlzID0gYXdhaXQgcHJvZ3JhbU1hbmFnZXIuc3ludGhlc2l6ZUtleXMobG9jYWxQcm9ncmFtLCBhbGVvRnVuY3Rpb24sIGlucHV0cywgUHJpdmF0ZUtleS5mcm9tX3N0cmluZyhwcml2YXRlS2V5KSk7XG4gICAgICAgIHByb2dyYW1NYW5hZ2VyLmtleVByb3ZpZGVyLmNhY2hlS2V5cyhjYWNoZUtleSwga2V5cyk7XG4gICAgICAgIGxhc3RMb2NhbFByb2dyYW0gPSBsb2NhbFByb2dyYW07XG4gICAgfVxuICAgIC8vIFBhc3MgdGhlIGNhY2hlIGtleSB0byB0aGUgZXhlY3V0ZSBmdW5jdGlvblxuICAgIGNvbnN0IGtleVBhcmFtcyA9IG5ldyBBbGVvS2V5UHJvdmlkZXJQYXJhbXMoe1xuICAgICAgICBjYWNoZUtleTogY2FjaGVLZXksXG4gICAgfSk7XG4gICAgLy8gRXhlY3V0ZSB0aGUgZnVuY3Rpb24gbG9jYWxseVxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcHJvZ3JhbU1hbmFnZXIucnVuKGxvY2FsUHJvZ3JhbSwgYWxlb0Z1bmN0aW9uLCBpbnB1dHMsIHByb3ZlRXhlY3V0aW9uLCBpbXBvcnRzLCBrZXlQYXJhbXMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBQcml2YXRlS2V5LmZyb21fc3RyaW5nKHByaXZhdGVLZXkpKTtcbiAgICAvLyBSZXR1cm4gdGhlIG91dHB1dHMgdG8gdGhlIG1haW4gdGhyZWFkXG4gICAgY29uc29sZS5sb2coYFdlYiB3b3JrZXI6IExvY2FsIGV4ZWN1dGlvbiBjb21wbGV0ZWQgaW4gJHtwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZX0gbXNgKTtcbiAgICBjb25zdCBvdXRwdXRzID0gcmVzcG9uc2UuZ2V0T3V0cHV0cygpO1xuICAgIGNvbnN0IGV4ZWN1dGlvbiA9IHJlc3BvbnNlLmdldEV4ZWN1dGlvbigpO1xuICAgIGxldCBleGVjdXRpb25TdHJpbmcgPSBcIlwiO1xuICAgIGxldCBrZXlzO1xuICAgIHRyeSB7XG4gICAgICAgIGtleXMgPSBrZXlQcm92aWRlci5nZXRLZXlzKGNhY2hlS2V5KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGdldCB2ZXJpZnlpbmcga2V5XCIpO1xuICAgIH1cbiAgICBjb25zdCB2ZXJpZnlpbmdLZXkgPSBrZXlzWzFdO1xuICAgIGlmIChleGVjdXRpb24pIHtcbiAgICAgICAgdmVyaWZ5RnVuY3Rpb25FeGVjdXRpb24oZXhlY3V0aW9uLCB2ZXJpZnlpbmdLZXksIHByb2dyYW0sIFwiaGVsbG9cIik7XG4gICAgICAgIGV4ZWN1dGlvblN0cmluZyA9IGV4ZWN1dGlvbi50b1N0cmluZygpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIkV4ZWN1dGlvbiB2ZXJpZmllZCBzdWNjZXNzZnVsbHk6IFwiICsgZXhlY3V0aW9uKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGV4ZWN1dGlvblN0cmluZyA9IFwiXCI7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGBGdW5jdGlvbiBleGVjdXRpb24gcmVzcG9uc2U6ICR7b3V0cHV0c31gKTtcbiAgICByZXR1cm4geyBvdXRwdXRzOiBvdXRwdXRzLCBleGVjdXRpb246IGV4ZWN1dGlvblN0cmluZyB9O1xufVxuYXN5bmMgZnVuY3Rpb24gZ2V0UHJpdmF0ZUtleSgpIHtcbiAgICBjb25zdCBwcml2YXRlS2V5ID0gbmV3IFByaXZhdGVLZXkoKTtcbiAgICByZXR1cm4gcHJpdmF0ZUtleS50b19zdHJpbmcoKTtcbn1cbmNvbnN0IHdvcmtlckFQSSA9IHsgcnVuLCBnZXRQcml2YXRlS2V5IH07XG5leHBvc2Uod29ya2VyQVBJKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdvcmtlci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@provablehq+sdk@0.8.6/node_modules/@provablehq/sdk/dist/testnet/worker.js\n");

/***/ })

};
;